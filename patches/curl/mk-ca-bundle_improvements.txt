diff --git a/lib/mk-ca-bundle.pl b/lib/mk-ca-bundle.pl
index 0b133184..710c88a8 100755
--- a/lib/mk-ca-bundle.pl
+++ b/lib/mk-ca-bundle.pl
@@ -8,6 +8,9 @@
 # *
 # * Copyright (C) 1998 - 2014, Daniel Stenberg, <daniel@haxx.se>, et al.
 # *
+# * Additional modifications copyright (C) 2014,2015 Kyle J. McKay.
+# * All rights reserved.
+# *
 # * This software is licensed as described in the file COPYING, which
 # * you should have received as part of this distribution. The terms
 # * are also available at http://curl.haxx.se/docs/copyright.html.
@@ -32,16 +35,33 @@
 #
 use Getopt::Std;
 use MIME::Base64;
-use LWP::UserAgent;
 use strict;
-use vars qw($opt_b $opt_d $opt_f $opt_h $opt_i $opt_l $opt_n $opt_p $opt_q $opt_s $opt_t $opt_u $opt_v $opt_w);
+use vars qw($opt_b $opt_d $opt_f $opt_h $opt_i $opt_l $opt_n $opt_p $opt_q $opt_s $opt_t $opt_u $opt_v $opt_w $have_lwp $have_sha1);
 use List::Util;
 use Text::Wrap;
-my $MOD_SHA = "Digest::SHA";
-eval "require $MOD_SHA";
-if ($@) {
-  $MOD_SHA = "Digest::SHA::PurePerl";
-  eval "require $MOD_SHA";
+BEGIN {
+  eval {
+    require LWP::UserAgent;
+    LWP::UserAgent->import;
+    $have_lwp = 1;
+  };
+}
+BEGIN {
+  $have_sha1 = 1;
+  eval {
+    require Digest::SHA;
+    Digest::SHA->import(qw(sha1_hex));
+    1;
+  } || eval {
+    require Digest::SHA1;
+    Digest::SHA1->import(qw(sha1_hex));
+    1;
+  } || eval {
+    require Digest::SHA::PurePerl;
+    Digest::SHA::PurePerl->import(qw(sha1_hex));
+    1;
+  } ||
+  undef($have_sha1);
 }
 
 my %urls = (
@@ -62,7 +82,7 @@ $opt_d = 'release';
 # If the OpenSSL commandline is not in search path you can configure it here!
 my $openssl = 'openssl';
 
-my $version = '1.25';
+my $version = '1.25_1';
 
 $opt_w = 76; # default base64 encoded lines length
 
@@ -119,7 +139,7 @@ if(!defined($opt_d)) {
 # Use predefined URL or else custom URL specified on command line.
 my $url = ( defined( $urls{$opt_d} ) ) ? $urls{$opt_d} : $opt_d;
 
-my $curl = `curl -V`;
+my $curl = `curl -V 2>/dev/null` || '';
 
 if ($opt_i) {
   print ("=" x 78 . "\n");
@@ -128,10 +148,12 @@ if ($opt_i) {
   print "Operating System Name            : $^O\n";
   print "Getopt::Std.pm Version           : ${Getopt::Std::VERSION}\n";
   print "MIME::Base64.pm Version          : ${MIME::Base64::VERSION}\n";
-  print "LWP::UserAgent.pm Version        : ${LWP::UserAgent::VERSION}\n";
-  print "LWP.pm Version                   : ${LWP::VERSION}\n";
-  print "Digest::SHA.pm Version           : ${Digest::SHA::VERSION}\n" if ($Digest::SHA::VERSION);
-  print "Digest::SHA::PurePerl.pm Version : ${Digest::SHA::PurePerl::VERSION}\n" if ($Digest::SHA::PurePerl::VERSION);
+  print "LWP::UserAgent.pm Version        : @{[$have_lwp ? ${LWP::UserAgent::VERSION} : 'n/a']}\n";
+  print "LWP.pm Version                   : @{[$have_lwp ? ${LWP::VERSION} : 'n/a']}\n";
+  print "Digest::SHA.pm Version           : @{[${Digest::SHA::VERSION} ? ${Digest::SHA::VERSION} : 'n/a']}\n";
+  print "Digest::SHA1.pm Version          : @{[${Digest::SHA1::VERSION} ? ${Digest::SHA1::VERSION} : 'n/a']}\n";
+  print "Digest::SHA::PurePerl.pm Version : @{[${Digest::SHA::PurePerl::VERSION} ? ${Digest::SHA::PurePerl::VERSION} : 'n/a']}\n";
+  print "cURL Version                     : @{[$curl =~ /^curl (\d\.\d+(?:\.\d+)*)/ ? $1 : 'n/a']}\n";
   print ("=" x 78 . "\n");
 }
 
@@ -148,7 +170,7 @@ sub warning_message() {
     print "     swear at you.  ;)\n";
     exit;
   } else { # Short Form Warning
-    print "Warning: Use of this script may pose some risk, -d risk for more details.\n";
+    print STDERR "Warning: Use of this script may pose some risk, -d risk for more details.\n";
   }
 }
 
@@ -158,10 +180,11 @@ sub HELP_MESSAGE() {
   print "\t-d\tspecify Mozilla tree to pull certdata.txt or custom URL\n";
   print "\t\t  Valid names are:\n";
   print "\t\t    ", join( ", ", map { ( $_ =~ m/$opt_d/ ) ? "$_ (default)" : "$_" } sort keys %urls ), "\n";
+  print "\t\t    ", join( "\n\t\t    ", map { sprintf "%-8s %s", "$_:", $urls{$_} } sort keys %urls ), "\n" if $opt_v;
   print "\t-f\tforce rebuild even if certdata.txt is current\n";
   print "\t-i\tprint version info about used modules\n";
   print "\t-l\tprint license info about certdata.txt\n";
-  print "\t-n\tno download of certdata.txt (to use existing)\n";
+  print wrap("\t","\t\t", "-n\tno download of certdata.txt (to use existing)@{[$curl||$have_lwp?'':' -- required on this OS as neither curl nor LWP::UserAgent is present']}"), "\n";
   print wrap("\t","\t\t", "-p\tlist of Mozilla trust purposes and levels for certificates to include in output. Takes the form of a comma separated list of purposes, a colon, and a comma separated list of levels. (default: $default_mozilla_trust_purposes:$default_mozilla_trust_levels)"), "\n";
   print "\t\t  Valid purposes are:\n";
   print wrap("\t\t    ","\t\t    ", join( ", ", "ALL", @valid_mozilla_trust_purposes ) ), "\n";
@@ -173,7 +196,7 @@ sub HELP_MESSAGE() {
   print wrap("\t\t    ","\t\t    ", join( ", ", "ALL", @valid_signature_algorithms ) ), "\n";
   print "\t-t\tinclude plain text listing of certificates\n";
   print "\t-u\tunlink (remove) certdata.txt after processing\n";
-  print "\t-v\tbe verbose and print out processed CAs\n";
+  print "\t-v\tbe verbose and print out processed CAs and include URLs in help output\n";
   print "\t-w <l>\twrap base64 output lines after <l> chars (default: ${opt_w})\n";
   exit;
 }
@@ -220,10 +243,11 @@ sub parse_csv_param($$@) {
 
 sub sha1 {
   my $result;
-  if ($Digest::SHA::VERSION || $Digest::SHA::PurePerl::VERSION) {
+  if ($have_sha1) {
     open(FILE, $_[0]) or die "Can't open '$_[0]': $!";
     binmode(FILE);
-    $result = $MOD_SHA->new(1)->addfile(*FILE)->hexdigest;
+    local $/ = undef;
+    $result = sha1_hex(scalar(<FILE>));
     close(FILE);
   } else {
     # Use OpenSSL command if Perl Digest::SHA modules not available
@@ -232,19 +256,20 @@ sub sha1 {
   return $result;
 }
 
-
 sub oldsha1 {
-  my $sha1 = "";
-  open(C, "<$_[0]") || return 0;
-  while(<C>) {
-    chomp;
-    if($_ =~ /^\#\# SHA1: (.*)/) {
-      $sha1 = $1;
-      last;
+    my ($crt)=@_;
+    my $sha1="<no file present>";
+    if (open(C, "<$crt")) {
+      while(<C>) {
+          chomp;
+          if($_ =~ /^\#\# SHA1: (.*)/) {
+              $sha1 = $1;
+              last;
+          }
+      }
+      close(C);
     }
-  }
-  close(C);
-  return $sha1;
+    return $sha1;
 }
 
 if ( $opt_p !~ m/:/ ) {
@@ -276,40 +301,64 @@ my $stdout = $crt eq '-';
 my $resp;
 my $fetched;
 
-my $oldsha1 = oldsha1($crt);
+my $oldsha1= $stdout ? '' : oldsha1($crt);
 
-print STDERR "SHA1 of old file: $oldsha1\n" if (!$opt_q);
+print STDERR "SHA1 of old data file: $oldsha1\n" unless $stdout || $opt_q;
 
-print STDERR "Downloading '$txt' ...\n" if (!$opt_q);
-
-if($curl && !$opt_n) {
-  my $https = $url;
-  $https =~ s/^http:/https:/;
-  print STDERR "Get certdata over HTTPS with curl!\n" if (!$opt_q);
-  my $quiet = $opt_q ? "-s" : "";
-  my @out = `curl -w %{response_code} $quiet -O $https`;
-  if(@out && $out[0] == 200) {
-    $fetched = 1;
-  } else {
-    print STDERR "Failed downloading HTTPS with curl, trying HTTP with LWP\n" if (!$opt_q);
+unless ($opt_n and -e $txt) {
+  if ($opt_n) {
+    print STDERR "No '$txt' file found to process and option -n given.\n";
+    exit 1;
   }
-}
-
-unless ($fetched || ($opt_n and -e $txt)) {
-  my $ua  = new LWP::UserAgent(agent => "$0/$version");
-  $ua->env_proxy();
-  $resp = $ua->mirror($url, $txt);
-  if ($resp && $resp->code eq '304') {
-    print STDERR "Not modified\n" unless $opt_q;
-    exit 0 if -e $crt && !$opt_f;
-  } else {
+  if (!$curl && !$have_lwp) {
+    print STDERR
+      "The -n option is required on this OS as neither curl nor LWP::UserAgent\n",
+      "is present.  Use the -v and -h options together to see the source URLs,\n",
+      "download a suitable certdata.txt file via other means (such as wget) and\n",
+      "run this script again using the -n option to process the certdata.txt file.\n";
+    exit 1;
+  }
+  print STDERR "Downloading '$txt' ...\n" unless $opt_q;
+  if ($curl) {
+    my $https = $url;
+    $https =~ s/^http:/https:/;
+    print STDERR "Getting certdata over HTTPS with curl!\n" unless $opt_q;
+    my $quiet = $opt_q ? "-s" : "";
+    my @out = `curl -w %{response_code} $quiet -O $https`;
+    if(@out && $out[0] == 200) {
       $fetched = 1;
-  }
-  if( !$resp || $resp->code !~ /^(?:200|304)$/ ) {
-      print STDERR "Unable to download latest data: "
-        . ($resp? $resp->code . ' - ' . $resp->message : "LWP failed") . "\n"
+    } else {
+      print STDERR "Failed downloading HTTPS with curl@{[$have_lwp ? ', trying HTTP with LWP' : '']}\n"
         unless $opt_q;
-      exit 1 if -e $crt || ! -r $txt;
+    }
+  }
+
+  if (!$fetched && $have_lwp) {
+    print STDERR "Getting certdata over HTTP with LWP::UserAgent\n" unless $opt_q;
+    my $ua  = new LWP::UserAgent(agent => "$0/$version");
+    $ua->env_proxy();
+    $resp = $ua->mirror($url, $txt);
+    if ($resp && $resp->code eq '304') {
+      print STDERR "Not modified\n" unless $opt_q;
+      exit 0 if -e $crt && !$opt_f;
+    } else {
+	$fetched = 1;
+    }
+    if( !$resp || $resp->code !~ /^(?:200|304)$/ ) {
+	print STDERR "Unable to download latest data: "
+	  . ($resp? $resp->code . ' - ' . $resp->message : "LWP failed") . "\n"
+	  unless $opt_q;
+	exit 1 if -e $crt || ! -r $txt;
+    }
+  }
+
+  unless ($fetched) {
+    print STDERR
+      "Failed to download '$txt'.\n",
+      "Please try again or use the -v and -h options together to see the source\n",
+      "URLs, download a suitable certdata.txt file via other means (such as wget)\n",
+      "and run this script again using the -n option to process the certdata.txt file.\n";
+    exit 1;
   }
 }
 
@@ -329,7 +378,7 @@ if(!$opt_f && $oldsha1 eq $newsha1) {
     exit;
 }
 
-print STDERR "SHA1 of new file: $newsha1\n";
+print STDERR "SHA1 of new data file: $newsha1\n";
 
 my $currentdate = scalar gmtime($filedate);
 
