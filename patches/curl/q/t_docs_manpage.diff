Subject: [PATCH] curl.1: update to match code

The curl.1 man page contains various information that is actually
misleading about the version of darwinssl (SecureTransport) code
included in this build.

Update it to provide accurate information.

Signed-off-by: Kyle J. McKay <mackyle@gmail.com>

---
 docs/curl.1 | 85 +++++++++++++++++++++++++------------------------------------
 1 file changed, 34 insertions(+), 51 deletions(-)

diff --git a/docs/curl.1 b/docs/curl.1
index 600853eb..bb5e1368 100644
--- a/docs/curl.1
+++ b/docs/curl.1
@@ -18,6 +18,9 @@
 .\" * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 .\" * KIND, either express or implied.
 .\" *
+.\" * Updates for improved DarwinSSL vtls Copyright (C) 2016,2017 Kyle J. McKay.
+.\" * All rights reserved.
+.\" *
 .\" **************************************************************************
 .\"
 .\" DO NOT EDIT. Generated by the curl project gen.pl man page generator.
@@ -179,22 +182,9 @@ may contain multiple CA certificates. The certificate(s) must be in PEM
 format. Normally curl is built to use a default file for this, so this option
 is typically used to alter that default file.
 
-curl recognizes the environment variable named 'CURL_CA_BUNDLE' if it is
-set, and uses the given path as a path to a CA cert bundle. This option
-overrides that variable.
-
-The windows version of curl will automatically look for a CA certs file named
-\'curl-ca-bundle.crt\', either in the same directory as curl.exe, or in the
-Current Working Directory, or in any folder along your PATH.
-
-If curl is built against the NSS SSL library, the NSS PEM PKCS#11 module
-(libnsspem.so) needs to be available for this option to work properly.
-
-(iOS and macOS only) If curl is built against Secure Transport, then this
-option is supported for backward compatibility with other SSL engines, but it
-should not be set. If the option is not set, then curl will use the
-certificates in the system and user Keychain to verify the peer, which is the
-preferred method of verifying the peer's certificate chain.
+If this option is not set, then curl will use the certificates in the system
+and user Keychains to verify the peer, which is the preferred method of
+verifying the peer's certificate chain.
 
 If this option is used several times, the last one will be used.
 .IP "--capath <dir>"
@@ -208,6 +198,8 @@ OpenSSL-powered curl to make SSL-connections much more efficiently than using
 
 If this option is set, the default capath value will be ignored, and if it is
 used several times, the last one will be used.
+
+This option is NOT supported with this SecureTransport-based build of curl.
 .IP "--cert-status"
 (TLS) Tells curl to verify the status of the server certificate by using the
 Certificate Status Request (aka. OCSP stapling) TLS extension.
@@ -216,40 +208,32 @@ If this option is enabled and the server sends an invalid (e.g. expired)
 response, if the response suggests that the server certificate has been revoked,
 or no response at all is received, the verification fails.
 
-This is currently only implemented in the OpenSSL, GnuTLS and NSS backends.
+This is currently only implemented in the OpenSSL, GnuTLS and NSS backends which
+means it is NOT supported in this build.
 
 Added in 7.41.0.
 .IP "--cert-type <type>"
 (TLS) Tells curl what certificate type the provided certificate is in. PEM, DER and
-ENG are recognized types.  If not specified, PEM is assumed.
+ENG are recognized types.  If not specified, PEM is assumed.  Use of DER format
+is not recommended as only a single client leaf certificate is supported in that case.
 
 If this option is used several times, the last one will be used.
 
 See also \fI-E, --cert\fP and \fI--key\fP and \fI--key-type\fP.
 .IP "-E, --cert <certificate[:password]>"
 (TLS) Tells curl to use the specified client certificate file when getting a file
-with HTTPS, FTPS or another SSL-based protocol. The certificate must be in
-PKCS#12 format if using Secure Transport, or PEM format if using any other
-engine.  If the optional password isn't specified, it will be queried for on
-the terminal. Note that this option assumes a \&"certificate" file that is the
-private key and the client certificate concatenated! See \fI-E, --cert\fP and \fI--key\fP to
-specify them independently.
-
-If curl is built against the NSS SSL library then this option can tell
-curl the nickname of the certificate to use within the NSS database defined
-by the environment variable SSL_DIR (or by default /etc/pki/nssdb). If the
-NSS PEM PKCS#11 module (libnsspem.so) is available then PEM files may be
-loaded. If you want to use a file from the current directory, please precede
-it with "./" prefix, in order to avoid confusion with a nickname.  If the
-nickname contains ":", it needs to be preceded by "\\" so that it is not
-recognized as password delimiter.  If the nickname contains "\\", it needs to
-be escaped as "\\\\" so that it is not recognized as an escape character.
-
-(iOS and macOS only) If curl is built against Secure Transport, then the
-certificate string can either be the name of a certificate/private key in the
-system or user keychain, or the path to a PKCS#12-encoded certificate and
-private key. If you want to use a file from the current directory, please
-precede it with "./" prefix, in order to avoid confusion with a nickname.
+with HTTPS, FTPS or another SSL-based protocol. The certificate(s) must be in
+PEM format.  If the optional password isn't specified, it will be prompted for
+interactively.  Note that this option assumes a \&"certificate" file that is the
+private key and the client certificate(s) concatenated!  Use both the
+\fI-E, --cert\fP and \fI--key\fP options to specify them independently.
+
+The certificate string can either be the name of a certificate/private key in
+the system or user keychain, or the path to a PEM format certificate(s) and
+(optioanlly) private key file. If you want to use a file from the current
+directory, please precede it with a "./" prefix, in order to avoid confusion with
+a nickname.  Note that if the client certificate is located in the user/system
+keychain then the password must also be in the keychain.
 
 If this option is used several times, the last one will be used.
 
@@ -424,6 +408,9 @@ specify peer certificates that are to be considered revoked.
 
 If this option is used several times, the last one will be used.
 
+This option is NOT supported in this build.  Certificates may be added to the
+System keychain and marked as "Never Trust" as an alternative.
+
 Added in 7.19.7.
 .IP "--data-ascii <data>"
 (HTTP) This is just an alias for \fI-d, --data\fP.
@@ -1323,23 +1310,19 @@ Added in 7.42.0.
 (TLS) Tells curl to use the specified public key file (or hashes) to verify the
 peer. This can be a path to a file which contains a single public key in PEM
 or DER format, or any number of base64 encoded sha256 hashes preceded by
-\'sha256//\' and separated by \';\'
+\'sha256//\' and separated by \';\'.
+
+Additionally, if this is a path to a file, the file may also contain a single
+DER format certificate or one or more PEM format certificates/public keys in
+which case the public keys are automatically extracted from the certificates.
 
 When negotiating a TLS or SSL connection, the server sends a certificate
 indicating its identity. A public key is extracted from this certificate and
 if it does not exactly match the public key provided to this option, curl will
 abort the connection before sending or receiving any data.
 
-PEM/DER support:
-  7.39.0: OpenSSL, GnuTLS and GSKit
-  7.43.0: NSS and wolfSSL/CyaSSL
-  7.47.0: mbedtls
-  7.49.0: PolarSSL
-sha256 support:
-  7.44.0: OpenSSL, GnuTLS, NSS and wolfSSL/CyaSSL.
-  7.47.0: mbedtls
-  7.49.0: PolarSSL
-Other SSL backends not supported.
+Although this is a SecureTransport-based build of curl, it DOES support both
+PEM/DER format files AND sha256 hashes.
 
 If this option is used several times, the last one will be used.
 .IP "--post301"
---
