Subject: [PATCH] Pending updates headed for release

Only those updates that we can't live without but are
not in the "release" branch yet end up in here.

Hopefully this will be empty most of the time.
---
 gitweb/gitweb.perl                    | 18 ++++++++++++------
 gitweb/static/gitweb.css              |  1 +
 gitweb/static/js/blame_incremental.js |  2 +-
 3 files changed, 14 insertions(+), 7 deletions(-)

diff --git a/gitweb/gitweb.perl b/gitweb/gitweb.perl
index 33d701d8..74d45769 100755
--- a/gitweb/gitweb.perl
+++ b/gitweb/gitweb.perl
@@ -664,9 +664,11 @@ sub feature_extra_branch_refs {
 # and then pruned.
 sub check_head_link {
 	my ($dir) = @_;
+	return 0 unless -d "$dir/objects" && -x _;
+	return 0 unless -d "$dir/refs" && -x _;
 	my $headfile = "$dir/HEAD";
-	return ((-e $headfile) ||
-		(-l $headfile && readlink($headfile) =~ /^refs\/heads\//));
+	return -l $headfile ?
+		readlink($headfile) =~ /^refs\/heads\// : -f $headfile;
 }
 
 sub check_export_ok {
@@ -1272,7 +1274,7 @@ sub configure_as_fcgi {
 
 	my $request_number = 0;
 	# let each child service 100 requests
-	our $is_last_request = sub { ++$request_number > 100 };
+	our $is_last_request = sub { ++$request_number >= 100 };
 }
 sub evaluate_argv {
 	my $script_name = $ENV{'SCRIPT_NAME'} || $ENV{'SCRIPT_FILENAME'} || __FILE__;
@@ -3293,7 +3295,7 @@ sub git_get_remotes_list {
 		next if $wanted and not $remote eq $wanted;
 		my ($url, $key) = ($1, $2);
 
-		$remotes{$remote} ||= { 'heads' => () };
+		$remotes{$remote} ||= { 'heads' => [] };
 		$remotes{$remote}{$key} = $url;
 	}
 	close $fd or return;
@@ -4102,10 +4104,14 @@ sub print_search_form {
 	} else {
 		$search_hash = "HEAD";
 	}
+	# We can't use href() here because we need to encode the
+	# URL parameters into the form, not into the action link.
 	my $action = $my_uri;
 	my $use_pathinfo = gitweb_check_feature('pathinfo');
 	if ($use_pathinfo) {
-		$action .= "/".esc_url($project);
+		# See notes about doubled / in href()
+		$action =~ s,/$,,;
+		$action .= "/".esc_path_info($project);
 	}
 	print $cgi->start_form(-method => "get", -action => $action) .
 	      "<div class=\"search\">\n" .
@@ -7421,7 +7427,7 @@ sub git_log_generic {
 			$cgi->a({-href => href(-replay=>1, page=>$page+1),
 			         -accesskey => "n", -title => "Alt-n"}, "next");
 	}
-	my $patch_max = gitweb_get_feature('patches');
+	my ($patch_max) = gitweb_get_feature('patches');
 	if ($patch_max && !defined $file_name) {
 		if ($patch_max < 0 || @commitlist <= $patch_max) {
 			$paging_nav .= " &sdot; " .
diff --git a/gitweb/static/gitweb.css b/gitweb/static/gitweb.css
index 32126010..02cced9a 100644
--- a/gitweb/static/gitweb.css
+++ b/gitweb/static/gitweb.css
@@ -638,6 +638,7 @@ div.remote {
 
 .popup { /* timezone selection UI */
 	position: absolute;
+	z-index: 1;
 	/* "top: 0; right: 0;" would be better, if not for bugs in browsers */
 	top: 0; left: 0;
 	border: 1px solid;
diff --git a/gitweb/static/js/blame_incremental.js b/gitweb/static/js/blame_incremental.js
index db6eb505..e100d820 100644
--- a/gitweb/static/js/blame_incremental.js
+++ b/gitweb/static/js/blame_incremental.js
@@ -484,7 +484,7 @@ function processBlameLines(lines) {
 			case 'previous':
 				curCommit.nprevious++;
 				// store only first 'previous' header
-				if (!'previous' in curCommit) {
+				if (!('previous' in curCommit)) {
 					var parts = data.split(' ', 2);
 					curCommit.previous    = parts[0];
 					curCommit.file_parent = unquote(parts[1]);
---
