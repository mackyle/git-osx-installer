Subject: [PATCH] gitweb: improve highlight syntax matching

The highlight command itself supports many more file extensions
and aliases than gitweb does.

Add the full list of extensions and aliases from highlight-2.16
so that more files can be shown with proper highlighting.

The extended list of extensions is compatible with both highlight
2.x and 3.x.

Signed-off-by: Kyle J. McKay <mackyle@gmail.com>
---
 gitweb/gitweb.perl | 230 ++++++++++++++++++++++++++++++++++++++++++++++++-----
 1 file changed, 209 insertions(+), 21 deletions(-)

diff --git a/gitweb/gitweb.perl b/gitweb/gitweb.perl
index 62aace40..8feb19a9 100755
--- a/gitweb/gitweb.perl
+++ b/gitweb/gitweb.perl
@@ -304,20 +304,136 @@ our %highlight_basename = (
 	#'Library' => 'py',
 	'SConstruct' => 'py', # SCons equivalent of Makefile
 	'Makefile' => 'make',
+	'makefile' => 'make',
+	'GNUmakefile' => 'make',
+	'BSDmakefile' => 'make',
+);
+# match by shebang regex
+our %highlight_shebang = (
+	# Each entry has a key which is the syntax to use and
+	# a value which is either a qr regex or an array of qr regexs to match
+	# against the first 128 (less if the blob is shorter) BYTES of the blob.
+	# We match /usr/bin/env items separately to require "/usr/bin/env" and
+	# allow a limited subset of NAME=value items to appear.
+	'awk'    => [ qr,^#!\s*/(?:\w+/)*(?:[gnm]?awk)(?:\s|$),mo,
+		      qr,^#!\s*/usr/bin/env\s+(?:\w+=\w*\s+)*(?:[gnm]?awk)(?:\s|$),mo ],
+	'make'   => [ qr,^#!\s*/(?:\w+/)*(?:g?make)(?:\s|$),mo,
+		      qr,^#!\s*/usr/bin/env\s+(?:\w+=\w*\s+)*(?:g?make)(?:\s|$),mo ],
+	'php'    => [ qr,^#!\s*/(?:\w+/)*(?:php)(?:\s|$),mo,
+		      qr,^#!\s*/usr/bin/env\s+(?:\w+=\w*\s+)*(?:php)(?:\s|$),mo ],
+	'pl'     => [ qr,^#!\s*/(?:\w+/)*(?:perl)(?:\s|$),mo,
+		      qr,^#!\s*/usr/bin/env\s+(?:\w+=\w*\s+)*(?:perl)(?:\s|$),mo ],
+	'py'     => [ qr,^#!\s*/(?:\w+/)*(?:python)(?:\s|$),mo,
+		      qr,^#!\s*/usr/bin/env\s+(?:\w+=\w*\s+)*(?:python)(?:\s|$),mo ],
+	'sh'     => [ qr,^#!\s*/(?:\w+/)*(?:[bd]ash|t?csh|[akz]?sh)(?:\s|$),mo,
+		      qr,^#!\s*/usr/bin/env\s+(?:\w+=\w*\s+)*(?:[bd]ash|t?csh|[akz]?sh)(?:\s|$),mo ],
+	'rb'     => [ qr,^#!\s*/(?:\w+/)*(?:perl)(?:\s|$),mo,
+		      qr,^#!\s*/usr/bin/env\s+(?:\w+=\w*\s+)*(?:perl)(?:\s|$),mo ],
 );
 # match by extension
 our %highlight_ext = (
 	# main extensions, defining name of syntax;
 	# see files in /usr/share/highlight/langDefs/ directory
-	(map { $_ => $_ } qw(py rb java css js tex bib xml awk bat ini spec tcl sql)),
+	(map { $_ => $_ } qw(
+		4gl a4c abnf abp ada agda ahk ampl amtrix applescript arc
+		arm as asm asp aspect ats au3 avenue awk bat bb bbcode bib
+		bms bnf boo c cb cfc chl clipper clojure clp cob cs css d
+		diff dot dylan e ebnf erl euphoria exp f90 flx for frink fs
+		go haskell hcl html httpd hx icl icn idl idlang ili
+		inc_luatex ini inp io iss j java js jsp lbn ldif lgt lhs
+		lisp lotos ls lsl lua ly make mel mercury mib miranda ml mo
+		mod2 mod3 mpl ms mssql n nas nbc nice nrx nsi nut nxc oberon
+		objc octave oorexx os oz pas php pike pl pl1 pov pro
+		progress ps ps1 psl pure py pyx q qmake qu r rb rebol rexx
+		rnc s sas sc scala scilab sh sma smalltalk sml sno spec spn
+		sql sybase tcl tcsh tex ttcn3 vala vb verilog vhd xml xpp y
+		yaiff znn)),
 	# alternate extensions, see /etc/highlight/filetypes.conf
-	(map { $_ => 'c'   } qw(c h)),
-	(map { $_ => 'sh'  } qw(sh bash zsh ksh)),
-	(map { $_ => 'cpp' } qw(cpp cxx c++ cc)),
-	(map { $_ => 'php' } qw(php php3 php4 php5 phps)),
-	(map { $_ => 'pl'  } qw(pl perl pm)), # perhaps also 'cgi'
-	(map { $_ => 'make'} qw(make mak mk)),
-	(map { $_ => 'xml' } qw(xml xhtml html htm)),
+	(map { $_ => '4gl' } qw(informix)),
+	(map { $_ => 'a4c' } qw(ascend)),
+	(map { $_ => 'abp' } qw(abp4)),
+	(map { $_ => 'ada' } qw(a adb ads gnad)),
+	(map { $_ => 'ahk' } qw(autohotkey)),
+	(map { $_ => 'ampl' } qw(dat run)),
+	(map { $_ => 'amtrix' } qw(hnd s4 s4h s4t t4)),
+	(map { $_ => 'as' } qw(actionscript)),
+	(map { $_ => 'asm' } qw(29k 68s 68x a51 assembler x68 x86)),
+	(map { $_ => 'asp' } qw(asa)),
+	(map { $_ => 'aspect' } qw(was wud)),
+	(map { $_ => 'ats' } qw(dats)),
+	(map { $_ => 'au3' } qw(autoit)),
+	(map { $_ => 'bat' } qw(cmd)),
+	(map { $_ => 'bb' } qw(blitzbasic)),
+	(map { $_ => 'bib' } qw(bibtex)),
+	(map { $_ => 'c' } qw(c++ cc cpp cu cxx h hh hpp hxx)),
+	(map { $_ => 'cb' } qw(clearbasic)),
+	(map { $_ => 'cfc' } qw(cfm coldfusion)),
+	(map { $_ => 'chl' } qw(chill)),
+	(map { $_ => 'cob' } qw(cbl cobol)),
+	(map { $_ => 'cs' } qw(csharp)),
+	(map { $_ => 'diff' } qw(patch)),
+	(map { $_ => 'dot' } qw(graphviz)),
+	(map { $_ => 'e' } qw(eiffel se)),
+	(map { $_ => 'erl' } qw(erlang hrl)),
+	(map { $_ => 'euphoria' } qw(eu ew ex exu exw wxu)),
+	(map { $_ => 'exp' } qw(express)),
+	(map { $_ => 'f90' } qw(f95)),
+	(map { $_ => 'flx' } qw(felix)),
+	(map { $_ => 'for' } qw(f f77 ftn)),
+	(map { $_ => 'fs' } qw(fsharp fsx)),
+	(map { $_ => 'haskell' } qw(hs)),
+	(map { $_ => 'html' } qw(htm xhtml)),
+	(map { $_ => 'hx' } qw(haxe)),
+	(map { $_ => 'icl' } qw(clean)),
+	(map { $_ => 'icn' } qw(icon)),
+	(map { $_ => 'ili' } qw(interlis)),
+	(map { $_ => 'inp' } qw(fame)),
+	(map { $_ => 'iss' } qw(innosetup)),
+	(map { $_ => 'j' } qw(jasmin)),
+	(map { $_ => 'java' } qw(groovy grv)),
+	(map { $_ => 'lbn' } qw(luban)),
+	(map { $_ => 'lgt' } qw(logtalk)),
+	(map { $_ => 'lisp' } qw(cl clisp el lsp sbcl scom)),
+	(map { $_ => 'ls' } qw(lotus)),
+	(map { $_ => 'lsl' } qw(lindenscript)),
+	(map { $_ => 'ly' } qw(lilypond)),
+	(map { $_ => 'make' } qw(mak mk kmk)),
+	(map { $_ => 'mel' } qw(maya)),
+	(map { $_ => 'mib' } qw(smi snmp)),
+	(map { $_ => 'ml' } qw(mli ocaml)),
+	(map { $_ => 'mo' } qw(modelica)),
+	(map { $_ => 'mod2' } qw(def mod)),
+	(map { $_ => 'mod3' } qw(i3 m3)),
+	(map { $_ => 'mpl' } qw(maple)),
+	(map { $_ => 'n' } qw(nemerle)),
+	(map { $_ => 'nas' } qw(nasal)),
+	(map { $_ => 'nrx' } qw(netrexx)),
+	(map { $_ => 'nsi' } qw(nsis)),
+	(map { $_ => 'nut' } qw(squirrel)),
+	(map { $_ => 'oberon' } qw(ooc)),
+	(map { $_ => 'objc' } qw(M m mm)),
+	(map { $_ => 'php' } qw(php3 php4 php5 php6)),
+	(map { $_ => 'pike' } qw(pmod)),
+	(map { $_ => 'pl' } qw(perl plex plx pm)),
+	(map { $_ => 'pl1' } qw(bdy ff fp fpp rpp sf sp spb spe spp sps wf wp wpb wpp wps)),
+	(map { $_ => 'progress' } qw(i p w)),
+	(map { $_ => 'py' } qw(python)),
+	(map { $_ => 'pyx' } qw(pyrex)),
+	(map { $_ => 'rb' } qw(pp rjs ruby)),
+	(map { $_ => 'rexx' } qw(rex rx the)),
+	(map { $_ => 'sc' } qw(paradox)),
+	(map { $_ => 'scilab' } qw(sce sci)),
+	(map { $_ => 'sh' } qw(bash ebuild eclass ksh zsh)),
+	(map { $_ => 'sma' } qw(small)),
+	(map { $_ => 'smalltalk' } qw(gst sq st)),
+	(map { $_ => 'sno' } qw(snobal)),
+	(map { $_ => 'sybase' } qw(sp)),
+	(map { $_ => 'tcl' } qw(itcl wish)),
+	(map { $_ => 'tex' } qw(cls sty)),
+	(map { $_ => 'vb' } qw(bas basic bi vbs)),
+	(map { $_ => 'verilog' } qw(v)),
+	(map { $_ => 'xml' } qw(dtd ecf ent hdr hub jnlp nrm plist resx sgm sgml svg tld vxml wml xsd xsl)),
+	(map { $_ => 'y' } qw(bison)),
 );
 
 # You define site-wide feature defaults here; override them with
@@ -4133,15 +4249,73 @@ sub blob_contenttype {
 	return $type;
 }
 
+# peek the first upto 128 bytes off a file handle
+sub peek128bytes {
+	my $fd = shift;
+
+	use IO::Handle;
+	use bytes;
+
+	my $prefix128;
+	return '' unless $fd && read($fd, $prefix128, 128);
+
+	# In the general case, we're guaranteed only to be able to ungetc one
+	# character (provided, of course, we actually got a character first).
+	#
+	# However, we know:
+	#
+	# 1) we are dealing with a :perlio layer since blob_mimetype will have
+	#    already been called at least once on the file handle before us
+	#
+	# 2) we have an $fd positioned at the start of the input stream and
+	#    therefore know we were positioned at a buffer boundary before
+	#    reading the initial upto 128 bytes
+	#
+	# 3) the buffer size is at least 512 bytes
+	#
+	# 4) we are careful to only unget raw bytes
+	#
+	# 5) we are attempting to unget exactly the same number of bytes we got
+	#
+	# Given the above conditions we will ALWAYS be able to safely unget
+	# the $prefix128 value we just got.
+	#
+	# In fact, we could read up to 511 bytes and still be sure.
+	# (Reading 512 might pop us into the next internal buffer, but probably
+	# not since that could break the always able to unget at least the one
+	# you just got guarantee.)
+
+	map {$fd->ungetc(ord($_))} reverse(split //, $prefix128);
+
+	return $prefix128;
+}
+
 # guess file syntax for syntax highlighting; return undef if no highlighting
 # the name of syntax can (in the future) depend on syntax highlighter used
 sub guess_file_syntax {
-	my ($highlight, $mimetype, $file_name) = @_;
-	return undef unless ($highlight && defined $file_name);
+	my ($fd, $mimetype, $file_name) = @_;
+	return undef unless $fd && defined $file_name &&
+		defined $mimetype && $mimetype =~ m!^text/.+!i;
 	my $basename = basename($file_name, '.in');
 	return $highlight_basename{$basename}
 		if exists $highlight_basename{$basename};
 
+	# Peek to see if there's a shebang or xml line.
+	# We always operate on bytes when testing this.
+	{
+		use bytes;
+		my $shebang = peek128bytes($fd);
+		if (length($shebang) >= 4 && $shebang =~ /^#!/) { # 4 would be '#!/x'
+			foreach my $key (keys %highlight_shebang) {
+				my $ar = ref($highlight_shebang{$key}) ?
+					$highlight_shebang{$key} :
+					[$highlight_shebang{key}];
+				map {return $key if $shebang =~ /$_/} @$ar;
+			}
+		}
+		return 'xml' if $shebang =~ m!^\s*<\?xml\s!; # "xml" must be lowercase
+	}
+
 	$basename =~ /\.([^.]*)$/;
 	my $ext = $1 or return undef;
 	return $highlight_ext{$ext}
@@ -4153,15 +4327,29 @@ sub guess_file_syntax {
 # run highlighter and return FD of its output,
 # or return original FD if no highlighting
 sub run_highlighter {
-	my ($fd, $highlight, $syntax) = @_;
-	return $fd unless ($highlight && defined $syntax);
+	my ($fd, $syntax) = @_;
+	return $fd unless $fd && !eof($fd) && defined $highlight_bin && defined $syntax;
 
-	close $fd;
-	open $fd, quote_command(git_cmd(), "cat-file", "blob", $hash)." | ".
+	defined(open my $hifd, quote_command(git_cmd(), "cat-file", "blob", $hash)." | ".
 	          quote_command($highlight_bin).
-	          " --replace-tabs=8 --fragment --syntax $syntax |"
+	          " --replace-tabs=8 --fragment --syntax $syntax |")
 		or die_error(500, "Couldn't open file or run syntax highlighter");
-	return $fd;
+	if (eof $hifd) {
+		# just in case, should not happen as we tested !eof($fd) above
+		return $fd if close($hifd);
+
+		# should not happen
+		!$! or die_error(500, "Couldn't close syntax highighter pipe");
+
+		# leaving us with the only possibility a non-zero exit status (possibly a signal);
+		# instead of dying horribly on this, just skip the highlighting
+		# but do output a message about it to STDERR that will end up in the log
+		print STDERR "warning: skipping failed highlight for --syntax $syntax: ".
+			sprintf("child exit status 0x%x\n", $?);
+		return $fd
+	}
+	close $fd;
+	return ($hifd, 1);
 }
 
 ## ======================================================================
@@ -7569,10 +7757,10 @@ sub git_blob {
 	# we can have blame only for text/* mimetype
 	$have_blame &&= ($mimetype =~ m!^text/!);
 
-	my $highlight = gitweb_check_feature('highlight');
-	my $syntax = guess_file_syntax($highlight, $mimetype, $file_name);
-	$fd = run_highlighter($fd, $highlight, $syntax)
-		if $syntax;
+	my $highlight = gitweb_check_feature('highlight') && defined $highlight_bin;
+	my $syntax = guess_file_syntax($fd, $mimetype, $file_name) if $highlight;
+	my $highlight_mode_active;
+	($fd, $highlight_mode_active) = run_highlighter($fd, $syntax) if $syntax;
 
 	git_header_html(undef, $expires);
 	my $formats_nav = '';
@@ -7626,7 +7814,7 @@ sub git_blob {
 			$line = untabify($line);
 			printf qq!<div class="pre"><a id="l%i" href="%s#l%i" class="linenr">%4i</a> %s</div>\n!,
 			       $nr, esc_attr(href(-replay => 1)), $nr, $nr,
-			       $syntax ? sanitize($line) : esc_html($line, -nbsp=>1);
+			       $highlight_mode_active ? sanitize($line) : esc_html($line, -nbsp=>1);
 		}
 	}
 	close $fd
---
