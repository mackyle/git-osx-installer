Subject: [PATCH] gitweb: send git_cmd() stderr output to /dev/null

Signed-off-by: Kyle J. McKay <mackyle@gmail.com>
---
gitweb/gitweb.perl | 134 ++++++++++++++++++++++++++++++++---------------------
1 file changed, 80 insertions(+), 54 deletions(-)

diff --git a/gitweb/gitweb.perl b/gitweb/gitweb.perl
index e6685380..f52794ee 100755
--- a/gitweb/gitweb.perl
+++ b/gitweb/gitweb.perl
@@ -17,6 +17,7 @@ use Encode;
 use Fcntl ':mode';
 use File::Find qw();
 use File::Basename qw(basename);
+use File::Spec;
 use Time::HiRes qw(gettimeofday tv_interval);
 use Time::Local;
 use constant GITWEB_CACHE_FORMAT => "Gitweb Cache Format 3";
@@ -2751,6 +2752,32 @@ sub git_cmd {
 	return $GIT, '--git-dir='.$git_dir;
 }
 
+# opens a "-|" cmd pipe handle with 2>/dev/null and returns it
+sub cmd_pipe {
+
+	# In order to be compatible with FCGI mode we must use POSIX
+	# and access the STDERR_FILENO file descriptor directly
+
+	use POSIX qw(STDERR_FILENO dup dup2);
+
+	open(my $null, '>', File::Spec->devnull) or die "couldn't open devnull: $!";
+	(my $saveerr = dup(STDERR_FILENO)) or die "couldn't dup STDERR: $!";
+	my $dup2ok = dup2(fileno($null), STDERR_FILENO);
+	close($null) or !$dup2ok or die "couldn't close NULL: $!";
+	$dup2ok or POSIX::close($saveerr), die "couldn't dup NULL to STDERR: $!";
+	my $result = open(my $fd, "-|", @_);
+	$dup2ok = dup2($saveerr, STDERR_FILENO);
+	POSIX::close($saveerr) or !$dup2ok or die "couldn't close SAVEERR: $!";
+	$dup2ok or die "couldn't dup SAVERR to STDERR: $!";
+
+	return $result ? $fd : undef;
+}
+
+# opens a "-|" git_cmd pipe handle with 2>/dev/null and returns it
+sub git_cmd_pipe {
+	return cmd_pipe git_cmd(), @_;
+}
+
 # quote the given arguments for passing them to the shell
 # quote_command("command", "arg 1", "arg with ' and ! characters")
 # => "'command' 'arg 1' 'arg with '\'' and '\!' characters'"
@@ -2778,8 +2805,8 @@ sub git_get_hash {
 	my $o_git_dir = $git_dir;
 	my $retval = undef;
 	$git_dir = "$projectroot/$project";
-	if (open my $fd, '-|', git_cmd(), 'rev-parse',
-	    '--verify', '-q', @options, $hash) {
+	if (defined(my $fd = git_cmd_pipe 'rev-parse',
+	    '--verify', '-q', @options, $hash)) {
 		$retval = <$fd>;
 		chomp $retval if defined $retval;
 		close $fd;
@@ -2794,7 +2821,7 @@ sub git_get_hash {
 sub git_get_type {
 	my $hash = shift;
 
-	open my $fd, "-|", git_cmd(), "cat-file", '-t', $hash or return;
+	defined(my $fd = git_cmd_pipe "cat-file", '-t', $hash) or return;
 	my $type = <$fd>;
 	close $fd or return;
 	chomp $type;
@@ -2827,7 +2854,7 @@ sub git_parse_project_config {
 
 	local $/ = "\0";
 
-	open my $fh, "-|", git_cmd(), "config", '-z', '-l',
+	defined(my $fh = git_cmd_pipe "config", '-z', '-l')
 		or return;
 
 	while (my $keyval = <$fh>) {
@@ -2942,7 +2969,7 @@ sub git_get_hash_by_path {
 
 	$path =~ s,/+$,,;
 
-	open my $fd, "-|", git_cmd(), "ls-tree", $base, "--", $path
+	defined(my $fd = git_cmd_pipe "ls-tree", $base, "--", $path)
 		or die_error(500, "Open git-ls-tree failed");
 	my $line = <$fd>;
 	close $fd or return undef;
@@ -2969,7 +2996,7 @@ sub git_get_path_by_hash {
 
 	local $/ = "\0";
 
-	open my $fd, "-|", git_cmd(), "ls-tree", '-r', '-t', '-z', $base
+	defined(my $fd = git_cmd_pipe "ls-tree", '-r', '-t', '-z', $base)
 		or return undef;
 	while (my $line = <$fd>) {
 		chomp $line;
@@ -3420,7 +3447,7 @@ sub git_get_last_activity {
 		}
 	}
 	return (undef) if $quick;
-	open($fd, "-|", git_cmd(), 'for-each-ref',
+	defined($fd = git_cmd_pipe 'for-each-ref',
 	     '--format=%(committer)',
 	     '--sort=-committerdate',
 	     '--count=1',
@@ -3445,7 +3472,7 @@ sub git_get_remotes_list {
 	my $wanted = shift;
 	my %remotes = ();
 
-	open my $fd, '-|' , git_cmd(), 'remote', '-v';
+	my $fd = git_cmd_pipe 'remote', '-v';
 	return unless $fd;
 	while (my $remote = <$fd>) {
 		chomp $remote;
@@ -3478,8 +3505,8 @@ sub git_get_references {
 	my %refs;
 	# 5dc01c595e6c6ec9ccda4f6f69c131c0dd945f8c refs/tags/v2.6.11
 	# c39ae07f393806ccf406ef966e9a15afc43cc36a refs/tags/v2.6.11^{}
-	open my $fd, "-|", git_cmd(), "show-ref", "--dereference",
-		($type ? ("--", "refs/$type") : ()) # use -- <pattern> if $type
+	defined(my $fd = git_cmd_pipe "show-ref", "--dereference",
+		($type ? ("--", "refs/$type") : ())) # use -- <pattern> if $type
 		or return;
 
 	while (my $line = <$fd>) {
@@ -3499,7 +3526,7 @@ sub git_get_references {
 sub git_get_rev_name_tags {
 	my $hash = shift || return undef;
 
-	open my $fd, "-|", git_cmd(), "name-rev", "--tags", $hash
+	defined(my $fd = git_cmd_pipe "name-rev", "--tags", $hash)
 		or return;
 	my $name_rev = <$fd>;
 	close $fd;
@@ -3554,7 +3581,7 @@ sub parse_tag {
 	my %tag;
 	my @comment;
 
-	open my $fd, "-|", git_cmd(), "cat-file", "tag", $tag_id or return;
+	defined(my $fd = git_cmd_pipe "cat-file", "tag", $tag_id) or return;
 	$tag{'id'} = $tag_id;
 	while (my $line = <$fd>) {
 		chomp $line;
@@ -3694,12 +3721,12 @@ sub parse_commit {
 
 	local $/ = "\0";
 
-	open my $fd, "-|", git_cmd(), "rev-list",
+	defined(my $fd = git_cmd_pipe "rev-list",
 		"--parents",
 		"--header",
 		"--max-count=1",
 		$commit_id,
-		"--",
+		"--")
 		or die_error(500, "Open git-rev-list failed");
 	%co = parse_commit_text(<$fd>, 1);
 	close $fd;
@@ -3716,7 +3743,7 @@ sub parse_commits {
 
 	local $/ = "\0";
 
-	open my $fd, "-|", git_cmd(), "rev-list",
+	defined(my $fd = git_cmd_pipe "rev-list",
 		"--header",
 		@args,
 		("--max-count=" . $maxcount),
@@ -3724,7 +3751,7 @@ sub parse_commits {
 		@extra_options,
 		$commit_id,
 		"--",
-		($filename ? ($filename) : ())
+		($filename ? ($filename) : ()))
 		or die_error(500, "Open git-rev-list failed");
 	while (my $line = <$fd>) {
 		my %co = parse_commit_text($line);
@@ -3878,10 +3905,10 @@ sub git_get_heads_list {
 	my @patterns = map { "refs/$_" } @classes;
 	my @headslist;
 
-	open my $fd, '-|', git_cmd(), 'for-each-ref',
+	defined(my $fd = git_cmd_pipe 'for-each-ref',
 		($limit ? '--count='.($limit+1) : ()), '--sort=-committerdate',
 		'--format=%(objectname) %(refname) %(subject)%00%(committer)',
-		@patterns
+		@patterns)
 		or return;
 	while (my $line = <$fd>) {
 		my %ref_item;
@@ -3925,11 +3952,11 @@ sub git_get_tags_list {
 	my $order = shift || $default_refs_order;
 	my $sortkey = $all && $order eq 'name' ? 'refname' : '-creatordate';
 
-	open my $fd, '-|', git_cmd(), 'for-each-ref',
+	defined(my $fd = git_cmd_pipe 'for-each-ref',
 		($limit ? '--count='.($limit+1) : ()), "--sort=$sortkey",
 		'--format=%(objectname) %(objecttype) %(refname) '.
 		'%(*objectname) %(*objecttype) %(subject)%00%(creator)',
-		($all ? 'refs' : 'refs/tags')
+		($all ? 'refs' : 'refs/tags'))
 		or return;
 	while (my $line = <$fd>) {
 		my %ref_item;
@@ -4818,7 +4845,7 @@ sub git_get_link_target {
 	my $link_target;
 
 	# read link
-	open my $fd, "-|", git_cmd(), "cat-file", "blob", $hash
+	defined(my $fd = git_cmd_pipe "cat-file", "blob", $hash)
 		or return;
 	{
 		local $/ = undef;
@@ -6599,9 +6626,9 @@ sub git_search_changes {
 	my %co = @_;
 
 	local $/ = "\n";
-	open my $fd, '-|', git_cmd(), '--no-pager', 'log', @diff_opts,
+	defined(my $fd = git_cmd_pipe '--no-pager', 'log', @diff_opts,
 		'--pretty=format:%H', '--no-abbrev', '--raw', "-S$searchtext",
-		($search_use_regexp ? '--pickaxe-regex' : ())
+		($search_use_regexp ? '--pickaxe-regex' : ()))
 			or die_error(500, "Open git-log failed");
 
 	git_header_html();
@@ -6682,9 +6709,9 @@ sub git_search_files {
 	my %co = @_;
 
 	local $/ = "\n";
-	open my $fd, "-|", git_cmd(), 'grep', '-n', '-z',
+	defined(my $fd = git_cmd_pipe 'grep', '-n', '-z',
 		$search_use_regexp ? ('-E', '-i') : '-F',
-		$searchtext, $co{'tree'}
+		$searchtext, $co{'tree'})
 			or die_error(500, "Open git-grep failed");
 
 	git_header_html();
@@ -7121,17 +7148,17 @@ sub git_blame_common {
 	my $fd;
 	if ($format eq 'incremental') {
 		# get file contents (as base)
-		open $fd, "-|", git_cmd(), 'cat-file', 'blob', $hash
+		defined($fd = git_cmd_pipe 'cat-file', 'blob', $hash)
 			or die_error(500, "Open git-cat-file failed");
 	} elsif ($format eq 'data') {
 		# run git-blame --incremental
-		open $fd, "-|", git_cmd(), "blame", "--incremental",
-			$hash_base, "--", $file_name
+		defined($fd = git_cmd_pipe "blame", "--incremental",
+			$hash_base, "--", $file_name)
 			or die_error(500, "Open git-blame --incremental failed");
 	} else {
 		# run git-blame --porcelain
-		open $fd, "-|", git_cmd(), "blame", '-p',
-			$hash_base, '--', $file_name
+		defined($fd = git_cmd_pipe "blame", '-p',
+			$hash_base, '--', $file_name)
 			or die_error(500, "Open git-blame --porcelain failed");
 	}
 	binmode $fd, ':utf8';
@@ -7437,7 +7464,7 @@ sub git_blob_plain {
 		$expires = "+1d";
 	}
 
-	open my $fd, "-|", git_cmd(), "cat-file", "blob", $hash
+	defined(my $fd = git_cmd_pipe "cat-file", "blob", $hash)
 		or die_error(500, "Open git-cat-file blob '$hash' failed");
 
 	# content-type (can include charset)
@@ -7499,7 +7526,7 @@ sub git_blob {
 	}
 
 	my $have_blame = gitweb_check_feature('blame');
-	open my $fd, "-|", git_cmd(), "cat-file", "blob", $hash
+	defined(my $fd = git_cmd_pipe "cat-file", "blob", $hash)
 		or die_error(500, "Couldn't cat $file_name, $hash");
 	my $mimetype = blob_mimetype($fd, $file_name);
 	# use 'blob_plain' (aka 'raw') view for files that cannot be displayed
@@ -7595,8 +7622,8 @@ sub git_tree {
 	my @entries = ();
 	{
 		local $/ = "\0";
-		open my $fd, "-|", git_cmd(), "ls-tree", '-z',
-			($show_sizes ? '-l' : ()), @extra_options, $hash
+		defined(my $fd = git_cmd_pipe "ls-tree", '-z',
+			($show_sizes ? '-l' : ()), @extra_options, $hash)
 			or die_error(500, "Open git-ls-tree failed");
 		@entries = map { chomp; $_ } <$fd>;
 		close $fd
@@ -7814,7 +7841,7 @@ sub git_snapshot {
 		%co ? (-last_modified => $latest_date{'rfc2822'}) : (),
 		-status => '200 OK');
 
-	open my $fd, "-|", $cmd
+	defined(my $fd = cmd_pipe $cmd)
 		or die_error(500, "Execute git-archive failed");
 	binmode STDOUT, ':raw';
 	print <$fd>;
@@ -7946,10 +7973,10 @@ sub git_commit {
 		$parent = "--root";
 	}
 	my @difftree;
-	open my $fd, "-|", git_cmd(), "diff-tree", '-r', "--no-commit-id",
+	defined(my $fd = git_cmd_pipe "diff-tree", '-r', "--no-commit-id",
 		@diff_opts,
 		(@$parents <= 1 ? $parent : '-c'),
-		$hash, "--"
+		$hash, "--")
 		or die_error(500, "Open git-diff-tree failed");
 	@difftree = map { chomp; $_ } <$fd>;
 	close $fd or die_error(404, "Reading git-diff-tree failed");
@@ -8028,8 +8055,7 @@ sub git_object {
 	if ($hash || ($hash_base && !defined $file_name)) {
 		my $object_id = $hash || $hash_base;
 
-		open my $fd, "-|", quote_command(
-			git_cmd(), 'cat-file', '-t', $object_id) . ' 2> /dev/null'
+		defined(my $fd = git_cmd_pipe 'cat-file', '-t', $object_id)
 			or die_error(404, "Object does not exist");
 		$type = <$fd>;
 		chomp $type;
@@ -8044,7 +8070,7 @@ sub git_object {
 			or die_error(404, "Base object does not exist");
 
 		# here errors should not happen
-		open my $fd, "-|", git_cmd(), "ls-tree", $hash_base, "--", $file_name
+		defined(my $fd = git_cmd_pipe "ls-tree", $hash_base, "--", $file_name)
 			or die_error(500, "Open git-ls-tree failed");
 		my $line = <$fd>;
 		close $fd;
@@ -8079,9 +8105,9 @@ sub git_blobdiff {
 	if (defined $hash_base && defined $hash_parent_base) {
 		if (defined $file_name) {
 			# read raw output
-			open $fd, "-|", git_cmd(), "diff-tree", '-r', @diff_opts,
+			defined($fd = git_cmd_pipe "diff-tree", '-r', @diff_opts,
 				$hash_parent_base, $hash_base,
-				"--", (defined $file_parent ? $file_parent : ()), $file_name
+				"--", (defined $file_parent ? $file_parent : ()), $file_name)
 				or die_error(500, "Open git-diff-tree failed");
 			@difftree = map { chomp; $_ } <$fd>;
 			close $fd
@@ -8094,8 +8120,8 @@ sub git_blobdiff {
 			# try to find filename from $hash
 
 			# read filtered raw output
-			open $fd, "-|", git_cmd(), "diff-tree", '-r', @diff_opts,
-				$hash_parent_base, $hash_base, "--"
+			defined($fd = git_cmd_pipe "diff-tree", '-r', @diff_opts,
+				$hash_parent_base, $hash_base, "--")
 				or die_error(500, "Open git-diff-tree failed");
 			@difftree =
 				# ':100644 100644 03b21826... 3b93d5e7... M	ls-files.c'
@@ -8129,10 +8155,10 @@ sub git_blobdiff {
 		}
 
 		# open patch output
-		open $fd, "-|", git_cmd(), "diff-tree", '-r', @diff_opts,
+		defined($fd = git_cmd_pipe "diff-tree", '-r', @diff_opts,
 			'-p', ($format eq 'html' ? "--full-index" : ()),
 			$hash_parent_base, $hash_base,
-			"--", (defined $file_parent ? $file_parent : ()), $file_name
+			"--", (defined $file_parent ? $file_parent : ()), $file_name)
 			or die_error(500, "Open git-diff-tree failed");
 	}
 
@@ -8322,9 +8348,9 @@ sub git_commitdiff {
 	my $fd;
 	my @difftree;
 	if ($format eq 'html') {
-		open $fd, "-|", git_cmd(), "diff-tree", '-r', @diff_opts,
+		defined($fd = git_cmd_pipe "diff-tree", '-r', @diff_opts,
 			"--no-commit-id", "--patch-with-raw", "--full-index",
-			$hash_parent_param, $hash, "--"
+			$hash_parent_param, $hash, "--")
 			or die_error(500, "Open git-diff-tree failed");
 
 		while (my $line = <$fd>) {
@@ -8335,8 +8361,8 @@ sub git_commitdiff {
 		}
 
 	} elsif ($format eq 'plain') {
-		open $fd, "-|", git_cmd(), "diff-tree", '-r', @diff_opts,
-			'-p', $hash_parent_param, $hash, "--"
+		defined($fd = git_cmd_pipe "diff-tree", '-r', @diff_opts,
+			'-p', $hash_parent_param, $hash, "--")
 			or die_error(500, "Open git-diff-tree failed");
 	} elsif ($format eq 'patch') {
 		# For commit ranges, we limit the output to the number of
@@ -8360,8 +8386,8 @@ sub git_commitdiff {
 			}
 			push @commit_spec, '--root', $hash;
 		}
-		open $fd, "-|", git_cmd(), "format-patch", @diff_opts,
-			'--encoding=utf8', '--stdout', @commit_spec
+		defined($fd = git_cmd_pipe "format-patch", @diff_opts,
+			'--encoding=utf8', '--stdout', @commit_spec)
 			or die_error(500, "Open git-format-patch failed");
 	} else {
 		die_error(400, "Unknown commitdiff format");
@@ -8710,9 +8736,9 @@ XML
 		my %cd = parse_date($co{'author_epoch'}, $co{'author_tz'});
 
 		# get list of changed files
-		open my $fd, "-|", git_cmd(), "diff-tree", '-r', @diff_opts,
+		defined(my $fd = git_cmd_pipe "diff-tree", '-r', @diff_opts,
 			$co{'parent'} || "--root",
-			$co{'id'}, "--", (defined $file_name ? $file_name : ())
+			$co{'id'}, "--", (defined $file_name ? $file_name : ()))
 			or next;
 		my @difftree = map { chomp; $_ } <$fd>;
 		close $fd
---
