Subject: [PATCH] gitweb: show hash for displayed objects

If gitweb is displaying a tag, tree or blob via a ref
name rather than a hash, it's impossible to actually see
the hash of the item.

Therefore always show the item type and hash id as the
first line of data.  This means the commit hash will be
moved to the top to be consistent with the others.

Signed-off-by: Kyle J. McKay <mackyle@gmail.com>
---
 gitweb/gitweb.perl | 25 ++++++++++++++++++++++---
 1 file changed, 22 insertions(+), 3 deletions(-)

diff --git a/gitweb/gitweb.perl b/gitweb/gitweb.perl
index 691d1288..6d8b389d 100755
--- a/gitweb/gitweb.perl
+++ b/gitweb/gitweb.perl
@@ -7458,12 +7458,17 @@ sub git_tag {
 		die_error(404, "Unknown tag object");
 	}
 
+	my $fullhash;
+	$fullhash = $hash if $hash =~ m/^[0-9a-fA-F]{40}$/;
+	$fullhash = git_get_full_hash($project, $hash) unless $fullhash;
+
 	my $head = git_get_head_hash($project);
 	git_header_html();
 	git_print_page_nav('','', $head,undef,$head);
 	git_print_header_div('commit', esc_html($tag{'name'}), $hash);
 	print "<div class=\"title_text\">\n" .
 	      "<table class=\"object_header\">\n" .
+	      "<tr><td>tag</td><td class=\"sha1\">$fullhash</td></tr>\n" .
 	      "<tr>\n" .
 	      "<td>object</td>\n" .
 	      "<td>" . $cgi->a({-class => "list", -href => href(action=>$tag{'type'}, hash=>$tag{'object'})},
@@ -7899,9 +7904,11 @@ sub git_blob {
 		# blobs defined by non-textual hash id's can be cached
 		$expires = "+1d";
 	}
+	my $fullhash = git_get_full_hash($project, "$hash^{blob}");
+	die_error(404, "No such blob") unless defined($fullhash);
 
 	my $have_blame = gitweb_check_feature('blame');
-	defined(my $fd = git_cmd_pipe "cat-file", "blob", $hash)
+	defined(my $fd = git_cmd_pipe "cat-file", "blob", $fullhash)
 		or die_error(500, "Couldn't cat $file_name, $hash");
 	binmode($fd);
 	my $mimetype = blob_mimetype($fd, $file_name);
@@ -7952,6 +7959,11 @@ sub git_blob {
 		      "<div class=\"title\">".esc_html($hash)."</div>\n";
 	}
 	git_print_page_path($file_name, "blob", $hash_base);
+	print "<div class=\"title_text\">\n" .
+	      "<table class=\"object_header\">\n";
+	print "<tr><td>blob</td><td class=\"sha1\">$fullhash</td></tr>\n";
+	print "</table>".
+	      "</div>\n";
 	print "<div class=\"page_body\">\n";
 	if ($mimetype =~ m!^image/!) {
 		print qq!<img class="blob" type="!.esc_attr($mimetype).qq!"!;
@@ -7991,6 +8003,8 @@ sub git_tree {
 		}
 	}
 	die_error(404, "No such tree") unless defined($hash);
+	my $fullhash = git_get_full_hash($project, "$hash^{tree}");
+	die_error(404, "No such tree") unless defined($fullhash);
 
 	my $show_sizes = gitweb_check_feature('show-sizes');
 	my $have_blame = gitweb_check_feature('blame');
@@ -7999,7 +8013,7 @@ sub git_tree {
 	{
 		local $/ = "\0";
 		defined(my $fd = git_cmd_pipe "ls-tree", '-z',
-			($show_sizes ? '-l' : ()), @extra_options, $hash)
+			($show_sizes ? '-l' : ()), @extra_options, $fullhash)
 			or die_error(500, "Open git-ls-tree failed");
 		@entries = map { chomp; to_utf8($_) } <$fd>;
 		close $fd
@@ -8041,6 +8055,11 @@ sub git_tree {
 		}
 		git_print_page_path($file_name, 'tree', $hash_base);
 	}
+	print "<div class=\"title_text\">\n" .
+	      "<table class=\"object_header\">\n";
+	print "<tr><td>tree</td><td class=\"sha1\">$fullhash</td></tr>\n";
+	print "</table>".
+	      "</div>\n";
 	print "<div class=\"page_body\">\n";
 	print "<table class=\"tree\">\n";
 	my $alternate = 1;
@@ -8384,8 +8403,8 @@ sub git_commit {
 	}
 	print "<div class=\"title_text\">\n" .
 	      "<table class=\"object_header\">\n";
-	git_print_authorship_rows(\%co);
 	print "<tr><td>commit</td><td class=\"sha1\">$co{'id'}</td></tr>\n";
+	git_print_authorship_rows(\%co);
 	print "<tr>" .
 	      "<td>tree</td>" .
 	      "<td class=\"sha1\">" .
---
