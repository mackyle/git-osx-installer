Subject: [PATCH] gitweb: support automatic FCGI detection

Add support for a new configuration option '$auto_fcgi' and when true
automatically activate FCGI mode when getsockname succeeds on STDIN
(and STDIN is on fd 0) and getpeername returns ENOTCONN.

Enabling this feature allows the same configuration to be used for
both non-FCGI (i.e. regular CGI mode) and FCGI mode operation.

This feature is currently opt-in only.  Because although extremely
unlikely, it's certainly feasible for gitweb to be executed with STDIN
set to a socket in listen mode even though gitweb itself is expected
to not actually run in FCGI mode.  And someday pigs might fly.

Signed-off-by: Kyle J. McKay <mackyle@gmail.com>
---
 Documentation/gitweb.conf.txt |  5 +++
 gitweb/gitweb.perl            | 79 ++++++++++++++++++++++++++++++-------------
 2 files changed, 60 insertions(+), 24 deletions(-)

diff --git a/Documentation/gitweb.conf.txt b/Documentation/gitweb.conf.txt
index 450ab97a..1b628533 100644
--- a/Documentation/gitweb.conf.txt
+++ b/Documentation/gitweb.conf.txt
@@ -629,6 +629,11 @@ This variable matters only when using persistent web environments that
 serve multiple requests using single gitweb instance, like mod_perl,
 FastCGI or Plackup.
 
+$auto_fcgi::
+	If true and STDIN has fileno 0 and getsockname succeeds and getpeername
+	fails with ENOTCONN, FCGI mode will be activated automatically just the
+	same way as though the '--fcgi' option was given.
+
 
 Other variables
 ~~~~~~~~~~~~~~~
diff --git a/gitweb/gitweb.perl b/gitweb/gitweb.perl
index 46dfb04e..c4df54c7 100755
--- a/gitweb/gitweb.perl
+++ b/gitweb/gitweb.perl
@@ -452,7 +452,8 @@ our %feature = (
 	# Note that you will need to change the default location of CSS,
 	# favicon, logo and possibly other files to an absolute URL. Also,
 	# if gitweb.cgi serves as your indexfile, you will need to force
-	# $my_uri to contain the script name in your $GITWEB_CONFIG.
+	# $my_uri to contain the script name in your $GITWEB_CONFIG (and you
+	# will also likely want to set $home_link if you're setting $my_uri).
 	'pathinfo' => {
 		'override' => 0,
 		'default' => [0]},
@@ -761,6 +762,11 @@ sub filter_and_validate_refs {
 # if it is true then gitweb config would be run for each request.
 our $per_request_config = 1;
 
+# If true and fileno STDIN is 0 and getsockname succeeds and getpeername fails
+# with ENOTCONN, then FCGI mode will be activated automatically in just the
+# same way as though the --fcgi option had been given instead.
+our $auto_fcgi = 0;
+
 # read and parse gitweb config file given by its parameter.
 # returns true on success, false on recoverable error, allowing
 # to chain this subroutine, using first file that exists.
@@ -1296,6 +1302,7 @@ sub reset_timer {
 }
 
 our $first_request = 1;
+our $evaluate_uri_force = undef;
 sub run_request {
 	reset_timer();
 
@@ -1312,10 +1319,7 @@ EOT
 	}
 
 	evaluate_uri();
-	if ($first_request) {
-		evaluate_gitweb_config();
-		evaluate_git_version();
-	}
+	&$evaluate_uri_force() if $evaluate_uri_force;
 	if ($per_request_config) {
 		if (ref($per_request_config) eq 'CODE') {
 			$per_request_config->();
@@ -1342,10 +1346,24 @@ our $is_last_request = sub { 1 };
 our ($pre_dispatch_hook, $post_dispatch_hook, $pre_listen_hook);
 our $CGI = 'CGI';
 our $cgi;
+our $fcgi_mode = 0;
+our $fcgi_nproc_active = 0;
+sub is_fcgi {
+	use Errno;
+	my $stdinfno = fileno STDIN;
+	return 0 unless defined $stdinfno && $stdinfno == 0;
+	return 0 unless getsockname STDIN;
+	return 0 if getpeername STDIN;
+	return $!{ENOTCONN}?1:0;
+}
 sub configure_as_fcgi {
+	return if $fcgi_mode;
+
 	require CGI::Fast;
 	our $CGI = 'CGI::Fast';
 
+	$fcgi_mode = 1;
+	$first_request = 0;
 	my $request_number = 0;
 	# let each child service 100 requests
 	our $is_last_request = sub { ++$request_number >= 100 };
@@ -1353,24 +1371,29 @@ sub configure_as_fcgi {
 sub evaluate_argv {
 	my $script_name = $ENV{'SCRIPT_NAME'} || $ENV{'SCRIPT_FILENAME'} || __FILE__;
 	configure_as_fcgi()
-		if $script_name =~ /\.fcgi$/;
+		if $script_name =~ /\.fcgi$/ || ($auto_fcgi && is_fcgi());
 
-	return unless (@ARGV);
-
-	require Getopt::Long;
-	Getopt::Long::GetOptions(
-		'fastcgi|fcgi|f' => \&configure_as_fcgi,
-		'nproc|n=i' => sub {
-			my ($arg, $val) = @_;
-			return unless eval { require FCGI::ProcManager; 1; };
-			my $proc_manager = FCGI::ProcManager->new({
-				n_processes => $val,
-			});
-			our $pre_listen_hook    = sub { $proc_manager->pm_manage()        };
-			our $pre_dispatch_hook  = sub { $proc_manager->pm_pre_dispatch()  };
-			our $post_dispatch_hook = sub { $proc_manager->pm_post_dispatch() };
-		},
-	);
+	my $nproc_sub = sub {
+		my ($arg, $val) = @_;
+		return unless eval { require FCGI::ProcManager; 1; };
+		$fcgi_nproc_active = 1;
+		my $proc_manager = FCGI::ProcManager->new({
+			n_processes => $val,
+		});
+		our $pre_listen_hook    = sub { $proc_manager->pm_manage()        };
+		our $pre_dispatch_hook  = sub { $proc_manager->pm_pre_dispatch()  };
+		our $post_dispatch_hook = sub { $proc_manager->pm_post_dispatch() };
+	};
+	if (@ARGV) {
+		require Getopt::Long;
+		Getopt::Long::GetOptions(
+			'fastcgi|fcgi|f' => \&configure_as_fcgi,
+			'nproc|n=i' => $nproc_sub,
+		);
+	};
+	if (!$fcgi_nproc_active && defined $ENV{'GITWEB_FCGI_NPROC'} && $ENV{'GITWEB_FCGI_NPROC'} =~ /^\d+$/) {
+		&$nproc_sub('nproc', $ENV{'GITWEB_FCGI_NPROC'});
+	}
 }
 
 # Any "our" variable that could possibly influence correct handling of
@@ -1392,9 +1415,17 @@ sub _reset_globals {
 }
 
 sub run {
-	evaluate_argv();
-
+	evaluate_gitweb_config();
+	evaluate_git_version();
+	my ($ml, $mi, $bu, $hl, $subroutine) = ($my_url, $my_uri, $base_url, $home_link, '');
+	$subroutine .= '$my_url = $ml;' if defined $my_url && $my_url ne '';
+	$subroutine .= '$my_uri = $mi;' if defined $my_uri; # this one can be ""
+	$subroutine .= '$base_url = $bu;' if defined $base_url && $base_url ne '';
+	$subroutine .= '$home_link = $hl;' if defined $home_link && $home_link ne '';
+	$evaluate_uri_force = eval "sub {$subroutine}" if $subroutine;
 	$first_request = 1;
+	evaluate_argv();
+
 	$pre_listen_hook->()
 		if $pre_listen_hook;
 
---
