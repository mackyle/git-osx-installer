Subject: [PATCH] gitweb: support automatic readme generation

If enabled by setting $git_automatic_readme_html to an executable
that takes a .git directory as its argument, then if README.html
insertion is enabled and README.html does not exist or is zero
length, then the output of the $git_automatic_readme_html utility
will be inserted instead if it is non-empty.

It's still possible to prevent display of any readme by creating
a README.html file that consists of only XML <!-- comments -->.

Signed-off-by: Kyle J. McKay <mackyle@gmail.com>
---
 gitweb/gitweb.perl       |  60 +++++++++++++++--
 gitweb/static/gitweb.css | 165 +++++++++++++++++++++++++++++++++++++++++++++--
 2 files changed, 214 insertions(+), 11 deletions(-)

diff --git a/gitweb/gitweb.perl b/gitweb/gitweb.perl
index e66bcf0f..4a20ef8c 100755
--- a/gitweb/gitweb.perl
+++ b/gitweb/gitweb.perl
@@ -200,6 +200,13 @@ our $fallback_encoding = 'latin1';
 # - one might want to include '-B' option, e.g. '-B', '-M'
 our @diff_opts = ('-M'); # taken from git_commit
 
+# utility to automatically produce a default README.html if README.html is
+# enabled and it does not exist or is 0 bytes in length.  If this is set to an
+# executable utility that takes an absolute path to a .git directory as its
+# first argument and outputs an HTML fragment to use for README.html, then
+# it will be called when README.html is enabled but empty or missing.
+our $git_automatic_readme_html = undef;
+
 # Disables features that would allow repository owners to inject script into
 # the gitweb domain.
 our $prevent_xss = 0;
@@ -4245,6 +4252,33 @@ sub insert_file {
 	close $fd;
 }
 
+# return undef on failure
+sub collect_output {
+	defined(my $fd = cmd_pipe @_) or return undef;
+	if (eof $fd) {
+		close $fd;
+		return undef;
+	}
+	my $result = join('', map({ to_utf8($_) } <$fd>));
+	close $fd or return undef;
+	return $result;
+}
+
+# return undef on failure
+# return '' if only comments
+sub collect_html_file {
+	my $filename = shift;
+
+	open my $fd, '<', $filename or return undef;
+	my $result = join('', map({ to_utf8($_) } <$fd>));
+	close $fd or return undef;
+	return undef unless defined($result);
+	my $test = $result;
+	$test =~ s/<!--(?:[^-]|(?:-(?!-)))*-->//gs;
+	$test =~ s/\s+//s;
+	return $test eq '' ? '' : $result;
+}
+
 ## ......................................................................
 ## mimetype related functions
 
@@ -7414,11 +7448,27 @@ sub git_summary {
 
 	# If XSS prevention is on, we don't include README.html.
 	# TODO: Allow a readme in some safe format.
-	if (!$prevent_xss && -s "$projectroot/$project/README.html") {
-		print "<div class=\"title\">readme</div>\n" .
-		      "<div class=\"readme\">\n";
-		insert_file("$projectroot/$project/README.html");
-		print "\n</div>\n"; # class="readme"
+	if (!$prevent_xss) {
+		my $readme_name = "readme";
+		my $readme;
+		if (-s "$projectroot/$project/README.html") {
+			$readme = collect_html_file("$projectroot/$project/README.html");
+		} else {
+			$readme = collect_output($git_automatic_readme_html, "$projectroot/$project");
+			if ($readme && $readme =~ /^<!-- README NAME: ((?:[^-]|(?:-(?!-)))+) -->/) {
+				$readme_name = $1;
+				$readme =~ s/^<!--(?:[^-]|(?:-(?!-)))*-->\n?//;
+			}
+		}
+		if (defined($readme)) {
+			$readme =~ s/^\s+//s;
+			$readme =~ s/\s+$//s;
+			print "<div class=\"title\">$readme_name</div>\n",
+			      "<div class=\"readme\">\n",
+			      $readme,
+			      "\n</div>\n"
+			if $readme ne '';
+		}
 	}
 
 	# we need to request one more than 16 (0..15) to check if
diff --git a/gitweb/static/gitweb.css b/gitweb/static/gitweb.css
index 652127e7..0f2e044b 100644
--- a/gitweb/static/gitweb.css
+++ b/gitweb/static/gitweb.css
@@ -8,11 +8,15 @@ body {
 	color: #000000;
 }
 
-a {
+a, a:hover, a:visited, a:active {
+	color: #000000;
+}
+
+a[href] {
 	color: #0000cc;
 }
 
-a:hover, a:visited, a:active {
+a[href]:hover, a[href]:visited, a[href]:active {
 	color: #880000;
 }
 
@@ -37,6 +41,10 @@ img.blob {
 	max-width: 100%;
 }
 
+div.header, div.title {
+	clear: both;
+}
+
 a.list img.avatar {
 	border-style: none;
 }
@@ -131,14 +139,159 @@ span.title {
 	display: block;
 }
 
-div.readme {
-	padding: 8px;
-}
-
 span.title:hover {
 	background-color: #d9d8d1;
 }
 
+div.readme {
+	padding: 8px;
+}
+
+div.readme h1 {
+	font-size: 150%;
+}
+
+div.readme h2 {
+	font-size: 125%;
+}
+
+div.readme h3 {
+	font-size: 110%;
+}
+
+div.readme h4 {
+	font-size: 100%;
+}
+
+div.readme pre {
+	margin: 0 3ex;
+	padding: 1ex;
+	background-color: #eee;
+	overflow: auto;
+}
+
+div.readme pre.plaintext {
+	margin: 0;
+	padding: 0;
+	background-color: inherit;
+}
+
+ol._markdown-ol {
+	counter-reset: _markdown-item;
+}
+ol._markdown-ol[start="0"] {
+	counter-reset: _markdown-item -1;
+}
+ol._markdown-ol[start="5"] {
+	counter-reset: _markdown-item 4;
+}
+ol._markdown-ol[start="10"] {
+	counter-reset: _markdown-item 9;
+}
+ol._markdown-ol > span._markdown-ol-incr {
+	counter-increment: _markdown-item;
+}
+ol._markdown-ol > span._markdown-ol-incr-2 {
+	counter-increment: _markdown-item 2;
+}
+ol._markdown-ol > span._markdown-ol-incr-5 {
+	counter-increment: _markdown-item 5;
+}
+ol._markdown-ol > span._markdown-ol-incr-10 {
+	counter-increment: _markdown-item 10;
+}
+ol._markdown-lc-greek, li._markdown-lc-greek {
+	list-style-type: lower-greek;
+}
+ol._markdown-ol > li {
+	counter-increment: _markdown-item;
+}
+ol._markdown-ol > li._markdown-li,
+ol._markdown-ol > li._markdown-li-lc,
+ol._markdown-ol > li._markdown-li-lc-greek,
+ol._markdown-ol > li._markdown-li-uc {
+	list-style-type: none;
+	display: block;
+}
+ol._markdown-ol > li._markdown-li:before,
+ol._markdown-ol > li._markdown-li-lc:before,
+ol._markdown-ol > li._markdown-li-lc-greek:before,
+ol._markdown-ol > li._markdown-li-uc:before {
+	position: absolute;
+	text-align: right;
+	white-space: nowrap;
+	margin-left: -9ex;
+	width: 9ex;
+}
+ol._markdown-ol > li._markdown-li[type="1"]:before {
+	content: counter(_markdown-item, decimal) ")\A0 \A0 ";
+}
+ol._markdown-ol > li._markdown-li-lc[type="i"]:before,
+ol._markdown-ol > li._markdown-li-lc[type="I"]:before {
+	content: counter(_markdown-item, lower-roman) ")\A0 \A0 ";
+}
+ol._markdown-ol > li._markdown-li-uc[type="I"]:before,
+ol._markdown-ol > li._markdown-li-uc[type="i"]:before {
+	content: counter(_markdown-item, upper-roman) ")\A0 \A0 ";
+}
+ol._markdown-ol > li._markdown-li-lc[type="a"]:before,
+ol._markdown-ol > li._markdown-li-lc[type="A"]:before {
+	content: counter(_markdown-item, lower-alpha) ")\A0 \A0 ";
+}
+ol._markdown-ol > li._markdown-li-lc-greek[type="a"]:before,
+ol._markdown-ol > li._markdown-li-lc-greek[type="A"]:before {
+	content: counter(_markdown-item, lower-greek) ")\A0 \A0 ";
+}
+ol._markdown-ol > li._markdown-li-uc[type="A"]:before,
+ol._markdown-ol > li._markdown-li-uc[type="a"]:before {
+	content: counter(_markdown-item, upper-alpha) ")\A0 \A0 ";
+}
+
+li._markdown-checkbox-on,
+li._markdown-checkbox-off {
+	list-style-type: none;
+	display: block;
+}
+li._markdown-checkbox-on > span:first-child + span + span,
+li._markdown-checkbox-off > span:first-child + span + span {
+	position: absolute;
+	clip: rect(0,0,0,0);
+}
+li._markdown-checkbox-on > span:first-child,
+li._markdown-checkbox-off > span:first-child,
+li._markdown-checkbox-on > span:first-child + span,
+li._markdown-checkbox-off > span:first-child + span {
+	display: block;
+	position: absolute;
+	margin-left: -3ex;
+	width: 1em;
+	height: 1em;
+}
+li._markdown-checkbox-on > span:first-child > span:first-child,
+li._markdown-checkbox-off > span:first-child > span:first-child {
+	display: block;
+	position: absolute;
+	left: 0.75pt; top: 0.75pt; right: 0.75pt; bottom: 0.75pt;
+}
+li._markdown-checkbox-on > span:first-child > span:first-child:before,
+li._markdown-checkbox-off > span:first-child > span:first-child:before {
+	display: inline-block;
+	position: relative;
+	right: 1pt;
+	width: 100%;
+	height: 100%;
+	border: 1pt solid;
+	content: "";
+}
+li._markdown-checkbox-on > span:first-child + span:before {
+	position: relative;
+	left: 2pt;
+	bottom: 1pt;
+	font-size: 125%;
+	line-height: 80%;
+	content: "\2713";
+}
+
 div.title_text {
 	padding: 6px 0px;
 	border: solid #d9d8d1;
---
