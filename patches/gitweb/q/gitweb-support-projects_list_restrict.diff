Subject: [PATCH] gitweb: support $projects_list_restrict

When git instaweb is started in a bare repository, it must still
set the $projects_list directory to the parent directory of the
bare project because gitweb cannot show the base $projects_list
directory as a repository even if it is one.

Unfortunately, if that parent directory contains a large number
of other bare (or non-bare) git repositories as subdirectories
then all of those will end up being scanned possibly resulting
in an enormous delay before showing the home gitweb page.

If $projects_list_restrict is set, the possible matches inside
the parent directory can be restricted to just the subdirectory
matching the bare repository in which git instaweb was originally
run.

This is much less surprising to the user than seeing all these
other repositories or taking an excessive amount of time to
display just the one repository.

Adding support for $projects_list_restrict is only the first
step.  git-instaweb must also be enhanced to set
$projects_list_restrict when being run in a bare repository
in order to get the desired effect.

Signed-off-by: Kyle J. McKay <mackyle@gmail.com>
---
 gitweb/gitweb.perl | 25 +++++++++++++++++++++++--
 1 file changed, 23 insertions(+), 2 deletions(-)

diff --git a/gitweb/gitweb.perl b/gitweb/gitweb.perl
index 1ee4d6bf..14a4af8a 100755
--- a/gitweb/gitweb.perl
+++ b/gitweb/gitweb.perl
@@ -130,6 +130,14 @@ our $logo_label = "git homepage";
 # source of projects list
 our $projects_list = "++GITWEB_LIST++";
 
+# restrict $project_list subdirs when $project_list is set to a directory
+# If set to a string that is the name of a single subdirectory located
+# under the $project_list and only git dirs found in it and its subdirs
+# will be shown in the project list.
+# If set to a regular expression, only when the full pathname to the git dir
+# matches the regular expression will the project be included in the list.
+our $projects_list_restrict = undef;
+
 # the width (in characters) of the projects list "Description" column
 our $projects_list_description_width = 25;
 
@@ -3415,12 +3423,21 @@ sub git_get_projects_list {
 		$dir =~ s!/+$!!;
 		my $pfxlen = length("$dir");
 		my $pfxdepth = ($dir =~ tr!/!!);
+		my $restrict;
+		if (defined($projects_list_restrict)) {
+			if (ref($projects_list_restrict) eq "Regexp") {
+				$restrict = $projects_list_restrict;
+			} else {
+				my $subdir = $projects_list_restrict;
+				$subdir =~ s!/+$!!;
+				$restrict = qr!^\Q$dir/$subdir\E(?:/|$)!;
+			}
+		}
 		# when filtering, search only given subdirectory
 		if ($filter && !$paranoid) {
 			$dir .= "/$filter";
 			$dir =~ s!/+$!!;
 		}
-
 		File::Find::find({
 			follow_fast => 1, # follow symbolic links
 			follow_skip => 2, # ignore duplicates
@@ -3470,6 +3487,10 @@ sub git_get_projects_list {
 				}
 				# only directories can be git repositories
 				return unless (-d $_);
+				if (defined($restrict) && $File::Find::name !~ /$restrict/) {
+					$File::Find::prune = 1;
+					return;
+				}
 				# don't traverse too deep (Find is super slow on os x)
 				# $project_maxdepth excludes depth of $projectroot
 				if (($File::Find::name =~ tr!/!!) - $pfxdepth > $project_maxdepth) {
@@ -3485,7 +3506,7 @@ sub git_get_projects_list {
 				# we check related file in $projectroot
 				if (check_export_ok("$projectroot/$path")) {
 					push @list, { path => $path };
-					$File::Find::prune = 1;
+					$File::Find::prune = 1 unless defined($restrict) && ($File::Find::name =~ tr!/!!) - $pfxdepth <= 1;
 				}
 			},
 		}, "$dir");
---
