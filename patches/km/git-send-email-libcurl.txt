Subject: [PATCH] git-send-email: use libcurl for implementation

Use libcurl's API to send SMTP messages rather than
various Perl modules that may be unavailable.

Using libcurl to send SMTP messages from Perl is
challenging.  No released version of WWW::Curl
properly supports the CURLOPT_MAIL_RCPT option.

Furthermore, although it's trivial to patch WWW::Curl
to properly handle CURLOPT_MAIL_RCPT, the resulting
module builds a shared object that is tied to a
particular version of Perl such that a module built
for Perl 5.8 will NOT load into Perl 5.10.  This is
rather undesirable.

Instead, since we only use a small subset of the
extensive libcurl API to send SMTP messages, we build
our own helper as git-send-email--libcurl that allows
Perl to talk to libcurl.  This helper is not sensitive
to the version of Perl and works with any version of
Perl provided the libcurl shared library is available.

However, the interface to the helper is not very
friendly as everything has to be marshalled and then
unmarshalled for each call (even though the protocol
is very simple).  So we use a git-send-email--libcurl.pl
helper that exports a WWW::Curl::Libcurl interface that
behaves very similarly to WWW::Curl::Easy which
makes use of the libcurl helper very simple.

This version of git-send-email supports everything
the old version did and probably some additional
authentication mechanisms as well.

Furthermore, in an effort to avoid exposing information
about the sending system that could render it more
vulnerable to hackers, this version of git-send-email
omits the X-Mailer header and hashes the Message-Id
value to render it opaque.

Signed-off-by: Kyle J. McKay <mackyle@gmail.com>

---
 git-send-email--libcurl.pl | 385 +++++++++++++++++++++++++++
 git-send-email.perl        | 162 ++++++------
 send-email--libcurl.c      | 633 +++++++++++++++++++++++++++++++++++++++++++++
 t/t9001-send-email.sh      |  20 +-
 4 files changed, 1106 insertions(+), 94 deletions(-)
 create mode 100644 git-send-email--libcurl.pl
 create mode 100644 send-email--libcurl.c

diff --git a/git-send-email--libcurl.pl b/git-send-email--libcurl.pl
new file mode 100644
index 00000000..86dded08
--- /dev/null
+++ b/git-send-email--libcurl.pl
@@ -0,0 +1,385 @@
+=comment
+
+send-email--libcurl.pl -- libcURL helper for git-send-email.perl
+Copyright (C) 2014,2015 Kyle J. McKay.  All rights reserved.
+
+This program is free software; you can redistribute it and/or
+modify it under the terms of the GNU General Public License
+as published by the Free Software Foundation; either version 2
+of the License, or (at your option) any later version.
+
+This program is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with this program; if not, write to the Free Software
+Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
+
+=cut
+
+package WWW::Curl::Libcurl;
+
+use File::Basename;
+use Cwd 'realpath';
+use IPC::Open2;
+use Exporter 'import';
+use vars qw($VERSION @EXPORT);
+BEGIN {*VERSION = \1.0}
+@EXPORT = qw(
+	CURLE_OK
+	CURLE_UNSUPPORTED_PROTOCOL
+	CURLE_URL_MALFORMAT
+	CURLE_COULDNT_RESOLVE_HOST
+	CURLE_COULDNT_CONNECT
+	CURLE_HTTP_RETURNED_ERROR
+	CURLE_UPLOAD_FAILED
+	CURLE_OUT_OF_MEMORY
+	CURLE_OPERATION_TIMEDOUT
+	CURLE_UNKNOWN_OPTION
+	CURLE_GOT_NOTHING
+	CURLE_LOGIN_DENIED
+	CURLE_AGAIN
+	CURLE_SSL_PINNEDPUBKEYNOTMATCH
+);
+
+sub CURLE_OK()				{ 0}
+sub CURLE_UNSUPPORTED_PROTOCOL()	{ 1}
+sub CURLE_URL_MALFORMAT()		{ 3}
+sub CURLE_COULDNT_RESOLVE_HOST()	{ 6}
+sub CURLE_COULDNT_CONNECT()		{ 7}
+sub CURLE_HTTP_RETURNED_ERROR()		{22}
+sub CURLE_UPLOAD_FAILED()		{25}
+sub CURLE_OUT_OF_MEMORY()		{27}
+sub CURLE_OPERATION_TIMEDOUT()		{28}
+sub CURLE_UNKNOWN_OPTION()		{48}
+sub CURLE_GOT_NOTHING()			{52}
+sub CURLE_LOGIN_DENIED()		{67}
+sub CURLE_AGAIN()			{81}
+sub CURLE_SSL_PINNEDPUBKEYNOTMATCH()	{90}
+
+our $helper = realpath(dirname(realpath(__FILE__)).'/git-send-email--libcurl');
+die "Missing $helper\n" unless -x $helper;
+
+sub spawn {
+	my ($pid, $chldout, $chldin);
+	$pid = open2($chldout, $chldin, $helper, "--spawn");
+	die "Cannot spawn $helper\n" unless $pid;
+	my $self = {};
+	$self->{'pid'} = $pid;
+	$self->{'chldin'} = $chldin;
+	$self->{'chldout'} = $chldout;
+	return bless $self;
+}
+
+sub DESTROY {
+	my $self = shift;
+	close($self->{'chldin'});
+	waitpid($self->{'pid'}, 0);
+	close($self->{'chldout'});
+}
+
+sub _get_val {
+	use bytes;
+	my $self = shift;
+	my $tag = shift;
+	my $val = shift;
+	die "Invalid tag: '$tag'\n" unless length($tag) == 4;
+	printf {$self->{'chldin'}} "%s", $tag.pack('N',$val);
+	my $data;
+	my $result = read($self->{'chldout'}, $data, 4);
+	die "Read result '$tag' from helper failed\n" unless $result && $result == 4;
+	return unpack('N', $data);
+}
+
+sub _get_string {
+	use bytes;
+	my $self = shift;
+	my $tag = shift;
+	my $val = shift;
+	my $strlen = $self->_get_val($tag, $val);
+	return "" unless $strlen;
+	my $data;
+	my $result = read($self->{'chldout'}, $data, $strlen);
+	die "Read result '$tag' from helper failed\n" unless $result && $result == $strlen;
+	return $data;
+}
+
+sub _set_string {
+	use bytes;
+	my $self = shift;
+	my $tag = shift;
+	my $str = shift;
+	die "Invalid tag: '$tag'\n" unless length($tag) == 4;
+	printf {$self->{'chldin'}} "%s", $tag.pack('N',length($str)).$str;
+	my $data;
+	my $result = read($self->{'chldout'}, $data, 4);
+	die "Read result '$tag' from helper failed\n" unless $result && $result == 4;
+	return unpack('N', $data);
+}
+
+sub version {
+	my $self = shift;
+	my $ans = $self->_get_val('vers', 0);
+	return (($ans >> 16) & 0xff) . '.' . (($ans >> 8) & 0xff) . '.' . ($ans & 0xff);
+}
+
+sub strerror {
+	my $self = shift;
+	my $code = shift;
+	return $self->_get_string('stre', $code);
+}
+
+sub perform {
+	my $self = shift;
+	return $self->_get_val('prfm', 0);
+}
+
+sub reset {
+	my $self = shift;
+	return $self->_get_val('rset', 0);
+}
+
+sub errbuf {
+	my $self = shift;
+	return $self->_get_string('errb', 0);
+}
+
+sub lastheader {
+	my $self = shift;
+	return $self->_get_string('lsth', 0);
+}
+
+# Note that any gzip/deflate content encoding will be automatically decoded
+sub body {
+	my $self = shift;
+	return $self->_get_string('wdta', 0);
+}
+
+# These are the headers returned from the server returned as an array of
+# header lines (any \s+$ removed) as sent to cURL's CURLOPT_HEADERFUNCTION
+# note the first "header" may actually be an HTTP respose such as:
+#    HTTP/1.1 200 OK
+sub headers {
+	my $self = shift;
+	my $hdrblob = $self->_get_string('hdta', 0);
+	my @ans = ();
+	foreach my $hdr (split(/\x00+/, $hdrblob)) {
+		$hdr =~ s/\s+$//os;
+		push(@ans, $hdr) if $hdr ne '';
+	}
+	return @ans;
+}
+
+sub getinfo_response_code {
+	my $self = shift;
+	return $self->_get_val('rspc', 0);
+}
+
+sub getinfo_redirect_url {
+	my $self = shift;
+	return $self->_get_string('rurl', 0);
+}
+
+sub getinfo_content_type {
+	my $self = shift;
+	return $self->_get_string('ctyp', 0);
+}
+
+sub setopt_ssl_verifyhost {
+	my $self = shift;
+	my $bool = shift;
+	return $self->_get_val('vhst', $bool ? 1 : 0);
+}
+
+sub setopt_ssl_verifypeer {
+	my $self = shift;
+	my $bool = shift;
+	return $self->_get_val('vper', $bool ? 1 : 0);
+}
+
+sub setopt_verbose {
+	my $self = shift;
+	my $bool = shift;
+	return $self->_get_val('verb', $bool ? 1 : 0);
+}
+
+sub setopt_noprogress {
+	my $self = shift;
+	my $bool = shift;
+	return $self->_get_val('nopg', $bool ? 1 : 0);
+}
+
+sub setopt_port {
+	my $self = shift;
+	my $val = shift;
+	return $self->_set_val('port', $val);
+}
+
+sub setopt_timeout {
+	my $self = shift;
+	my $val = shift;
+	return $self->_set_val('tmot', $val);
+}
+
+sub setopt_httpget {
+	my $self = shift;
+	my $bool = shift;
+	return $self->_get_val('hget', $bool ? 1 : 0);
+}
+
+sub setopt_nobody {
+	my $self = shift;
+	my $bool = shift;
+	return $self->_get_val('nbdy', $bool ? 1 : 0);
+}
+
+sub setopt_post {
+	my $self = shift;
+	my $bool = shift;
+	return $self->_get_val('post', $bool ? 1 : 0);
+}
+
+sub setopt_upload {
+	my $self = shift;
+	my $bool = shift;
+	return $self->_get_val('upld', $bool ? 1 : 0);
+}
+
+# For non smtps connections whether to use STARTTLS
+# 0 = never, 1 = required, -1 = try if offered
+sub setopt_use_ssl {
+	my $self = shift;
+	my $val = shift;
+	return $self->_get_val('ussl', $val);
+}
+
+# Whether to use a ~/.netrc file or not
+# 0 = never, 1 = required, -1 = optional fallback
+sub setopt_netrc {
+	my $self = shift;
+	my $val = shift;
+	return $self->_get_val('ntrc', $val);
+}
+
+sub setopt_useragent {
+	my $self = shift;
+	my $val = shift;
+	return $self->_set_string('agnt', $val);
+}
+
+sub setopt_proxy {
+	my $self = shift;
+	my $val = shift;
+	return $self->_set_string('prxy', $val);
+}
+
+sub setopt_cainfo {
+	my $self = shift;
+	my $val = shift;
+	return $self->_set_string('cain', $val);
+}
+
+sub setopt_capath {
+	my $self = shift;
+	my $val = shift;
+	return $self->_set_string('capa', $val);
+}
+
+sub setopt_sslcert {
+	my $self = shift;
+	my $val = shift;
+	return $self->_set_string('cert', $val);
+}
+
+sub setopt_sslkey {
+	my $self = shift;
+	my $val = shift;
+	return $self->_set_string('key_', $val);
+}
+
+sub setopt_mail_auth {
+	my $self = shift;
+	my $val = shift;
+	return $self->_set_string('auth', $val);
+}
+
+sub setopt_mail_from {
+	my $self = shift;
+	my $val = shift;
+	return $self->_set_string('from', $val);
+}
+
+sub setopt_username {
+	my $self = shift;
+	my $val = shift;
+	return $self->_set_string('user', $val);
+}
+
+sub setopt_password {
+	my $self = shift;
+	my $val = shift;
+	return $self->_set_string('pswd', $val);
+}
+
+# Arg must be one or more AUTH=<value> separated by ';'
+# The default is "AUTH=*" (for any available) which is the same as
+# "AUTH=LOGIN;AUTH=PLAIN;AUTH=CRAM-MD5;AUTH=DIGEST-MD5;AUTH=GSSAPI" .
+#                                       ";AUTH=EXTERNAL;AUTH=NTLM;AUTH=XOAUTH2"
+# A badly formated options string will cause CURLE_URL_MALFORMAT (3).
+sub setopt_login_options {
+	my $self = shift;
+	my $val = shift;
+	return $self->_set_string('mech', $val);
+}
+
+sub setopt_readdata {
+	my $self = shift;
+	my $val = shift;
+	return $self->_set_string('data', $val);
+}
+
+# May be set to the empty string to activate cookies without external files
+# If set to a non-empty string then both COOKIEFILE and COOKIEJAR will be set
+sub setopt_cookiefile {
+	my $self = shift;
+	my $val = shift;
+	return $self->_set_string('cook', $val);
+}
+
+# ignores anything other than 'ALL', 'SESS', 'FLUSH', or 'RELOAD' in
+# a case-insensitive way
+sub setopt_cookielist {
+	my $self = shift;
+	my $cmd = shift;
+	if (defined($cmd)) {
+		$cmd = uc($cmd);
+		if ($cmd eq "ALL" || $cmd eq "SESS" || $cmd eq "FLUSH" || $cmd eq "RELOAD") {
+			return $self->_set_string('ckls', $cmd);
+		}
+	}
+	return 0;
+}
+
+sub setopt_url {
+	my $self = shift;
+	my $val = shift;
+	return $self->_set_string('url_', $val);
+}
+
+sub setopt_mail_rcpt {
+	use bytes;
+	my $self = shift;
+	my $strings = join('', map($_.pack('C',0), @_));
+	return $self->_set_string('rcpt', $strings);
+}
+
+sub setopt_httpheader {
+	use bytes;
+	my $self = shift;
+	my $strings = join('', map($_.pack('C',0), @_));
+	return $self->_set_string('hdrs', $strings);
+}
+
+1;
diff --git a/git-send-email.perl b/git-send-email.perl
index e1e9b146..e6b4829b 100755
--- a/git-send-email.perl
+++ b/git-send-email.perl
@@ -26,8 +26,15 @@ use Data::Dumper;
 use Term::ANSIColor;
 use File::Temp qw/ tempdir tempfile /;
 use File::Spec::Functions qw(catfile);
+use Digest::MD5 qw(md5_hex);
 use Error qw(:try);
 use Git;
+use File::Basename;
+use Cwd 'realpath';
+BEGIN {
+require(realpath(dirname(realpath(__FILE__))).'/git-send-email--libcurl.pl');
+WWW::Curl::Libcurl->import;
+}
 
 Getopt::Long::Configure qw/ pass_through /;
 
@@ -54,7 +61,7 @@ git send-email [options] <file | directory | rev-list options >
     --[no-]bcc              <str>  * Email Bcc:
     --subject               <str>  * Email "Subject:"
     --in-reply-to           <str>  * Email "In-Reply-To:"
-    --[no-]xmailer                 * Add "X-Mailer:" header (default).
+    --[no-]xmailer                 * Add "X-Mailer:" header (default is off).
     --[no-]annotate                * Review each patch that will be sent in an editor.
     --compose                      * Open an editor for introduction.
     --compose-encoding      <str>  * Encoding to assume for introduction.
@@ -228,7 +235,7 @@ my %config_bool_settings = (
     "validate" => [\$validate, 1],
     "multiedit" => [\$multiedit, undef],
     "annotate" => [\$annotate, undef],
-    "xmailer" => [\$use_xmailer, 1]
+    "xmailer" => [\$use_xmailer, 0]
 );
 
 my %config_settings = (
@@ -304,6 +311,7 @@ my $rc = GetOptions("h" => \$help,
 		    "smtp-server-option=s" => \@smtp_server_options,
 		    "smtp-server-port=s" => \$smtp_server_port,
 		    "smtp-user=s" => \$smtp_authuser,
+		    "no-smtp-user" => sub {delete $config_settings{'smtpuser'}},
 		    "smtp-pass:s" => \$smtp_authpass,
 		    "smtp-ssl" => sub { $smtp_encryption = 'ssl' },
 		    "smtp-encryption=s" => \$smtp_encryption,
@@ -925,8 +933,10 @@ sub make_message_id {
 		require Sys::Hostname;
 		$du_part = 'user@' . Sys::Hostname::hostname();
 	}
-	my $message_id_template = "<%s-git-send-email-%s>";
+	my $message_id_template = "%s-git-send-email-%s";
 	$message_id = sprintf($message_id_template, $uniq, $du_part);
+	@_ = split /@/, $message_id;
+	$message_id = '<'.substr(md5_hex($_[0]),0,31).'@'.substr(md5_hex($_[1]),1,31).'>';
 	#print "new message id = $message_id\n"; # Was useful for debugging
 }
 
@@ -1090,12 +1100,12 @@ sub smtp_host_string {
 	}
 }
 
-# Returns 1 if authentication succeeded or was not necessary
-# (smtp_user was not specified), and 0 otherwise.
+# Returns a filled hashref from Git::credential fill if authentication
+# has been requested, undef otherwise.
 
 sub smtp_auth_maybe {
 	if (!defined $smtp_authuser || $auth) {
-		return 1;
+		return $auth;
 	}
 
 	# Workaround AUTH PLAIN/LOGIN interaction defect
@@ -1108,47 +1118,36 @@ sub smtp_auth_maybe {
 	# TODO: Authentication may fail not because credentials were
 	# invalid but due to other reasons, in which we should not
 	# reject credentials.
-	$auth = Git::credential({
+	$auth = {
 		'protocol' => 'smtp',
 		'host' => smtp_host_string(),
 		'username' => $smtp_authuser,
 		# if there's no password, "git credential fill" will
 		# give us one, otherwise it'll just pass this one.
 		'password' => $smtp_authpass
-	}, sub {
-		my $cred = shift;
-		return !!$smtp->auth($cred->{'username'}, $cred->{'password'});
-	});
-
+	};
+	Git::credential($auth, 'fill');
 	return $auth;
 }
 
 sub ssl_verify_params {
-	eval {
-		require IO::Socket::SSL;
-		IO::Socket::SSL->import(qw/SSL_VERIFY_PEER SSL_VERIFY_NONE/);
-	};
-	if ($@) {
-		print STDERR "Not using SSL_VERIFY_PEER due to out-of-date IO::Socket::SSL.\n";
-		return;
-	}
-
-	if (!defined $smtp_ssl_cert_path) {
-		# use the OpenSSL defaults
-		return (SSL_verify_mode => SSL_VERIFY_PEER());
-	}
+	return unless defined $smtp_ssl_cert_path; # use defaults
 
 	if ($smtp_ssl_cert_path eq "") {
-		return (SSL_verify_mode => SSL_VERIFY_NONE());
+		$smtp->setopt_ssl_verifyhost(0);
+		$smtp->setopt_ssl_verifypeer(0);
 	} elsif (-d $smtp_ssl_cert_path) {
-		return (SSL_verify_mode => SSL_VERIFY_PEER(),
-			SSL_ca_path => $smtp_ssl_cert_path);
+		#$smtp->setopt_capath($smtp_ssl_cert_path);
+		die "SecureTransport does not support a CA directory, use a CA file instead.\n";
 	} elsif (-f $smtp_ssl_cert_path) {
-		return (SSL_verify_mode => SSL_VERIFY_PEER(),
-			SSL_ca_file => $smtp_ssl_cert_path);
+		# These are the default values
+		#$smtp->setopt_ssl_verifyhost(1);
+		#$smtp->setopt_ssl_verifypeer(1);
+		$smtp->setopt_cainfo($smtp_ssl_cert_path);
 	} else {
-		print STDERR "Not using SSL_VERIFY_PEER because the CA path does not exist.\n";
-		return (SSL_verify_mode => SSL_VERIFY_NONE());
+		print STDERR "Not using SSL_VERIFYPEER because the CA path does not exist.\n";
+		$smtp->setopt_ssl_verifyhost(0);
+		$smtp->setopt_ssl_verifypeer(0);
 	}
 }
 
@@ -1264,65 +1263,61 @@ Message-Id: $message_id
 			die "The required SMTP server is not properly defined."
 		}
 
+		if (!$smtp) {
+			$smtp = WWW::Curl::Libcurl->spawn;
+			if (!$smtp) {
+				die "Unable to initialize SMTP properly. Check config and use --smtp-debug. ",
+				    "VALUES: server=$smtp_server ",
+				    "encryption=$smtp_encryption ",
+				    "hello=$smtp_domain",
+				    defined $smtp_server_port ? " port=$smtp_server_port" : "";
+			}
+			if ($debug_net_smtp || $ENV{'GIT_CURL_VERBOSE'}) {
+				$smtp->setopt_verbose(1);
+			} else {
+				$smtp->setopt_noprogress(1);
+			}
+			$smtp->setopt_upload(1);
+		}
+		my $scheme;
 		if ($smtp_encryption eq 'ssl') {
 			$smtp_server_port ||= 465; # ssmtp
-			require Net::SMTP::SSL;
-			$smtp_domain ||= maildomain();
-			require IO::Socket::SSL;
-			# Net::SMTP::SSL->new() does not forward any SSL options
-			IO::Socket::SSL::set_client_defaults(
-				ssl_verify_params());
-			$smtp ||= Net::SMTP::SSL->new($smtp_server,
-						      Hello => $smtp_domain,
-						      Port => $smtp_server_port,
-						      Debug => $debug_net_smtp);
-		}
-		else {
-			require Net::SMTP;
-			$smtp_domain ||= maildomain();
+			$scheme = 'smtps';
+			ssl_verify_params();
+		} else {
 			$smtp_server_port ||= 25;
-			$smtp ||= Net::SMTP->new($smtp_server,
-						 Hello => $smtp_domain,
-						 Debug => $debug_net_smtp,
-						 Port => $smtp_server_port);
-			if ($smtp_encryption eq 'tls' && $smtp) {
-				require Net::SMTP::SSL;
-				$smtp->command('STARTTLS');
-				$smtp->response();
-				if ($smtp->code == 220) {
-					$smtp = Net::SMTP::SSL->start_SSL($smtp,
-									  ssl_verify_params())
-						or die "STARTTLS failed! ".IO::Socket::SSL::errstr();
-					$smtp_encryption = '';
-					# Send EHLO again to receive fresh
-					# supported commands
-					$smtp->hello($smtp_domain);
-				} else {
-					die "Server does not support STARTTLS! ".$smtp->message;
-				}
-			}
+			$scheme = 'smtp';
+			$smtp->setopt_use_ssl($smtp_encryption eq 'tls' ? 1 : -1);
 		}
-
-		if (!$smtp) {
-			die "Unable to initialize SMTP properly. Check config and use --smtp-debug. ",
-			    "VALUES: server=$smtp_server ",
-			    "encryption=$smtp_encryption ",
-			    "hello=$smtp_domain",
-			    defined $smtp_server_port ? " port=$smtp_server_port" : "";
+		$smtp_domain ||= maildomain();
+		$smtp->setopt_url("$scheme://$smtp_server:$smtp_server_port/$smtp_domain");
+		$smtp->setopt_mail_from($raw_from);
+		$smtp->setopt_mail_rcpt(@recipients);
+
+		smtp_auth_maybe;
+		if ($auth && !$auth->{'finished_auth'}) {
+			$smtp->setopt_username($auth->{'username'});
+			$smtp->setopt_password($auth->{'password'});
 		}
 
-		smtp_auth_maybe or die $smtp->message;
-
-		$smtp->mail( $raw_from ) or die $smtp->message;
-		$smtp->to( @recipients ) or die $smtp->message;
-		$smtp->data or die $smtp->message;
-		$smtp->datasend("$header\n$message") or die $smtp->message;
-		$smtp->dataend() or die $smtp->message;
-		$smtp->code =~ /250|200/ or die "Failed to send $subject\n".$smtp->message;
+		my $payload = join("\r\n", split(/\n/, "$header\n$message", -1));
+		$smtp->setopt_readdata($payload);
+		my $retcode = $smtp->perform;
+		if ($auth && !$auth->{'finished_auth'}) {
+			if ($retcode == CURLE_LOGIN_DENIED) {
+				Git::credential($auth, 'reject');
+			} elsif (!$retcode) {
+				Git::credential($auth, 'approve');
+			}
+			$auth->{'finished_auth'} = 1;
+		}
+		die "Failed to send $subject\nError ($retcode) ".$smtp->strerror($retcode).": ".$smtp->errbuf, "\n"
+			if $retcode;
 	}
 	if ($quiet) {
 		printf (($dry_run ? "Dry-" : "")."Sent %s\n", $subject);
 	} else {
+		print "\n";
 		print (($dry_run ? "Dry-" : "")."OK. Log says:\n");
 		if (!file_name_is_absolute($smtp_server)) {
 			print "Server: $smtp_server\n";
@@ -1335,8 +1330,7 @@ Message-Id: $message_id
 		}
 		print $header, "\n";
 		if ($smtp) {
-			print "Result: ", $smtp->code, ' ',
-				($smtp->message =~ /\n([^\n]+\n)$/s), "\n";
+			print "Result: ", $smtp->lastheader, "\n";
 		} else {
 			print "Result: OK\n";
 		}
@@ -1594,7 +1588,7 @@ sub cleanup_compose_files {
 	unlink($compose_filename, $compose_filename . ".final") if $compose;
 }
 
-$smtp->quit if $smtp;
+$smtp = undef;
 
 sub apply_transfer_encoding {
 	my $message = shift;
diff --git a/send-email--libcurl.c b/send-email--libcurl.c
new file mode 100644
index 00000000..eb49e4e9
--- /dev/null
+++ b/send-email--libcurl.c
@@ -0,0 +1,633 @@
+/*
+
+send-email--libcurl.c -- libcURL helper for git-send-email.perl
+Copyright (C) 2014,2015 Kyle J. McKay.  All rights reserved.
+
+This program is free software; you can redistribute it and/or
+modify it under the terms of the GNU General Public License
+as published by the Free Software Foundation; either version 2
+of the License, or (at your option) any later version.
+
+This program is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with this program; if not, write to the Free Software
+Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
+
+*/
+
+#include <stdint.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <arpa/inet.h>
+#include <curl/curl.h>
+
+typedef struct {
+	char tag[4];
+	uint32_t val;
+} cmd_t;
+
+static int process_cmds(FILE *in, FILE *out, CURL *curl);
+
+static void reset_curl(CURL *curl)
+{
+	curl_easy_reset(curl);
+	curl_easy_setopt(curl, CURLOPT_ACCEPT_ENCODING, "");
+}
+
+int main(int argc, char *const argv[])
+{
+	int result;
+	CURL *curl;
+	FILE *inbinary = freopen(NULL, "rb", stdin);;
+	FILE *outbinary = freopen(NULL, "ab", stdout);
+	if (!inbinary || !outbinary || argc != 2 || strcmp(argv[1], "--spawn"))
+		return 2;
+
+	curl = curl_easy_init();
+	if (!curl)
+		return 3;
+	reset_curl(curl);
+
+	result = process_cmds(inbinary, outbinary, curl);
+	curl_easy_cleanup(curl);
+	return result;
+}
+
+static int read_string(FILE *in, size_t len, char **out)
+{
+	char *string = (char *)malloc(len + 1);
+	if (!string)
+		return 10;
+	if (len && !fread(string, len, 1, in)) {
+		free(string);
+		return 11;
+	}
+	string[len] = '\0';
+	*out = string;
+	return 0;
+}
+
+static int handle_string_opt(CURL *curl, CURLoption o, size_t l, FILE *in, int *err)
+{
+	int result;
+	char *string;
+	*err = read_string(in, l, &string);
+	if (*err)
+		return 1000000 + *err;
+	result = curl_easy_setopt(curl, o, string);
+	free(string);
+	return result;
+}
+
+static int send_res(FILE *out, CURLcode res)
+{
+	uint32_t e = htonl((uint32_t)res);
+	if (fwrite(&e, sizeof(e), 1, out) != 1)
+		return 12;
+	fflush(out);
+	return 0;
+}
+
+static int send_string(FILE *out, const void *p, size_t l)
+{
+	int err = send_res(out, (CURLcode)l);
+	if (err)
+		return err;
+	if (l && fwrite(p, l, 1, out) != 1)
+		return 12;
+	fflush(out);
+	return 0;
+}
+
+typedef struct {
+	const char *data;
+	size_t len;
+	size_t offset;
+} context_t;
+
+static size_t readfunc(void *ptr, size_t size, size_t nmemb, void *_cxt)
+{
+	context_t *cxt = (context_t *)_cxt;
+	size_t max = size * nmemb;
+	if (max > cxt->len - cxt->offset)
+		max = cxt->len - cxt->offset;
+	if (max) {
+		memcpy(ptr, cxt->data + cxt->offset, max);
+		cxt->offset += max;
+	}
+	return max;
+}
+
+struct collect_s;
+static int append_collect(struct collect_s *clt, const void *p, size_t s);
+
+typedef struct {
+	char *line;
+	size_t space;
+	struct collect_s *clt;
+} hdrline_t;
+
+static size_t hdrfunc(char *ptr, size_t size, size_t nmemb, void *_cxt)
+{
+	hdrline_t *cxt = (hdrline_t *)_cxt;
+	size_t max = size * nmemb;
+	size_t len = max;
+	if (len >= cxt->space)
+		len = cxt->space - 1;
+	memcpy(cxt->line, ptr, len);
+	while (len && (ptr[len - 1] == '\r' || ptr[len - 1] == '\n'))
+		--len;
+	cxt->line[len] = '\0';
+	len = append_collect(cxt->clt, ptr, max);
+	if (!len || len != max || append_collect(cxt->clt, "", 1) != 1)
+		return 0;
+	return max;
+}
+
+static int progressfunc(void *p, double t, double n, double u, double x)
+{
+	(void)p;
+	(void)t;
+	(void)n;
+	(void)u;
+	(void)x;
+	return 0;
+}
+
+static int xferfunc(void *p, curl_off_t t, curl_off_t n, curl_off_t u, curl_off_t x)
+{
+	(void)p;
+	(void)t;
+	(void)n;
+	(void)u;
+	(void)x;
+	return 0;
+}
+
+#define BLOCK_SIZE 32736
+typedef struct block_s {
+	struct block_s *next;
+	size_t offset;
+	char data[BLOCK_SIZE];
+} block_t;
+
+typedef struct collect_s {
+	block_t *first, *last;
+	size_t total;
+} collect_t;
+
+static void free_collect(collect_t *clt)
+{
+	block_t *block = clt->first;
+	while (block) {
+		block_t *link = block->next;
+		free(block);
+		block = link;
+	}
+	clt->first = NULL;
+	clt->last = NULL;
+	clt->total = 0;
+}
+
+static int append_collect(collect_t *clt, const void *p, size_t s)
+{
+	size_t left;
+	const char *ptr;
+
+	if (!p || !s)
+		return 0;
+
+	ptr = (const char *)p;
+	left = s;
+	while (left) {
+		size_t cpyamt;
+		if (!clt->first) {
+			clt->first = (block_t *)malloc(sizeof(block_t));
+			if (!clt->first)
+				return 0;
+			clt->first->next = NULL;
+			clt->first->offset = 0;
+			clt->last = clt->first;
+		}
+		if (clt->last->offset >= BLOCK_SIZE) {
+			block_t *next = (block_t *)malloc(sizeof(block_t));
+			if (!next)
+				return 0;
+			next->next = NULL;
+			next->offset = 0;
+			clt->last->next = next;
+			clt->last = next;
+		}
+		cpyamt = BLOCK_SIZE - clt->last->offset;
+		if (cpyamt > left)
+			cpyamt = left;
+		memcpy(clt->last->data + clt->last->offset, ptr, cpyamt);
+		clt->last->offset += cpyamt;
+		clt->total += cpyamt;
+		ptr += cpyamt;
+		left -= cpyamt;
+	}
+
+	return s;
+}
+
+static size_t writefunc(char *ptr, size_t size, size_t nmemb, void *_clt)
+{
+	return append_collect((collect_t *)_clt, ptr, size * nmemb);
+}
+
+static int send_collect(FILE *out, const collect_t *clt)
+{
+	const block_t *block = clt->first;
+	int err = send_res(out, (CURLcode)clt->total);
+	if (err)
+		return err;
+	while (block) {
+		if (block->offset) {
+			if (fwrite(block->data, block->offset, 1, out) != 1)
+				return 12;
+		}
+		block = block->next;
+	}
+	fflush(out);
+	return 0;
+}
+
+enum {
+	CURLCMD_PERFORM = -1000,
+	CURLGET_ERRBUF,
+	CURLGET_LASTHDR,
+	CURLGET_STRERROR,
+	CURLCMD_RESET,
+	CURLGET_VERSION
+};
+
+typedef struct {
+	char tag[4];
+	int opt;
+} cmd_lookup_t;
+
+static cmd_lookup_t commands[] = {
+	{{'a','g','n','t'}, CURLOPT_USERAGENT},
+	{{'a','u','t','h'}, CURLOPT_MAIL_AUTH},
+	{{'c','a','i','n'}, CURLOPT_CAINFO},
+	{{'c','a','p','a'}, CURLOPT_CAPATH},
+	{{'c','e','r','t'}, CURLOPT_SSLCERT},
+	{{'c','k','l','s'}, CURLOPT_COOKIELIST},
+	{{'c','o','o','k'}, CURLOPT_COOKIEFILE},
+	{{'c','t','y','p'}, CURLINFO_CONTENT_TYPE},
+	{{'d','a','t','a'}, CURLOPT_READDATA},
+	{{'e','r','r','b'}, CURLGET_ERRBUF},
+	{{'f','r','o','m'}, CURLOPT_MAIL_FROM},
+	{{'h','d','r','s'}, CURLOPT_HTTPHEADER},
+	{{'h','d','t','a'}, CURLOPT_HEADERDATA},
+	{{'h','g','e','t'}, CURLOPT_HTTPGET},
+	{{'k','e','y','_'}, CURLOPT_SSLKEY},
+	{{'l','s','t','h'}, CURLGET_LASTHDR},
+	{{'m','e','c','h'}, CURLOPT_LOGIN_OPTIONS},
+	{{'n','b','d','y'}, CURLOPT_NOBODY},
+	{{'n','o','p','g'}, CURLOPT_NOPROGRESS},
+	{{'n','t','r','c'}, CURLOPT_NETRC},
+	{{'p','o','r','t'}, CURLOPT_PORT},
+	{{'p','o','s','t'}, CURLOPT_POST},
+	{{'p','r','f','m'}, CURLCMD_PERFORM},
+	{{'p','r','x','y'}, CURLOPT_PROXY},
+	{{'p','s','w','d'}, CURLOPT_PASSWORD},
+	{{'r','c','p','t'}, CURLOPT_MAIL_RCPT},
+	{{'r','s','e','t'}, CURLCMD_RESET},
+	{{'r','s','p','c'}, CURLINFO_RESPONSE_CODE},
+	{{'r','u','r','l'}, CURLINFO_REDIRECT_URL},
+	{{'s','t','r','e'}, CURLGET_STRERROR},
+	{{'t','m','o','t'}, CURLOPT_TIMEOUT},
+	{{'u','p','l','d'}, CURLOPT_UPLOAD},
+	{{'u','r','l','_'}, CURLOPT_URL},
+	{{'u','s','e','r'}, CURLOPT_USERNAME},
+	{{'u','s','s','l'}, CURLOPT_USE_SSL},
+	{{'v','e','r','b'}, CURLOPT_VERBOSE},
+	{{'v','e','r','s'}, CURLGET_VERSION},
+	{{'v','h','s','t'}, CURLOPT_SSL_VERIFYHOST},
+	{{'v','p','e','r'}, CURLOPT_SSL_VERIFYPEER},
+	{{'w','d','t','a'}, CURLOPT_WRITEDATA}
+};
+
+static int cmp_cmd(const void *_e1, const void *_e2)
+{
+	const cmd_lookup_t *e1 = (cmd_lookup_t *)_e1;
+	const cmd_lookup_t *e2 = (cmd_lookup_t *)_e2;
+	return memcmp(e1->tag, e2->tag, 4);
+}
+
+static int find_command(const char tag[4])
+{
+	cmd_lookup_t search;
+	const cmd_lookup_t *ans;
+
+	memcpy(search.tag, tag, 4);
+	ans  = (cmd_lookup_t *)
+		bsearch(&search, commands, sizeof(commands)/sizeof(commands[0]),
+			sizeof(commands[0]), cmp_cmd);
+	return ans ? ans->opt : -1;
+}
+
+static int process_cmds(FILE *in, FILE *out, CURL *curl)
+{
+	cmd_t cmd;
+	char errbuf[CURL_ERROR_SIZE+1];
+	char hdrbuf[1024];
+	char *data = NULL;
+	size_t datalen = 0;
+	struct curl_slist *recipients = NULL;
+	struct curl_slist *httpheaders = NULL;
+	collect_t hdata, wdata;
+
+	memset(&hdata, 0, sizeof(hdata));
+	memset(&wdata, 0, sizeof(wdata));
+	errbuf[0] = '\0';
+	hdrbuf[0] = '\0';
+	while (!ferror(in) && !ferror(out) && fread(&cmd, sizeof(cmd), 1, in)) {
+		char *string;
+		int err = 0;
+		CURLcode res = 0;
+		int opt = find_command(cmd.tag);
+		const char *stringval = NULL;
+
+		cmd.val = ntohl(cmd.val);
+		switch (opt) {
+
+		case CURLOPT_NOPROGRESS:
+		case CURLOPT_SSL_VERIFYPEER:
+		case CURLOPT_HTTPGET:
+		case CURLOPT_NOBODY:
+		case CURLOPT_POST:
+		case CURLOPT_UPLOAD:
+		case CURLOPT_VERBOSE:
+			res = curl_easy_setopt(curl, (CURLoption)opt,
+						cmd.val ? 1L : 0L);
+			break;
+
+		case CURLOPT_CAINFO:
+		case CURLOPT_CAPATH:
+		case CURLOPT_LOGIN_OPTIONS:
+		case CURLOPT_MAIL_AUTH:
+		case CURLOPT_MAIL_FROM:
+		case CURLOPT_PASSWORD:
+		case CURLOPT_URL:
+		case CURLOPT_USERNAME:
+		case CURLOPT_PROXY:
+		case CURLOPT_COOKIELIST:
+		case CURLOPT_USERAGENT:
+		case CURLOPT_SSLCERT:
+		case CURLOPT_SSLKEY:
+			res = handle_string_opt(curl, (CURLoption)opt,
+						cmd.val, in, &err);
+			break;
+
+		case CURLOPT_PORT:
+		case CURLOPT_TIMEOUT:
+			res = curl_easy_setopt(curl, (CURLoption)opt, (long)cmd.val);
+			break;
+
+		case CURLOPT_SSL_VERIFYHOST:
+			res = curl_easy_setopt(curl, CURLOPT_SSL_VERIFYHOST,
+						cmd.val ? 2L : 0L);
+			break;
+
+		case CURLOPT_USE_SSL:
+			res = curl_easy_setopt(curl, CURLOPT_USE_SSL, (long)(
+				(cmd.val & 0x80000000) ? CURLUSESSL_TRY :
+					(cmd.val ? CURLUSESSL_ALL : CURLUSESSL_NONE)));
+			break;
+
+		case CURLOPT_NETRC:
+			res = curl_easy_setopt(curl, CURLOPT_NETRC, (long)(
+				(cmd.val & 0x80000000) ? CURL_NETRC_OPTIONAL :
+					(cmd.val ? CURL_NETRC_REQUIRED : CURL_NETRC_IGNORED)));
+			break;
+
+		case CURLOPT_READDATA:
+			if (data)
+				free(data);
+			err = read_string(in, cmd.val, &data);
+			if (err)
+				break;
+			datalen = cmd.val;
+			break;
+
+		case CURLOPT_COOKIEFILE:
+		{
+			char *string;
+			err = read_string(in, cmd.val, &string);
+			if (err)
+				break;
+			res = curl_easy_setopt(curl, CURLOPT_COOKIEFILE, string);
+			if (!res && *string)
+				res = curl_easy_setopt(curl, CURLOPT_COOKIEJAR, string);
+			free(string);
+			break;
+		}
+
+		case CURLGET_VERSION:
+		{
+			curl_version_info_data *data = curl_version_info(CURLVERSION_NOW);
+			res = data->version_num;
+			break;
+		}
+
+		case CURLGET_ERRBUF:
+			stringval = errbuf;
+			break;
+
+		case CURLGET_LASTHDR:
+			stringval = hdrbuf;
+			break;
+
+		case CURLGET_STRERROR:
+			stringval = curl_easy_strerror((CURLcode) cmd.val);
+			break;
+
+		case CURLOPT_HEADERDATA:
+			err = send_collect(out, &hdata);
+			if (!err)
+				continue;
+			break;
+
+		case CURLOPT_WRITEDATA:
+			err = send_collect(out, &wdata);
+			if (!err)
+				continue;
+			break;
+
+		case CURLINFO_RESPONSE_CODE:
+		{
+			long response;
+			res = curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &response);
+			if (res)
+			  res += 1000000;
+			else
+			  res = response;
+			break;
+		}
+
+		case CURLINFO_REDIRECT_URL:
+		case CURLINFO_CONTENT_TYPE:
+		{
+			char *string;
+			res = curl_easy_getinfo(curl, (CURLINFO)opt, &string);
+			stringval = res || !string ? "" : string;
+			break;
+		}
+
+		case CURLOPT_MAIL_RCPT:
+		{
+			const char *ptr;
+			if (recipients) {
+				curl_slist_free_all(recipients);
+				recipients = NULL;
+			}
+			err = read_string(in, cmd.val, &string);
+			if (err)
+				break;
+			ptr = string;
+			while (cmd.val) {
+				const char *nul = memchr(ptr, 0, cmd.val);
+				if (!nul)
+					return 13;
+				recipients = curl_slist_append(recipients, ptr);
+				cmd.val -= ++nul - ptr;
+				ptr = nul;
+			}
+			free(string);
+			res = curl_easy_setopt(curl, CURLOPT_MAIL_RCPT, recipients);
+			break;
+		}
+
+		case CURLOPT_HTTPHEADER:
+		{
+			const char *ptr;
+			if (httpheaders) {
+				curl_slist_free_all(httpheaders);
+				httpheaders = NULL;
+			}
+			err = read_string(in, cmd.val, &string);
+			if (err)
+				break;
+			ptr = string;
+			while (cmd.val) {
+				const char *nul = memchr(ptr, 0, cmd.val);
+				if (!nul)
+					return 13;
+				httpheaders = curl_slist_append(httpheaders, ptr);
+				cmd.val -= ++nul - ptr;
+				ptr = nul;
+			}
+			free(string);
+			res = curl_easy_setopt(curl, CURLOPT_HTTPHEADER, httpheaders);
+			break;
+		}
+
+		case CURLCMD_RESET:
+		{
+			free_collect(&wdata);
+			free_collect(&hdata);
+			if (httpheaders) {
+				curl_slist_free_all(httpheaders);
+				httpheaders = NULL;
+			}
+			if (recipients) {
+				curl_slist_free_all(recipients);
+				recipients = NULL;
+			}
+			if (data) {
+				free(data);
+				data = NULL;
+				datalen = 0;
+			}
+
+			reset_curl(curl);
+			break;
+		}
+
+		case CURLCMD_PERFORM:
+		{
+			context_t cxt;
+			hdrline_t lasthdr;
+
+			cxt.data = data;
+			cxt.len = datalen;
+			cxt.offset = 0;
+			errbuf[0] = '\0';
+			lasthdr.line = hdrbuf;
+			lasthdr.space = sizeof(hdrbuf);
+			lasthdr.clt = &hdata;
+			hdrbuf[0] = '\0';
+			free_collect(&wdata);
+			free_collect(&hdata);
+			res = curl_easy_setopt(curl,
+					CURLOPT_ERRORBUFFER, errbuf);
+			if (!res)
+				res = curl_easy_setopt(curl,
+					CURLOPT_INFILESIZE, (long)datalen);
+			if (!res)
+				res = curl_easy_setopt(curl,
+					CURLOPT_POSTFIELDSIZE, (long)datalen);
+			if (!res)
+				res = curl_easy_setopt(curl,
+					CURLOPT_READDATA, &cxt);
+			if (!res)
+				res = curl_easy_setopt(curl,
+					CURLOPT_READFUNCTION, (void *)readfunc);
+			if (!res)
+				res = curl_easy_setopt(curl,
+					CURLOPT_PROGRESSFUNCTION, (void *)progressfunc);
+			if (!res)
+				res = curl_easy_setopt(curl,
+					CURLOPT_XFERINFOFUNCTION, (void *)xferfunc);
+			if (!res)
+				res = curl_easy_setopt(curl,
+					CURLOPT_WRITEDATA, &wdata);
+			if (!res)
+				res = curl_easy_setopt(curl,
+					CURLOPT_WRITEFUNCTION, (void *)writefunc);
+			if (!res)
+				res = curl_easy_setopt(curl,
+					CURLOPT_HEADERDATA, &lasthdr);
+			if (!res)
+				res = curl_easy_setopt(curl,
+					CURLOPT_HEADERFUNCTION, (void *)hdrfunc);
+			if (!res)
+				res = curl_easy_perform(curl);
+			break;
+		}
+
+		default:
+			err = 20;
+			break;
+
+		}
+		if (!err)
+			err = stringval ?
+				send_string(out, stringval, strlen(stringval)) :
+				send_res(out, res);
+		if (err)
+			return err;
+	}
+
+	free_collect(&wdata);
+	free_collect(&hdata);
+	if (httpheaders)
+		curl_slist_free_all(httpheaders);
+	if (recipients)
+		curl_slist_free_all(recipients);
+	if (data)
+		free(data);
+
+	if (ferror(in) || !feof(in) || ferror(out))
+		return 4;
+
+	return 0;
+}
diff --git a/t/t9001-send-email.sh b/t/t9001-send-email.sh
index 7be14a4e..09fd92b3 100755
--- a/t/t9001-send-email.sh
+++ b/t/t9001-send-email.sh
@@ -146,6 +146,7 @@ cat >expected-show-all-headers <<\EOF
 (mbox) Adding cc: A <author@example.com> from line 'From: A <author@example.com>'
 (mbox) Adding cc: One <one@example.com> from line 'Cc: One <one@example.com>, two@example.com'
 (mbox) Adding cc: two@example.com from line 'Cc: One <one@example.com>, two@example.com'
+
 Dry-OK. Log says:
 Server: relay.example.com
 MAIL FROM:<from@example.com>
@@ -164,7 +165,6 @@ Cc: cc@example.com,
 Subject: [PATCH 1/1] Second.
 Date: DATE-STRING
 Message-Id: MESSAGE-ID-STRING
-X-Mailer: X-MAILER-STRING
 In-Reply-To: <unique-message-id@example.com>
 References: <unique-message-id@example.com>
 
@@ -496,6 +496,7 @@ cat >expected-suppress-sob <<\EOF
 (mbox) Adding cc: A <author@example.com> from line 'From: A <author@example.com>'
 (mbox) Adding cc: One <one@example.com> from line 'Cc: One <one@example.com>, two@example.com'
 (mbox) Adding cc: two@example.com from line 'Cc: One <one@example.com>, two@example.com'
+
 Dry-OK. Log says:
 Server: relay.example.com
 MAIL FROM:<from@example.com>
@@ -513,7 +514,6 @@ Cc: cc@example.com,
 Subject: [PATCH 1/1] Second.
 Date: DATE-STRING
 Message-Id: MESSAGE-ID-STRING
-X-Mailer: X-MAILER-STRING
 
 Result: OK
 EOF
@@ -545,6 +545,7 @@ cat >expected-suppress-sob <<\EOF
 (mbox) Adding cc: A <author@example.com> from line 'From: A <author@example.com>'
 (mbox) Adding cc: One <one@example.com> from line 'Cc: One <one@example.com>, two@example.com'
 (mbox) Adding cc: two@example.com from line 'Cc: One <one@example.com>, two@example.com'
+
 Dry-OK. Log says:
 Server: relay.example.com
 MAIL FROM:<from@example.com>
@@ -560,7 +561,6 @@ Cc: A <author@example.com>,
 Subject: [PATCH 1/1] Second.
 Date: DATE-STRING
 Message-Id: MESSAGE-ID-STRING
-X-Mailer: X-MAILER-STRING
 
 Result: OK
 EOF
@@ -578,6 +578,7 @@ cat >expected-suppress-cccmd <<\EOF
 (mbox) Adding cc: One <one@example.com> from line 'Cc: One <one@example.com>, two@example.com'
 (mbox) Adding cc: two@example.com from line 'Cc: One <one@example.com>, two@example.com'
 (body) Adding cc: C O Mitter <committer@example.com> from line 'Signed-off-by: C O Mitter <committer@example.com>'
+
 Dry-OK. Log says:
 Server: relay.example.com
 MAIL FROM:<from@example.com>
@@ -595,7 +596,6 @@ Cc: A <author@example.com>,
 Subject: [PATCH 1/1] Second.
 Date: DATE-STRING
 Message-Id: MESSAGE-ID-STRING
-X-Mailer: X-MAILER-STRING
 
 Result: OK
 EOF
@@ -612,6 +612,7 @@ test_expect_success $PREREQ 'sendemail.cccmd' '
 test_expect_success $PREREQ 'setup expect' '
 cat >expected-suppress-all <<\EOF
 0001-Second.patch
+
 Dry-OK. Log says:
 Server: relay.example.com
 MAIL FROM:<from@example.com>
@@ -621,7 +622,6 @@ To: to@example.com
 Subject: [PATCH 1/1] Second.
 Date: DATE-STRING
 Message-Id: MESSAGE-ID-STRING
-X-Mailer: X-MAILER-STRING
 
 Result: OK
 EOF
@@ -638,6 +638,7 @@ cat >expected-suppress-body <<\EOF
 (mbox) Adding cc: One <one@example.com> from line 'Cc: One <one@example.com>, two@example.com'
 (mbox) Adding cc: two@example.com from line 'Cc: One <one@example.com>, two@example.com'
 (cc-cmd) Adding cc: cc-cmd@example.com from: './cccmd'
+
 Dry-OK. Log says:
 Server: relay.example.com
 MAIL FROM:<from@example.com>
@@ -655,7 +656,6 @@ Cc: A <author@example.com>,
 Subject: [PATCH 1/1] Second.
 Date: DATE-STRING
 Message-Id: MESSAGE-ID-STRING
-X-Mailer: X-MAILER-STRING
 
 Result: OK
 EOF
@@ -671,6 +671,7 @@ cat >expected-suppress-body-cccmd <<\EOF
 (mbox) Adding cc: A <author@example.com> from line 'From: A <author@example.com>'
 (mbox) Adding cc: One <one@example.com> from line 'Cc: One <one@example.com>, two@example.com'
 (mbox) Adding cc: two@example.com from line 'Cc: One <one@example.com>, two@example.com'
+
 Dry-OK. Log says:
 Server: relay.example.com
 MAIL FROM:<from@example.com>
@@ -686,7 +687,6 @@ Cc: A <author@example.com>,
 Subject: [PATCH 1/1] Second.
 Date: DATE-STRING
 Message-Id: MESSAGE-ID-STRING
-X-Mailer: X-MAILER-STRING
 
 Result: OK
 EOF
@@ -702,6 +702,7 @@ cat >expected-suppress-sob <<\EOF
 (mbox) Adding cc: A <author@example.com> from line 'From: A <author@example.com>'
 (mbox) Adding cc: One <one@example.com> from line 'Cc: One <one@example.com>, two@example.com'
 (mbox) Adding cc: two@example.com from line 'Cc: One <one@example.com>, two@example.com'
+
 Dry-OK. Log says:
 Server: relay.example.com
 MAIL FROM:<from@example.com>
@@ -717,7 +718,6 @@ Cc: A <author@example.com>,
 Subject: [PATCH 1/1] Second.
 Date: DATE-STRING
 Message-Id: MESSAGE-ID-STRING
-X-Mailer: X-MAILER-STRING
 
 Result: OK
 EOF
@@ -735,6 +735,7 @@ cat >expected-suppress-bodycc <<\EOF
 (mbox) Adding cc: One <one@example.com> from line 'Cc: One <one@example.com>, two@example.com'
 (mbox) Adding cc: two@example.com from line 'Cc: One <one@example.com>, two@example.com'
 (body) Adding cc: C O Mitter <committer@example.com> from line 'Signed-off-by: C O Mitter <committer@example.com>'
+
 Dry-OK. Log says:
 Server: relay.example.com
 MAIL FROM:<from@example.com>
@@ -752,7 +753,6 @@ Cc: A <author@example.com>,
 Subject: [PATCH 1/1] Second.
 Date: DATE-STRING
 Message-Id: MESSAGE-ID-STRING
-X-Mailer: X-MAILER-STRING
 
 Result: OK
 EOF
@@ -767,6 +767,7 @@ cat >expected-suppress-cc <<\EOF
 0001-Second.patch
 (mbox) Adding cc: A <author@example.com> from line 'From: A <author@example.com>'
 (body) Adding cc: C O Mitter <committer@example.com> from line 'Signed-off-by: C O Mitter <committer@example.com>'
+
 Dry-OK. Log says:
 Server: relay.example.com
 MAIL FROM:<from@example.com>
@@ -780,7 +781,6 @@ Cc: A <author@example.com>,
 Subject: [PATCH 1/1] Second.
 Date: DATE-STRING
 Message-Id: MESSAGE-ID-STRING
-X-Mailer: X-MAILER-STRING
 
 Result: OK
 EOF
---
