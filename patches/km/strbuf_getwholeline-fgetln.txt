From: Kyle J. McKay <mackyle@gmail.com>
Subject: [PATCH] strbuf.c: allow use of fgetln when no getdelim

Since 10c497aa (read_packed_refs: use a strbuf for reading lines, v2.2.2),
packed-refs has been read with repeated calls to strbuf_getwholeline
instead of repeated calls to fgets.

Unfortunately this resulted in a performance penalty since the original
implementation of strbuf_getwholeline used repeated calls to fgetc.

This was corrected in 0cc30e0e (strbuf_getwholeline: use getdelim if it is
available, v2.5.0) and the performance when getdelim is not available was
improved in 82912d1d (strbuf_getwholeline: use getc_unlocked, v2.5.0) by
replacing fgetc with getc_unlocked, but still, on systems without getdelim,
the performance remains less than the previous way packed-refs was read
using repeated fgets calls (on systems with getdelim the performance has
actually been improved compared to the original fgets method).

Although getdelim is POSIX, it only appears in the newer versions of the
standard and as a result it is only present on newer systems and systems
that use glibc (where it has always been available).

However, on older systems lacking support for the newer POSIX getdelim
function there may be an alternative fgetln function available that works,
but only when the delimiter is \n.

Since \n is the common case and the delimiter used when reading packed-refs,
make it possible to use fgetln when calling strbuf_getwholeline with a
delimiter of \n and the getdelim function is not available, but fgetln is.

This is triggered by defining HAVE_FGETLN which is automatically set for
BSD and BSD-derived systems.  Since fgetln will only be used when getdelim
is NOT available there's no point in defining it on systems that may have
it available (such as Linux via the -lbsd library) but are always expected
to have getdelim available.

Here are some timing results produced by using a simple wrapper that
calls strbuf_getwholeline with \n as the delimiter repeatedly to read a
160 MiB file consisting of over 2 million lines using various versions of
strbuf_getwholeline and also a separate version using fgets to simulate the
pre-v2.2.2 code:

  fgets         -- fgets + strlen loop (like pre-v2.2.2 packed-refs reading)
  fgetc         -- strbuf_getwholeline fgetc loop
  getc_unlocked -- strbuf_getwholeline flockfile and getc_unlocked loop
  getdelim      -- strbuf_getwholeline using getdelim
  fgetln        -- strbuf_getwholeline using fgetln when delim is \n

  Times are given as u+s (user plus system) averaged over 3 runs.

  Note that the Linux machine is a faster system than the FreeBSD one.

  FreeBSD (newer version with POSIX getdelim):
            fgets: 1.018s
            fgetc: 3.299s
    getc_unlocked: 1.385s
         getdelim: 0.888s
           fgetln: 0.914s

  Linux:
            fgets: 0.643s
            fgetc: 2.980s
    getc_unlocked: 1.080s
         getdelim: 0.307s
           fgetln: 0.473s

In both cases the fgetln version is just a tad faster than the previous
fgets version.  On Linux fgetln is about 56% faster than the getc_unlocked
version although Linux is expected to always have getdelim courtesy of
glibc.  On FreeBSD fgetln is about 34% faster than the getc_unlocked
version and that's probably the most common case where fgetln can be found
without getdelim.

Signed-off-by: Kyle J. McKay <mackyle@gmail.com>

---
 Makefile         |  6 ++++++
 config.mak.uname |  5 +++++
 strbuf.c         | 32 ++++++++++++++++++++++++--------
 3 files changed, 35 insertions(+), 8 deletions(-)

diff --git a/Makefile b/Makefile
index fd19b544..a49f719b 100644
--- a/Makefile
+++ b/Makefile
@@ -367,6 +367,8 @@ all::
 # Define HAVE_BSD_SYSCTL if your platform has a BSD-compatible sysctl function.
 #
 # Define HAVE_GETDELIM if your system has the getdelim() function.
+#
+# Define HAVE_FGETLN if your system has the fgetln() function.
 
 GIT-VERSION-FILE: FORCE
 	@$(SHELL_PATH) ./GIT-VERSION-GEN
@@ -1470,6 +1472,10 @@ ifdef HAVE_GETDELIM
 	BASIC_CFLAGS += -DHAVE_GETDELIM
 endif
 
+ifdef HAVE_FGETLN
+	BASIC_CFLAGS += -DHAVE_FGETLN
+endif
+
 ifeq ($(TCLTK_PATH),)
 NO_TCLTK = NoThanks
 endif
diff --git a/config.mak.uname b/config.mak.uname
index f34dcaad..015ac2fb 100644
--- a/config.mak.uname
+++ b/config.mak.uname
@@ -112,6 +112,7 @@ ifeq ($(uname_S),Darwin)
 	BASIC_CFLAGS += -DPRECOMPOSE_UNICODE
 	BASIC_CFLAGS += -DPROTECT_HFS_DEFAULT=1
 	HAVE_BSD_SYSCTL = YesPlease
+	HAVE_FGETLN = YesPlease
 endif
 ifeq ($(uname_S),SunOS)
 	NEEDS_SOCKET = YesPlease
@@ -204,6 +205,7 @@ ifeq ($(uname_S),FreeBSD)
 	HAVE_PATHS_H = YesPlease
 	GMTIME_UNRELIABLE_ERRORS = UnfortunatelyYes
 	HAVE_BSD_SYSCTL = YesPlease
+	HAVE_FGETLN = YesPlease
 endif
 ifeq ($(uname_S),OpenBSD)
 	NO_STRCASESTR = YesPlease
@@ -214,6 +216,7 @@ ifeq ($(uname_S),OpenBSD)
 	BASIC_LDFLAGS += -L/usr/local/lib
 	HAVE_PATHS_H = YesPlease
 	HAVE_BSD_SYSCTL = YesPlease
+	HAVE_FGETLN = YesPlease
 endif
 ifeq ($(uname_S),MirBSD)
 	NO_STRCASESTR = YesPlease
@@ -222,6 +225,7 @@ ifeq ($(uname_S),MirBSD)
 	NEEDS_LIBICONV = YesPlease
 	HAVE_PATHS_H = YesPlease
 	HAVE_BSD_SYSCTL = YesPlease
+	HAVE_FGETLN = YesPlease
 endif
 ifeq ($(uname_S),NetBSD)
 	ifeq ($(shell expr "$(uname_R)" : '[01]\.'),2)
@@ -233,6 +237,7 @@ ifeq ($(uname_S),NetBSD)
 	NO_MKSTEMPS = YesPlease
 	HAVE_PATHS_H = YesPlease
 	HAVE_BSD_SYSCTL = YesPlease
+	HAVE_FGETLN = YesPlease
 endif
 ifeq ($(uname_S),AIX)
 	DEFAULT_PAGER = more
diff --git a/strbuf.c b/strbuf.c
index d76f0aed..146125d3 100644
--- a/strbuf.c
+++ b/strbuf.c
@@ -484,15 +484,31 @@ int strbuf_getwholeline(struct strbuf *sb, FILE *fp, int term)
 		return EOF;
 
 	strbuf_reset(sb);
-	flockfile(fp);
-	while ((ch = getc_unlocked(fp)) != EOF) {
-		if (!strbuf_avail(sb))
-			strbuf_grow(sb, 1);
-		sb->buf[sb->len++] = ch;
-		if (ch == term)
-			break;
+#ifdef HAVE_FGETLN
+	if (term == '\n') {
+		size_t len;
+		char *line;
+		if ((line = fgetln(fp, &len))) {
+			if (strbuf_avail(sb) < len)
+				strbuf_grow(sb, len);
+			memcpy(sb->buf + sb->len, line, len);
+			sb->len += len;
+			ch = 0;
+		} else
+			ch = EOF;
+	} else
+#endif
+	{
+	    flockfile(fp);
+	    while ((ch = getc_unlocked(fp)) != EOF) {
+		    if (!strbuf_avail(sb))
+			    strbuf_grow(sb, 1);
+		    sb->buf[sb->len++] = ch;
+		    if (ch == term)
+			    break;
+	    }
+	    funlockfile(fp);
 	}
-	funlockfile(fp);
 	if (ch == EOF && sb->len == 0)
 		return EOF;
 
---
