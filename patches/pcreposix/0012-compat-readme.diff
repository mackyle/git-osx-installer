From: Kyle J. McKay <mackyle@gmail.com>
Subject: [PATCH] Update various docs and README files

Move README to README-PCRE and add a new README.txt,
README-GIT-REGEX and config.mak files.

Also point pcreposix.3 and pcreposix.html at the new
pcreposix.h header.

Signed-off-by: Kyle J. McKay <mackyle@gmail.com>

---
 .gitattributes                                     |    3 +
 Makefile.am                                        |    5 +-
 Makefile.in                                        |    8 +-
 README                                             | 1002 --------------------
 README-GIT-REGEX                                   |  102 ++
 README-PCRE                                        | 1002 ++++++++++++++++++++
 README.md                                          |    1 +
 README.txt                                         |  489 ++++++++++
 config.mak                                         |   73 ++
 doc/html/pcreposix.html                            |    6 +
 doc/pcreposix.3                                    |    5 +
 .../7810-spurious-undefined-behavior-fail-fix.txt  |   36 +
 12 files changed, 1727 insertions(+), 1005 deletions(-)
 create mode 100644 .gitattributes
 delete mode 100644 README
 create mode 100644 README-GIT-REGEX
 create mode 100644 README-PCRE
 create mode 120000 README.md
 create mode 100644 README.txt
 create mode 100644 config.mak
 create mode 100644 gitpatches/7810-spurious-undefined-behavior-fail-fix.txt

diff --git a/.gitattributes b/.gitattributes
new file mode 100644
index 00000000..5b993217
--- /dev/null
+++ b/.gitattributes
@@ -0,0 +1,3 @@
+.gitattributes	export-ignore
+.gitignore	export-ignore
+/README.md	export-ignore
diff --git a/Makefile.am b/Makefile.am
index 9d11b076..bb56b4e8 100644
--- a/Makefile.am
+++ b/Makefile.am
@@ -12,7 +12,10 @@ dist_doc_DATA = \
   ChangeLog \
   LICENCE \
   NEWS \
-  README
+  README.txt \
+  README-PCRE \
+  README-GIT-REGEX \
+  config.mak
 
 # Note that pcrecpp.html is not in this list; it is listed separately below.
 
diff --git a/Makefile.in b/Makefile.in
index ff33ac09..1600d5c3 100644
--- a/Makefile.in
+++ b/Makefile.in
@@ -733,7 +733,8 @@ am__DIST_COMMON = $(dist_man_MANS) $(srcdir)/Makefile.in \
 	$(srcdir)/libpcrecpp.pc.in $(srcdir)/libpcreposix.pc.in \
 	$(srcdir)/pcre-config.in $(srcdir)/pcre.h.in \
 	$(srcdir)/pcre_stringpiece.h.in $(srcdir)/pcrecpparg.h.in \
-	AUTHORS COPYING ChangeLog INSTALL NEWS README ar-lib compile \
+	AUTHORS COPYING ChangeLog INSTALL NEWS README.txt README-PCRE \
+	README-GIT-REGEX config.mak ar-lib compile \
 	config.guess config.sub depcomp install-sh ltmain.sh missing \
 	test-driver
 DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
@@ -930,7 +931,10 @@ dist_doc_DATA = \
   ChangeLog \
   LICENCE \
   NEWS \
-  README
+  README.txt \
+  README-PCRE \
+  README-GIT-REGEX \
+  config.mak
 
 
 # Note that pcrecpp.html is not in this list; it is listed separately below.
diff --git a/README b/README
deleted file mode 100644
index 4887ebf3..00000000
--- a/README
+++ /dev/null
@@ -1,1002 +0,0 @@
-README file for PCRE (Perl-compatible regular expression library)
------------------------------------------------------------------
-
-NOTE: This set of files relates to PCRE releases that use the original API,
-with library names libpcre, libpcre16, and libpcre32. January 2015 saw the
-first release of a new API, known as PCRE2, with release numbers starting at
-10.00 and library names libpcre2-8, libpcre2-16, and libpcre2-32. The old
-libraries (now called PCRE1) are still being maintained for bug fixes, but
-there will be no new development. New projects are advised to use the new PCRE2
-libraries.
-
-
-The latest release of PCRE1 is always available in three alternative formats
-from:
-
-  ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-xxx.tar.gz
-  ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-xxx.tar.bz2
-  ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-xxx.zip
-
-There is a mailing list for discussion about the development of PCRE at
-pcre-dev@exim.org. You can access the archives and subscribe or manage your
-subscription here:
-
-   https://lists.exim.org/mailman/listinfo/pcre-dev
-
-Please read the NEWS file if you are upgrading from a previous release.
-The contents of this README file are:
-
-  The PCRE APIs
-  Documentation for PCRE
-  Contributions by users of PCRE
-  Building PCRE on non-Unix-like systems
-  Building PCRE without using autotools
-  Building PCRE using autotools
-  Retrieving configuration information
-  Shared libraries
-  Cross-compiling using autotools
-  Using HP's ANSI C++ compiler (aCC)
-  Compiling in Tru64 using native compilers
-  Using Sun's compilers for Solaris
-  Using PCRE from MySQL
-  Making new tarballs
-  Testing PCRE
-  Character tables
-  File manifest
-
-
-The PCRE APIs
--------------
-
-PCRE is written in C, and it has its own API. There are three sets of
-functions, one for the 8-bit library, which processes strings of bytes, one for
-the 16-bit library, which processes strings of 16-bit values, and one for the
-32-bit library, which processes strings of 32-bit values. The distribution also
-includes a set of C++ wrapper functions (see the pcrecpp man page for details),
-courtesy of Google Inc., which can be used to call the 8-bit PCRE library from
-C++. Other C++ wrappers have been created from time to time. See, for example:
-https://github.com/YasserAsmi/regexp, which aims to be simple and similar in
-style to the C API.
-
-The distribution also contains a set of C wrapper functions (again, just for
-the 8-bit library) that are based on the POSIX regular expression API (see the
-pcreposix man page). These end up in the library called libpcreposix. Note that
-this just provides a POSIX calling interface to PCRE; the regular expressions
-themselves still follow Perl syntax and semantics. The POSIX API is restricted,
-and does not give full access to all of PCRE's facilities.
-
-The header file for the POSIX-style functions is called pcreposix.h. The
-official POSIX name is regex.h, but I did not want to risk possible problems
-with existing files of that name by distributing it that way. To use PCRE with
-an existing program that uses the POSIX API, pcreposix.h will have to be
-renamed or pointed at by a link.
-
-If you are using the POSIX interface to PCRE and there is already a POSIX regex
-library installed on your system, as well as worrying about the regex.h header
-file (as mentioned above), you must also take care when linking programs to
-ensure that they link with PCRE's libpcreposix library. Otherwise they may pick
-up the POSIX functions of the same name from the other library.
-
-One way of avoiding this confusion is to compile PCRE with the addition of
--Dregcomp=PCREregcomp (and similarly for the other POSIX functions) to the
-compiler flags (CFLAGS if you are using "configure" -- see below). This has the
-effect of renaming the functions so that the names no longer clash. Of course,
-you have to do the same thing for your applications, or write them using the
-new names.
-
-
-Documentation for PCRE
-----------------------
-
-If you install PCRE in the normal way on a Unix-like system, you will end up
-with a set of man pages whose names all start with "pcre". The one that is just
-called "pcre" lists all the others. In addition to these man pages, the PCRE
-documentation is supplied in two other forms:
-
-  1. There are files called doc/pcre.txt, doc/pcregrep.txt, and
-     doc/pcretest.txt in the source distribution. The first of these is a
-     concatenation of the text forms of all the section 3 man pages except
-     the listing of pcredemo.c and those that summarize individual functions.
-     The other two are the text forms of the section 1 man pages for the
-     pcregrep and pcretest commands. These text forms are provided for ease of
-     scanning with text editors or similar tools. They are installed in
-     <prefix>/share/doc/pcre, where <prefix> is the installation prefix
-     (defaulting to /usr/local).
-
-  2. A set of files containing all the documentation in HTML form, hyperlinked
-     in various ways, and rooted in a file called index.html, is distributed in
-     doc/html and installed in <prefix>/share/doc/pcre/html.
-
-Users of PCRE have contributed files containing the documentation for various
-releases in CHM format. These can be found in the Contrib directory of the FTP
-site (see next section).
-
-
-Contributions by users of PCRE
-------------------------------
-
-You can find contributions from PCRE users in the directory
-
-  ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/Contrib
-
-There is a README file giving brief descriptions of what they are. Some are
-complete in themselves; others are pointers to URLs containing relevant files.
-Some of this material is likely to be well out-of-date. Several of the earlier
-contributions provided support for compiling PCRE on various flavours of
-Windows (I myself do not use Windows). Nowadays there is more Windows support
-in the standard distribution, so these contibutions have been archived.
-
-A PCRE user maintains downloadable Windows binaries of the pcregrep and
-pcretest programs here:
-
-  http://www.rexegg.com/pcregrep-pcretest.html
-
-
-Building PCRE on non-Unix-like systems
---------------------------------------
-
-For a non-Unix-like system, please read the comments in the file
-NON-AUTOTOOLS-BUILD, though if your system supports the use of "configure" and
-"make" you may be able to build PCRE using autotools in the same way as for
-many Unix-like systems.
-
-PCRE can also be configured using the GUI facility provided by CMake's
-cmake-gui command. This creates Makefiles, solution files, etc. The file
-NON-AUTOTOOLS-BUILD has information about CMake.
-
-PCRE has been compiled on many different operating systems. It should be
-straightforward to build PCRE on any system that has a Standard C compiler and
-library, because it uses only Standard C functions.
-
-
-Building PCRE without using autotools
--------------------------------------
-
-The use of autotools (in particular, libtool) is problematic in some
-environments, even some that are Unix or Unix-like. See the NON-AUTOTOOLS-BUILD
-file for ways of building PCRE without using autotools.
-
-
-Building PCRE using autotools
------------------------------
-
-If you are using HP's ANSI C++ compiler (aCC), please see the special note
-in the section entitled "Using HP's ANSI C++ compiler (aCC)" below.
-
-The following instructions assume the use of the widely used "configure; make;
-make install" (autotools) process.
-
-To build PCRE on system that supports autotools, first run the "configure"
-command from the PCRE distribution directory, with your current directory set
-to the directory where you want the files to be created. This command is a
-standard GNU "autoconf" configuration script, for which generic instructions
-are supplied in the file INSTALL.
-
-Most commonly, people build PCRE within its own distribution directory, and in
-this case, on many systems, just running "./configure" is sufficient. However,
-the usual methods of changing standard defaults are available. For example:
-
-CFLAGS='-O2 -Wall' ./configure --prefix=/opt/local
-
-This command specifies that the C compiler should be run with the flags '-O2
--Wall' instead of the default, and that "make install" should install PCRE
-under /opt/local instead of the default /usr/local.
-
-If you want to build in a different directory, just run "configure" with that
-directory as current. For example, suppose you have unpacked the PCRE source
-into /source/pcre/pcre-xxx, but you want to build it in /build/pcre/pcre-xxx:
-
-cd /build/pcre/pcre-xxx
-/source/pcre/pcre-xxx/configure
-
-PCRE is written in C and is normally compiled as a C library. However, it is
-possible to build it as a C++ library, though the provided building apparatus
-does not have any features to support this.
-
-There are some optional features that can be included or omitted from the PCRE
-library. They are also documented in the pcrebuild man page.
-
-. By default, both shared and static libraries are built. You can change this
-  by adding one of these options to the "configure" command:
-
-  --disable-shared
-  --disable-static
-
-  (See also "Shared libraries on Unix-like systems" below.)
-
-. By default, only the 8-bit library is built. If you add --enable-pcre16 to
-  the "configure" command, the 16-bit library is also built. If you add
-  --enable-pcre32 to the "configure" command, the 32-bit library is also built.
-  If you want only the 16-bit or 32-bit library, use --disable-pcre8 to disable
-  building the 8-bit library.
-
-. If you are building the 8-bit library and want to suppress the building of
-  the C++ wrapper library, you can add --disable-cpp to the "configure"
-  command. Otherwise, when "configure" is run without --disable-pcre8, it will
-  try to find a C++ compiler and C++ header files, and if it succeeds, it will
-  try to build the C++ wrapper.
-
-. If you want to include support for just-in-time compiling, which can give
-  large performance improvements on certain platforms, add --enable-jit to the
-  "configure" command. This support is available only for certain hardware
-  architectures. If you try to enable it on an unsupported architecture, there
-  will be a compile time error.
-
-. When JIT support is enabled, pcregrep automatically makes use of it, unless
-  you add --disable-pcregrep-jit to the "configure" command.
-
-. If you want to make use of the support for UTF-8 Unicode character strings in
-  the 8-bit library, or UTF-16 Unicode character strings in the 16-bit library,
-  or UTF-32 Unicode character strings in the 32-bit library, you must add
-  --enable-utf to the "configure" command. Without it, the code for handling
-  UTF-8, UTF-16 and UTF-8 is not included in the relevant library. Even
-  when --enable-utf is included, the use of a UTF encoding still has to be
-  enabled by an option at run time. When PCRE is compiled with this option, its
-  input can only either be ASCII or UTF-8/16/32, even when running on EBCDIC
-  platforms. It is not possible to use both --enable-utf and --enable-ebcdic at
-  the same time.
-
-. There are no separate options for enabling UTF-8, UTF-16 and UTF-32
-  independently because that would allow ridiculous settings such as requesting
-  UTF-16 support while building only the 8-bit library. However, the option
-  --enable-utf8 is retained for backwards compatibility with earlier releases
-  that did not support 16-bit or 32-bit character strings. It is synonymous with
-  --enable-utf. It is not possible to configure one library with UTF support
-  and the other without in the same configuration.
-
-. If, in addition to support for UTF-8/16/32 character strings, you want to
-  include support for the \P, \p, and \X sequences that recognize Unicode
-  character properties, you must add --enable-unicode-properties to the
-  "configure" command. This adds about 30K to the size of the library (in the
-  form of a property table); only the basic two-letter properties such as Lu
-  are supported.
-
-. You can build PCRE to recognize either CR or LF or the sequence CRLF or any
-  of the preceding, or any of the Unicode newline sequences as indicating the
-  end of a line. Whatever you specify at build time is the default; the caller
-  of PCRE can change the selection at run time. The default newline indicator
-  is a single LF character (the Unix standard). You can specify the default
-  newline indicator by adding --enable-newline-is-cr or --enable-newline-is-lf
-  or --enable-newline-is-crlf or --enable-newline-is-anycrlf or
-  --enable-newline-is-any to the "configure" command, respectively.
-
-  If you specify --enable-newline-is-cr or --enable-newline-is-crlf, some of
-  the standard tests will fail, because the lines in the test files end with
-  LF. Even if the files are edited to change the line endings, there are likely
-  to be some failures. With --enable-newline-is-anycrlf or
-  --enable-newline-is-any, many tests should succeed, but there may be some
-  failures.
-
-. By default, the sequence \R in a pattern matches any Unicode line ending
-  sequence. This is independent of the option specifying what PCRE considers to
-  be the end of a line (see above). However, the caller of PCRE can restrict \R
-  to match only CR, LF, or CRLF. You can make this the default by adding
-  --enable-bsr-anycrlf to the "configure" command (bsr = "backslash R").
-
-. When called via the POSIX interface, PCRE uses malloc() to get additional
-  storage for processing capturing parentheses if there are more than 10 of
-  them in a pattern. You can increase this threshold by setting, for example,
-
-  --with-posix-malloc-threshold=20
-
-  on the "configure" command.
-
-. PCRE has a counter that limits the depth of nesting of parentheses in a
-  pattern. This limits the amount of system stack that a pattern uses when it
-  is compiled. The default is 250, but you can change it by setting, for
-  example,
-
-  --with-parens-nest-limit=500
-
-. PCRE has a counter that can be set to limit the amount of resources it uses
-  when matching a pattern. If the limit is exceeded during a match, the match
-  fails. The default is ten million. You can change the default by setting, for
-  example,
-
-  --with-match-limit=500000
-
-  on the "configure" command. This is just the default; individual calls to
-  pcre_exec() can supply their own value. There is more discussion on the
-  pcreapi man page.
-
-. There is a separate counter that limits the depth of recursive function calls
-  during a matching process. This also has a default of ten million, which is
-  essentially "unlimited". You can change the default by setting, for example,
-
-  --with-match-limit-recursion=500000
-
-  Recursive function calls use up the runtime stack; running out of stack can
-  cause programs to crash in strange ways. There is a discussion about stack
-  sizes in the pcrestack man page.
-
-. The default maximum compiled pattern size is around 64K. You can increase
-  this by adding --with-link-size=3 to the "configure" command. In the 8-bit
-  library, PCRE then uses three bytes instead of two for offsets to different
-  parts of the compiled pattern. In the 16-bit library, --with-link-size=3 is
-  the same as --with-link-size=4, which (in both libraries) uses four-byte
-  offsets. Increasing the internal link size reduces performance. In the 32-bit
-  library, the only supported link size is 4.
-
-. You can build PCRE so that its internal match() function that is called from
-  pcre_exec() does not call itself recursively. Instead, it uses memory blocks
-  obtained from the heap via the special functions pcre_stack_malloc() and
-  pcre_stack_free() to save data that would otherwise be saved on the stack. To
-  build PCRE like this, use
-
-  --disable-stack-for-recursion
-
-  on the "configure" command. PCRE runs more slowly in this mode, but it may be
-  necessary in environments with limited stack sizes. This applies only to the
-  normal execution of the pcre_exec() function; if JIT support is being
-  successfully used, it is not relevant. Equally, it does not apply to
-  pcre_dfa_exec(), which does not use deeply nested recursion. There is a
-  discussion about stack sizes in the pcrestack man page.
-
-. For speed, PCRE uses four tables for manipulating and identifying characters
-  whose code point values are less than 256. By default, it uses a set of
-  tables for ASCII encoding that is part of the distribution. If you specify
-
-  --enable-rebuild-chartables
-
-  a program called dftables is compiled and run in the default C locale when
-  you obey "make". It builds a source file called pcre_chartables.c. If you do
-  not specify this option, pcre_chartables.c is created as a copy of
-  pcre_chartables.c.dist. See "Character tables" below for further information.
-
-. It is possible to compile PCRE for use on systems that use EBCDIC as their
-  character code (as opposed to ASCII/Unicode) by specifying
-
-  --enable-ebcdic
-
-  This automatically implies --enable-rebuild-chartables (see above). However,
-  when PCRE is built this way, it always operates in EBCDIC. It cannot support
-  both EBCDIC and UTF-8/16/32. There is a second option, --enable-ebcdic-nl25,
-  which specifies that the code value for the EBCDIC NL character is 0x25
-  instead of the default 0x15.
-
-. In environments where valgrind is installed, if you specify
-
-  --enable-valgrind
-
-  PCRE will use valgrind annotations to mark certain memory regions as
-  unaddressable. This allows it to detect invalid memory accesses, and is
-  mostly useful for debugging PCRE itself.
-
-. In environments where the gcc compiler is used and lcov version 1.6 or above
-  is installed, if you specify
-
-  --enable-coverage
-
-  the build process implements a code coverage report for the test suite. The
-  report is generated by running "make coverage". If ccache is installed on
-  your system, it must be disabled when building PCRE for coverage reporting.
-  You can do this by setting the environment variable CCACHE_DISABLE=1 before
-  running "make" to build PCRE. There is more information about coverage
-  reporting in the "pcrebuild" documentation.
-
-. The pcregrep program currently supports only 8-bit data files, and so
-  requires the 8-bit PCRE library. It is possible to compile pcregrep to use
-  libz and/or libbz2, in order to read .gz and .bz2 files (respectively), by
-  specifying one or both of
-
-  --enable-pcregrep-libz
-  --enable-pcregrep-libbz2
-
-  Of course, the relevant libraries must be installed on your system.
-
-. The default size (in bytes) of the internal buffer used by pcregrep can be
-  set by, for example:
-
-  --with-pcregrep-bufsize=51200
-
-  The value must be a plain integer. The default is 20480.
-
-. It is possible to compile pcretest so that it links with the libreadline
-  or libedit libraries, by specifying, respectively,
-
-  --enable-pcretest-libreadline or --enable-pcretest-libedit
-
-  If this is done, when pcretest's input is from a terminal, it reads it using
-  the readline() function. This provides line-editing and history facilities.
-  Note that libreadline is GPL-licenced, so if you distribute a binary of
-  pcretest linked in this way, there may be licensing issues. These can be
-  avoided by linking with libedit (which has a BSD licence) instead.
-
-  Enabling libreadline causes the -lreadline option to be added to the pcretest
-  build. In many operating environments with a sytem-installed readline
-  library this is sufficient. However, in some environments (e.g. if an
-  unmodified distribution version of readline is in use), it may be necessary
-  to specify something like LIBS="-lncurses" as well. This is because, to quote
-  the readline INSTALL, "Readline uses the termcap functions, but does not link
-  with the termcap or curses library itself, allowing applications which link
-  with readline the to choose an appropriate library." If you get error
-  messages about missing functions tgetstr, tgetent, tputs, tgetflag, or tgoto,
-  this is the problem, and linking with the ncurses library should fix it.
-
-The "configure" script builds the following files for the basic C library:
-
-. Makefile             the makefile that builds the library
-. config.h             build-time configuration options for the library
-. pcre.h               the public PCRE header file
-. pcre-config          script that shows the building settings such as CFLAGS
-                         that were set for "configure"
-. libpcre.pc         ) data for the pkg-config command
-. libpcre16.pc       )
-. libpcre32.pc       )
-. libpcreposix.pc    )
-. libtool              script that builds shared and/or static libraries
-
-Versions of config.h and pcre.h are distributed in the PCRE tarballs under the
-names config.h.generic and pcre.h.generic. These are provided for those who
-have to built PCRE without using "configure" or CMake. If you use "configure"
-or CMake, the .generic versions are not used.
-
-When building the 8-bit library, if a C++ compiler is found, the following
-files are also built:
-
-. libpcrecpp.pc        data for the pkg-config command
-. pcrecpparg.h         header file for calling PCRE via the C++ wrapper
-. pcre_stringpiece.h   header for the C++ "stringpiece" functions
-
-The "configure" script also creates config.status, which is an executable
-script that can be run to recreate the configuration, and config.log, which
-contains compiler output from tests that "configure" runs.
-
-Once "configure" has run, you can run "make". This builds the the libraries
-libpcre, libpcre16 and/or libpcre32, and a test program called pcretest. If you
-enabled JIT support with --enable-jit, a test program called pcre_jit_test is
-built as well.
-
-If the 8-bit library is built, libpcreposix and the pcregrep command are also
-built, and if a C++ compiler was found on your system, and you did not disable
-it with --disable-cpp, "make" builds the C++ wrapper library, which is called
-libpcrecpp, as well as some test programs called pcrecpp_unittest,
-pcre_scanner_unittest, and pcre_stringpiece_unittest.
-
-The command "make check" runs all the appropriate tests. Details of the PCRE
-tests are given below in a separate section of this document.
-
-You can use "make install" to install PCRE into live directories on your
-system. The following are installed (file names are all relative to the
-<prefix> that is set when "configure" is run):
-
-  Commands (bin):
-    pcretest
-    pcregrep (if 8-bit support is enabled)
-    pcre-config
-
-  Libraries (lib):
-    libpcre16     (if 16-bit support is enabled)
-    libpcre32     (if 32-bit support is enabled)
-    libpcre       (if 8-bit support is enabled)
-    libpcreposix  (if 8-bit support is enabled)
-    libpcrecpp    (if 8-bit and C++ support is enabled)
-
-  Configuration information (lib/pkgconfig):
-    libpcre16.pc
-    libpcre32.pc
-    libpcre.pc
-    libpcreposix.pc
-    libpcrecpp.pc (if C++ support is enabled)
-
-  Header files (include):
-    pcre.h
-    pcreposix.h
-    pcre_scanner.h      )
-    pcre_stringpiece.h  ) if C++ support is enabled
-    pcrecpp.h           )
-    pcrecpparg.h        )
-
-  Man pages (share/man/man{1,3}):
-    pcregrep.1
-    pcretest.1
-    pcre-config.1
-    pcre.3
-    pcre*.3 (lots more pages, all starting "pcre")
-
-  HTML documentation (share/doc/pcre/html):
-    index.html
-    *.html (lots more pages, hyperlinked from index.html)
-
-  Text file documentation (share/doc/pcre):
-    AUTHORS
-    COPYING
-    ChangeLog
-    LICENCE
-    NEWS
-    README
-    pcre.txt         (a concatenation of the man(3) pages)
-    pcretest.txt     the pcretest man page
-    pcregrep.txt     the pcregrep man page
-    pcre-config.txt  the pcre-config man page
-
-If you want to remove PCRE from your system, you can run "make uninstall".
-This removes all the files that "make install" installed. However, it does not
-remove any directories, because these are often shared with other programs.
-
-
-Retrieving configuration information
-------------------------------------
-
-Running "make install" installs the command pcre-config, which can be used to
-recall information about the PCRE configuration and installation. For example:
-
-  pcre-config --version
-
-prints the version number, and
-
-  pcre-config --libs
-
-outputs information about where the library is installed. This command can be
-included in makefiles for programs that use PCRE, saving the programmer from
-having to remember too many details.
-
-The pkg-config command is another system for saving and retrieving information
-about installed libraries. Instead of separate commands for each library, a
-single command is used. For example:
-
-  pkg-config --cflags pcre
-
-The data is held in *.pc files that are installed in a directory called
-<prefix>/lib/pkgconfig.
-
-
-Shared libraries
-----------------
-
-The default distribution builds PCRE as shared libraries and static libraries,
-as long as the operating system supports shared libraries. Shared library
-support relies on the "libtool" script which is built as part of the
-"configure" process.
-
-The libtool script is used to compile and link both shared and static
-libraries. They are placed in a subdirectory called .libs when they are newly
-built. The programs pcretest and pcregrep are built to use these uninstalled
-libraries (by means of wrapper scripts in the case of shared libraries). When
-you use "make install" to install shared libraries, pcregrep and pcretest are
-automatically re-built to use the newly installed shared libraries before being
-installed themselves. However, the versions left in the build directory still
-use the uninstalled libraries.
-
-To build PCRE using static libraries only you must use --disable-shared when
-configuring it. For example:
-
-./configure --prefix=/usr/gnu --disable-shared
-
-Then run "make" in the usual way. Similarly, you can use --disable-static to
-build only shared libraries.
-
-
-Cross-compiling using autotools
--------------------------------
-
-You can specify CC and CFLAGS in the normal way to the "configure" command, in
-order to cross-compile PCRE for some other host. However, you should NOT
-specify --enable-rebuild-chartables, because if you do, the dftables.c source
-file is compiled and run on the local host, in order to generate the inbuilt
-character tables (the pcre_chartables.c file). This will probably not work,
-because dftables.c needs to be compiled with the local compiler, not the cross
-compiler.
-
-When --enable-rebuild-chartables is not specified, pcre_chartables.c is created
-by making a copy of pcre_chartables.c.dist, which is a default set of tables
-that assumes ASCII code. Cross-compiling with the default tables should not be
-a problem.
-
-If you need to modify the character tables when cross-compiling, you should
-move pcre_chartables.c.dist out of the way, then compile dftables.c by hand and
-run it on the local host to make a new version of pcre_chartables.c.dist.
-Then when you cross-compile PCRE this new version of the tables will be used.
-
-
-Using HP's ANSI C++ compiler (aCC)
-----------------------------------
-
-Unless C++ support is disabled by specifying the "--disable-cpp" option of the
-"configure" script, you must include the "-AA" option in the CXXFLAGS
-environment variable in order for the C++ components to compile correctly.
-
-Also, note that the aCC compiler on PA-RISC platforms may have a defect whereby
-needed libraries fail to get included when specifying the "-AA" compiler
-option. If you experience unresolved symbols when linking the C++ programs,
-use the workaround of specifying the following environment variable prior to
-running the "configure" script:
-
-  CXXLDFLAGS="-lstd_v2 -lCsup_v2"
-
-
-Compiling in Tru64 using native compilers
------------------------------------------
-
-The following error may occur when compiling with native compilers in the Tru64
-operating system:
-
-  CXX    libpcrecpp_la-pcrecpp.lo
-cxx: Error: /usr/lib/cmplrs/cxx/V7.1-006/include/cxx/iosfwd, line 58: #error
-          directive: "cannot include iosfwd -- define __USE_STD_IOSTREAM to
-          override default - see section 7.1.2 of the C++ Using Guide"
-#error "cannot include iosfwd -- define __USE_STD_IOSTREAM to override default
-- see section 7.1.2 of the C++ Using Guide"
-
-This may be followed by other errors, complaining that 'namespace "std" has no
-member'. The solution to this is to add the line
-
-#define __USE_STD_IOSTREAM 1
-
-to the config.h file.
-
-
-Using Sun's compilers for Solaris
----------------------------------
-
-A user reports that the following configurations work on Solaris 9 sparcv9 and
-Solaris 9 x86 (32-bit):
-
-  Solaris 9 sparcv9: ./configure --disable-cpp CC=/bin/cc CFLAGS="-m64 -g"
-  Solaris 9 x86:     ./configure --disable-cpp CC=/bin/cc CFLAGS="-g"
-
-
-Using PCRE from MySQL
----------------------
-
-On systems where both PCRE and MySQL are installed, it is possible to make use
-of PCRE from within MySQL, as an alternative to the built-in pattern matching.
-There is a web page that tells you how to do this:
-
-  http://www.mysqludf.org/lib_mysqludf_preg/index.php
-
-
-Making new tarballs
--------------------
-
-The command "make dist" creates three PCRE tarballs, in tar.gz, tar.bz2, and
-zip formats. The command "make distcheck" does the same, but then does a trial
-build of the new distribution to ensure that it works.
-
-If you have modified any of the man page sources in the doc directory, you
-should first run the PrepareRelease script before making a distribution. This
-script creates the .txt and HTML forms of the documentation from the man pages.
-
-
-Testing PCRE
-------------
-
-To test the basic PCRE library on a Unix-like system, run the RunTest script.
-There is another script called RunGrepTest that tests the options of the
-pcregrep command. If the C++ wrapper library is built, three test programs
-called pcrecpp_unittest, pcre_scanner_unittest, and pcre_stringpiece_unittest
-are also built. When JIT support is enabled, another test program called
-pcre_jit_test is built.
-
-Both the scripts and all the program tests are run if you obey "make check" or
-"make test". For other environments, see the instructions in
-NON-AUTOTOOLS-BUILD.
-
-The RunTest script runs the pcretest test program (which is documented in its
-own man page) on each of the relevant testinput files in the testdata
-directory, and compares the output with the contents of the corresponding
-testoutput files. RunTest uses a file called testtry to hold the main output
-from pcretest. Other files whose names begin with "test" are used as working
-files in some tests.
-
-Some tests are relevant only when certain build-time options were selected. For
-example, the tests for UTF-8/16/32 support are run only if --enable-utf was
-used. RunTest outputs a comment when it skips a test.
-
-Many of the tests that are not skipped are run up to three times. The second
-run forces pcre_study() to be called for all patterns except for a few in some
-tests that are marked "never study" (see the pcretest program for how this is
-done). If JIT support is available, the non-DFA tests are run a third time,
-this time with a forced pcre_study() with the PCRE_STUDY_JIT_COMPILE option.
-This testing can be suppressed by putting "nojit" on the RunTest command line.
-
-The entire set of tests is run once for each of the 8-bit, 16-bit and 32-bit
-libraries that are enabled. If you want to run just one set of tests, call
-RunTest with either the -8, -16 or -32 option.
-
-If valgrind is installed, you can run the tests under it by putting "valgrind"
-on the RunTest command line. To run pcretest on just one or more specific test
-files, give their numbers as arguments to RunTest, for example:
-
-  RunTest 2 7 11
-
-You can also specify ranges of tests such as 3-6 or 3- (meaning 3 to the
-end), or a number preceded by ~ to exclude a test. For example:
-
-  Runtest 3-15 ~10
-
-This runs tests 3 to 15, excluding test 10, and just ~13 runs all the tests
-except test 13. Whatever order the arguments are in, the tests are always run
-in numerical order.
-
-You can also call RunTest with the single argument "list" to cause it to output
-a list of tests.
-
-The first test file can be fed directly into the perltest.pl script to check
-that Perl gives the same results. The only difference you should see is in the
-first few lines, where the Perl version is given instead of the PCRE version.
-
-The second set of tests check pcre_fullinfo(), pcre_study(),
-pcre_copy_substring(), pcre_get_substring(), pcre_get_substring_list(), error
-detection, and run-time flags that are specific to PCRE, as well as the POSIX
-wrapper API. It also uses the debugging flags to check some of the internals of
-pcre_compile().
-
-If you build PCRE with a locale setting that is not the standard C locale, the
-character tables may be different (see next paragraph). In some cases, this may
-cause failures in the second set of tests. For example, in a locale where the
-isprint() function yields TRUE for characters in the range 128-255, the use of
-[:isascii:] inside a character class defines a different set of characters, and
-this shows up in this test as a difference in the compiled code, which is being
-listed for checking. Where the comparison test output contains [\x00-\x7f] the
-test will contain [\x00-\xff], and similarly in some other cases. This is not a
-bug in PCRE.
-
-The third set of tests checks pcre_maketables(), the facility for building a
-set of character tables for a specific locale and using them instead of the
-default tables. The tests make use of the "fr_FR" (French) locale. Before
-running the test, the script checks for the presence of this locale by running
-the "locale" command. If that command fails, or if it doesn't include "fr_FR"
-in the list of available locales, the third test cannot be run, and a comment
-is output to say why. If running this test produces instances of the error
-
-  ** Failed to set locale "fr_FR"
-
-in the comparison output, it means that locale is not available on your system,
-despite being listed by "locale". This does not mean that PCRE is broken.
-
-[If you are trying to run this test on Windows, you may be able to get it to
-work by changing "fr_FR" to "french" everywhere it occurs. Alternatively, use
-RunTest.bat. The version of RunTest.bat included with PCRE 7.4 and above uses
-Windows versions of test 2. More info on using RunTest.bat is included in the
-document entitled NON-UNIX-USE.]
-
-The fourth and fifth tests check the UTF-8/16/32 support and error handling and
-internal UTF features of PCRE that are not relevant to Perl, respectively. The
-sixth and seventh tests do the same for Unicode character properties support.
-
-The eighth, ninth, and tenth tests check the pcre_dfa_exec() alternative
-matching function, in non-UTF-8/16/32 mode, UTF-8/16/32 mode, and UTF-8/16/32
-mode with Unicode property support, respectively.
-
-The eleventh test checks some internal offsets and code size features; it is
-run only when the default "link size" of 2 is set (in other cases the sizes
-change) and when Unicode property support is enabled.
-
-The twelfth test is run only when JIT support is available, and the thirteenth
-test is run only when JIT support is not available. They test some JIT-specific
-features such as information output from pcretest about JIT compilation.
-
-The fourteenth, fifteenth, and sixteenth tests are run only in 8-bit mode, and
-the seventeenth, eighteenth, and nineteenth tests are run only in 16/32-bit
-mode. These are tests that generate different output in the two modes. They are
-for general cases, UTF-8/16/32 support, and Unicode property support,
-respectively.
-
-The twentieth test is run only in 16/32-bit mode. It tests some specific
-16/32-bit features of the DFA matching engine.
-
-The twenty-first and twenty-second tests are run only in 16/32-bit mode, when
-the link size is set to 2 for the 16-bit library. They test reloading
-pre-compiled patterns.
-
-The twenty-third and twenty-fourth tests are run only in 16-bit mode. They are
-for general cases, and UTF-16 support, respectively.
-
-The twenty-fifth and twenty-sixth tests are run only in 32-bit mode. They are
-for general cases, and UTF-32 support, respectively.
-
-
-Character tables
-----------------
-
-For speed, PCRE uses four tables for manipulating and identifying characters
-whose code point values are less than 256. The final argument of the
-pcre_compile() function is a pointer to a block of memory containing the
-concatenated tables. A call to pcre_maketables() can be used to generate a set
-of tables in the current locale. If the final argument for pcre_compile() is
-passed as NULL, a set of default tables that is built into the binary is used.
-
-The source file called pcre_chartables.c contains the default set of tables. By
-default, this is created as a copy of pcre_chartables.c.dist, which contains
-tables for ASCII coding. However, if --enable-rebuild-chartables is specified
-for ./configure, a different version of pcre_chartables.c is built by the
-program dftables (compiled from dftables.c), which uses the ANSI C character
-handling functions such as isalnum(), isalpha(), isupper(), islower(), etc. to
-build the table sources. This means that the default C locale which is set for
-your system will control the contents of these default tables. You can change
-the default tables by editing pcre_chartables.c and then re-building PCRE. If
-you do this, you should take care to ensure that the file does not get
-automatically re-generated. The best way to do this is to move
-pcre_chartables.c.dist out of the way and replace it with your customized
-tables.
-
-When the dftables program is run as a result of --enable-rebuild-chartables,
-it uses the default C locale that is set on your system. It does not pay
-attention to the LC_xxx environment variables. In other words, it uses the
-system's default locale rather than whatever the compiling user happens to have
-set. If you really do want to build a source set of character tables in a
-locale that is specified by the LC_xxx variables, you can run the dftables
-program by hand with the -L option. For example:
-
-  ./dftables -L pcre_chartables.c.special
-
-The first two 256-byte tables provide lower casing and case flipping functions,
-respectively. The next table consists of three 32-byte bit maps which identify
-digits, "word" characters, and white space, respectively. These are used when
-building 32-byte bit maps that represent character classes for code points less
-than 256.
-
-The final 256-byte table has bits indicating various character types, as
-follows:
-
-    1   white space character
-    2   letter
-    4   decimal digit
-    8   hexadecimal digit
-   16   alphanumeric or '_'
-  128   regular expression metacharacter or binary zero
-
-You should not alter the set of characters that contain the 128 bit, as that
-will cause PCRE to malfunction.
-
-
-File manifest
--------------
-
-The distribution should contain the files listed below. Where a file name is
-given as pcre[16|32]_xxx it means that there are three files, one with the name
-pcre_xxx, one with the name pcre16_xx, and a third with the name pcre32_xxx.
-
-(A) Source files of the PCRE library functions and their headers:
-
-  dftables.c              auxiliary program for building pcre_chartables.c
-                          when --enable-rebuild-chartables is specified
-
-  pcre_chartables.c.dist  a default set of character tables that assume ASCII
-                          coding; used, unless --enable-rebuild-chartables is
-                          specified, by copying to pcre[16]_chartables.c
-
-  pcreposix.c                )
-  pcre[16|32]_byte_order.c   )
-  pcre[16|32]_compile.c      )
-  pcre[16|32]_config.c       )
-  pcre[16|32]_dfa_exec.c     )
-  pcre[16|32]_exec.c         )
-  pcre[16|32]_fullinfo.c     )
-  pcre[16|32]_get.c          ) sources for the functions in the library,
-  pcre[16|32]_globals.c      )   and some internal functions that they use
-  pcre[16|32]_jit_compile.c  )
-  pcre[16|32]_maketables.c   )
-  pcre[16|32]_newline.c      )
-  pcre[16|32]_refcount.c     )
-  pcre[16|32]_string_utils.c )
-  pcre[16|32]_study.c        )
-  pcre[16|32]_tables.c       )
-  pcre[16|32]_ucd.c          )
-  pcre[16|32]_version.c      )
-  pcre[16|32]_xclass.c       )
-  pcre_ord2utf8.c            )
-  pcre_valid_utf8.c          )
-  pcre16_ord2utf16.c         )
-  pcre16_utf16_utils.c       )
-  pcre16_valid_utf16.c       )
-  pcre32_utf32_utils.c       )
-  pcre32_valid_utf32.c       )
-
-  pcre[16|32]_printint.c     ) debugging function that is used by pcretest,
-                             )   and can also be #included in pcre_compile()
-
-  pcre.h.in               template for pcre.h when built by "configure"
-  pcreposix.h             header for the external POSIX wrapper API
-  pcre_internal.h         header for internal use
-  sljit/*                 16 files that make up the JIT compiler
-  ucp.h                   header for Unicode property handling
-
-  config.h.in             template for config.h, which is built by "configure"
-
-  pcrecpp.h               public header file for the C++ wrapper
-  pcrecpparg.h.in         template for another C++ header file
-  pcre_scanner.h          public header file for C++ scanner functions
-  pcrecpp.cc              )
-  pcre_scanner.cc         ) source for the C++ wrapper library
-
-  pcre_stringpiece.h.in   template for pcre_stringpiece.h, the header for the
-                            C++ stringpiece functions
-  pcre_stringpiece.cc     source for the C++ stringpiece functions
-
-(B) Source files for programs that use PCRE:
-
-  pcredemo.c              simple demonstration of coding calls to PCRE
-  pcregrep.c              source of a grep utility that uses PCRE
-  pcretest.c              comprehensive test program
-
-(C) Auxiliary files:
-
-  132html                 script to turn "man" pages into HTML
-  AUTHORS                 information about the author of PCRE
-  ChangeLog               log of changes to the code
-  CleanTxt                script to clean nroff output for txt man pages
-  Detrail                 script to remove trailing spaces
-  HACKING                 some notes about the internals of PCRE
-  INSTALL                 generic installation instructions
-  LICENCE                 conditions for the use of PCRE
-  COPYING                 the same, using GNU's standard name
-  Makefile.in             ) template for Unix Makefile, which is built by
-                          )   "configure"
-  Makefile.am             ) the automake input that was used to create
-                          )   Makefile.in
-  NEWS                    important changes in this release
-  NON-UNIX-USE            the previous name for NON-AUTOTOOLS-BUILD
-  NON-AUTOTOOLS-BUILD     notes on building PCRE without using autotools
-  PrepareRelease          script to make preparations for "make dist"
-  README                  this file
-  RunTest                 a Unix shell script for running tests
-  RunGrepTest             a Unix shell script for pcregrep tests
-  aclocal.m4              m4 macros (generated by "aclocal")
-  config.guess            ) files used by libtool,
-  config.sub              )   used only when building a shared library
-  configure               a configuring shell script (built by autoconf)
-  configure.ac            ) the autoconf input that was used to build
-                          )   "configure" and config.h
-  depcomp                 ) script to find program dependencies, generated by
-                          )   automake
-  doc/*.3                 man page sources for PCRE
-  doc/*.1                 man page sources for pcregrep and pcretest
-  doc/index.html.src      the base HTML page
-  doc/html/*              HTML documentation
-  doc/pcre.txt            plain text version of the man pages
-  doc/pcretest.txt        plain text documentation of test program
-  doc/perltest.txt        plain text documentation of Perl test program
-  install-sh              a shell script for installing files
-  libpcre16.pc.in         template for libpcre16.pc for pkg-config
-  libpcre32.pc.in         template for libpcre32.pc for pkg-config
-  libpcre.pc.in           template for libpcre.pc for pkg-config
-  libpcreposix.pc.in      template for libpcreposix.pc for pkg-config
-  libpcrecpp.pc.in        template for libpcrecpp.pc for pkg-config
-  ltmain.sh               file used to build a libtool script
-  missing                 ) common stub for a few missing GNU programs while
-                          )   installing, generated by automake
-  mkinstalldirs           script for making install directories
-  perltest.pl             Perl test program
-  pcre-config.in          source of script which retains PCRE information
-  pcre_jit_test.c         test program for the JIT compiler
-  pcrecpp_unittest.cc          )
-  pcre_scanner_unittest.cc     ) test programs for the C++ wrapper
-  pcre_stringpiece_unittest.cc )
-  testdata/testinput*     test data for main library tests
-  testdata/testoutput*    expected test results
-  testdata/grep*          input and output for pcregrep tests
-  testdata/*              other supporting test files
-
-(D) Auxiliary files for cmake support
-
-  cmake/COPYING-CMAKE-SCRIPTS
-  cmake/FindPackageHandleStandardArgs.cmake
-  cmake/FindEditline.cmake
-  cmake/FindReadline.cmake
-  CMakeLists.txt
-  config-cmake.h.in
-
-(E) Auxiliary files for VPASCAL
-
-  makevp.bat
-  makevp_c.txt
-  makevp_l.txt
-  pcregexp.pas
-
-(F) Auxiliary files for building PCRE "by hand"
-
-  pcre.h.generic          ) a version of the public PCRE header file
-                          )   for use in non-"configure" environments
-  config.h.generic        ) a version of config.h for use in non-"configure"
-                          )   environments
-
-(F) Miscellaneous
-
-  RunTest.bat            a script for running tests under Windows
-
-Philip Hazel
-Email local part: ph10
-Email domain: cam.ac.uk
-Last updated: 10 February 2015
diff --git a/README-GIT-REGEX b/README-GIT-REGEX
new file mode 100644
index 00000000..c534bc22
--- /dev/null
+++ b/README-GIT-REGEX
@@ -0,0 +1,102 @@
+Using "pcreposix" With Git
+==========================
+
+Having another tl;dr moment?  Skip to the "Making Git Use pcreposix"
+section at the end.
+
+When building Git, if the `NO_REGEX` option has been set (to anything)
+the bundled "GNU C Library" regex files will be built and included in
+the build.
+
+Even if you did not set `NO_REGEX` explicitly, it's set automatically
+for many platforms and forced on always for `Darwin` platforms (even if
+you set it to empty in a `config.mak` file) so you may have the bundled
+regex implementation in your Git build and not even realize it.
+
+A Git using the bundled glibc regex implementation suffers from perniciously
+pathological performance problems peculiar to glibc's regex implementation.
+
+See the `README.txt` file for an example of a regex that causes problems
+when using the bundled glibc regex implementation.
+
+
+You're Using It And Maybe You Don't Even Know
+---------------------------------------------
+
+You may have tried to use an alternative regex implementation only to have
+the Git build complain and tell you to set `NO_REGEX`.  Since Git v2.10.1
+Git requires support for the BSD extension `REG_STARTEND` option when
+calling the `regexec` function.
+
+The bundled glibc regex provides this (poorly though, the only part of the
+`REG_STARTEND` emulation that works properly compared to the BSD original
+happens to be the single part that Git needs to work).
+
+You may think you're unaffected because your platform's regex works fine
+and provides `REG_STARTEND`.  But if you happen to be running an older
+Darwin system with a perfectly fine regex, since Git v1.8.3.3 you've also
+been silently forced onto the bundled glibc even if you have explicitly
+set `NO_REGEX=` in your own `config.mak` file.
+
+Git's `config.mak.uname` file automatically sets `NO_REGEX` for many
+systems, some of which are quite popular.  So there's a fair chance you're
+using the bundled version anyway and even if you're not, if your system
+uses glibc you're ending up with just a newer version of the same code.
+
+
+Git Accepted Alternative
+------------------------
+
+Git needs BREs (Basic Regular Expressions) and EREs (Extended Regular
+Expressions) to work and the POSIX-specified `REG_NEWLINE` option must work
+as required by POSIX and finally `REG_STARTEND` must work at least enough
+to prevent reading any bytes past the "end" of the `REG_STARTEND` setting.
+
+The combination of the fully POSIX-compliant `REG_NEWLINE` behavior (when
+it's set, something like "[^a]" does NOT match a newline) together with
+the `REG_STARTEND` requirement seems to have knocked out an awful lot of
+alternative regex implementations.
+
+But never fear, the bundled version is here.
+
+See the `README.txt` file.  You don't want the regex implementation bundled
+with Git.  Too bad there's no `NO_REGEX = AnythingButGlibc` option.
+
+
+Making Git Use pcreposix
+------------------------
+
+Are you still having a tl;dr moment?  Then go grab the `config.mak` file in
+this repository now and read it and use it.
+
+The unmodified "pcreposix" library does not work with Git.
+
+The new "pcreposix" library provided by the enhancements in this repository
+does.
+
+It should be as simple as setting `NO_REGEX=` in your own custom `config.mak`
+and then adding `-I $includedir/pcreposix` and `-L $libdir -l pcreposix -l pcre`
+in the right places.
+
+And that will work for all platforms except `Darwin`.  Because the setting
+of `NO_REGEX = YesPlease` is incorrectly done in the `Makefile` rather than
+the `config.mak.uname` file for the `Darwin` platform only, additional
+contortions are required to get a Git build on `Darwin` to use the new
+"pcreposix" library in place of the bundled regex library.
+
+Add the contents of the contents of the `config.mak` file in this repository
+to the end of your own (creating it if you don't have one already) in the
+top-level of the Git distribution you wish to build.
+
+Adjust the `PCREPOSIXDIR` and optionally `PCREPOSIXINC` and/or `PCREPOSIXLIB`
+settings as required to reflect the location of new pcreposix and pcre
+libraries built to include the "pcreposix-compat" enhancements.
+
+Please note that prior to Git v2.11.1, the t7810 test relied on some undefined
+behavior when testing a few of the grep patterns.  Most of this was corrected
+in Git version v2.11.1, but a few remain that can result in spurious test
+failures.  There is a patch in the `gitpatches` subdirectory that can be
+applied to v2.11.1 to eliminate the spurious failure when using the
+pcreposix-compat library as a regex.h substitute.  Git versions prior to
+v2.11.1 will experience more spurious test failures from the t7810-grep test
+which can also safely be ignored.
diff --git a/README-PCRE b/README-PCRE
new file mode 100644
index 00000000..4887ebf3
--- /dev/null
+++ b/README-PCRE
@@ -0,0 +1,1002 @@
+README file for PCRE (Perl-compatible regular expression library)
+-----------------------------------------------------------------
+
+NOTE: This set of files relates to PCRE releases that use the original API,
+with library names libpcre, libpcre16, and libpcre32. January 2015 saw the
+first release of a new API, known as PCRE2, with release numbers starting at
+10.00 and library names libpcre2-8, libpcre2-16, and libpcre2-32. The old
+libraries (now called PCRE1) are still being maintained for bug fixes, but
+there will be no new development. New projects are advised to use the new PCRE2
+libraries.
+
+
+The latest release of PCRE1 is always available in three alternative formats
+from:
+
+  ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-xxx.tar.gz
+  ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-xxx.tar.bz2
+  ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-xxx.zip
+
+There is a mailing list for discussion about the development of PCRE at
+pcre-dev@exim.org. You can access the archives and subscribe or manage your
+subscription here:
+
+   https://lists.exim.org/mailman/listinfo/pcre-dev
+
+Please read the NEWS file if you are upgrading from a previous release.
+The contents of this README file are:
+
+  The PCRE APIs
+  Documentation for PCRE
+  Contributions by users of PCRE
+  Building PCRE on non-Unix-like systems
+  Building PCRE without using autotools
+  Building PCRE using autotools
+  Retrieving configuration information
+  Shared libraries
+  Cross-compiling using autotools
+  Using HP's ANSI C++ compiler (aCC)
+  Compiling in Tru64 using native compilers
+  Using Sun's compilers for Solaris
+  Using PCRE from MySQL
+  Making new tarballs
+  Testing PCRE
+  Character tables
+  File manifest
+
+
+The PCRE APIs
+-------------
+
+PCRE is written in C, and it has its own API. There are three sets of
+functions, one for the 8-bit library, which processes strings of bytes, one for
+the 16-bit library, which processes strings of 16-bit values, and one for the
+32-bit library, which processes strings of 32-bit values. The distribution also
+includes a set of C++ wrapper functions (see the pcrecpp man page for details),
+courtesy of Google Inc., which can be used to call the 8-bit PCRE library from
+C++. Other C++ wrappers have been created from time to time. See, for example:
+https://github.com/YasserAsmi/regexp, which aims to be simple and similar in
+style to the C API.
+
+The distribution also contains a set of C wrapper functions (again, just for
+the 8-bit library) that are based on the POSIX regular expression API (see the
+pcreposix man page). These end up in the library called libpcreposix. Note that
+this just provides a POSIX calling interface to PCRE; the regular expressions
+themselves still follow Perl syntax and semantics. The POSIX API is restricted,
+and does not give full access to all of PCRE's facilities.
+
+The header file for the POSIX-style functions is called pcreposix.h. The
+official POSIX name is regex.h, but I did not want to risk possible problems
+with existing files of that name by distributing it that way. To use PCRE with
+an existing program that uses the POSIX API, pcreposix.h will have to be
+renamed or pointed at by a link.
+
+If you are using the POSIX interface to PCRE and there is already a POSIX regex
+library installed on your system, as well as worrying about the regex.h header
+file (as mentioned above), you must also take care when linking programs to
+ensure that they link with PCRE's libpcreposix library. Otherwise they may pick
+up the POSIX functions of the same name from the other library.
+
+One way of avoiding this confusion is to compile PCRE with the addition of
+-Dregcomp=PCREregcomp (and similarly for the other POSIX functions) to the
+compiler flags (CFLAGS if you are using "configure" -- see below). This has the
+effect of renaming the functions so that the names no longer clash. Of course,
+you have to do the same thing for your applications, or write them using the
+new names.
+
+
+Documentation for PCRE
+----------------------
+
+If you install PCRE in the normal way on a Unix-like system, you will end up
+with a set of man pages whose names all start with "pcre". The one that is just
+called "pcre" lists all the others. In addition to these man pages, the PCRE
+documentation is supplied in two other forms:
+
+  1. There are files called doc/pcre.txt, doc/pcregrep.txt, and
+     doc/pcretest.txt in the source distribution. The first of these is a
+     concatenation of the text forms of all the section 3 man pages except
+     the listing of pcredemo.c and those that summarize individual functions.
+     The other two are the text forms of the section 1 man pages for the
+     pcregrep and pcretest commands. These text forms are provided for ease of
+     scanning with text editors or similar tools. They are installed in
+     <prefix>/share/doc/pcre, where <prefix> is the installation prefix
+     (defaulting to /usr/local).
+
+  2. A set of files containing all the documentation in HTML form, hyperlinked
+     in various ways, and rooted in a file called index.html, is distributed in
+     doc/html and installed in <prefix>/share/doc/pcre/html.
+
+Users of PCRE have contributed files containing the documentation for various
+releases in CHM format. These can be found in the Contrib directory of the FTP
+site (see next section).
+
+
+Contributions by users of PCRE
+------------------------------
+
+You can find contributions from PCRE users in the directory
+
+  ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/Contrib
+
+There is a README file giving brief descriptions of what they are. Some are
+complete in themselves; others are pointers to URLs containing relevant files.
+Some of this material is likely to be well out-of-date. Several of the earlier
+contributions provided support for compiling PCRE on various flavours of
+Windows (I myself do not use Windows). Nowadays there is more Windows support
+in the standard distribution, so these contibutions have been archived.
+
+A PCRE user maintains downloadable Windows binaries of the pcregrep and
+pcretest programs here:
+
+  http://www.rexegg.com/pcregrep-pcretest.html
+
+
+Building PCRE on non-Unix-like systems
+--------------------------------------
+
+For a non-Unix-like system, please read the comments in the file
+NON-AUTOTOOLS-BUILD, though if your system supports the use of "configure" and
+"make" you may be able to build PCRE using autotools in the same way as for
+many Unix-like systems.
+
+PCRE can also be configured using the GUI facility provided by CMake's
+cmake-gui command. This creates Makefiles, solution files, etc. The file
+NON-AUTOTOOLS-BUILD has information about CMake.
+
+PCRE has been compiled on many different operating systems. It should be
+straightforward to build PCRE on any system that has a Standard C compiler and
+library, because it uses only Standard C functions.
+
+
+Building PCRE without using autotools
+-------------------------------------
+
+The use of autotools (in particular, libtool) is problematic in some
+environments, even some that are Unix or Unix-like. See the NON-AUTOTOOLS-BUILD
+file for ways of building PCRE without using autotools.
+
+
+Building PCRE using autotools
+-----------------------------
+
+If you are using HP's ANSI C++ compiler (aCC), please see the special note
+in the section entitled "Using HP's ANSI C++ compiler (aCC)" below.
+
+The following instructions assume the use of the widely used "configure; make;
+make install" (autotools) process.
+
+To build PCRE on system that supports autotools, first run the "configure"
+command from the PCRE distribution directory, with your current directory set
+to the directory where you want the files to be created. This command is a
+standard GNU "autoconf" configuration script, for which generic instructions
+are supplied in the file INSTALL.
+
+Most commonly, people build PCRE within its own distribution directory, and in
+this case, on many systems, just running "./configure" is sufficient. However,
+the usual methods of changing standard defaults are available. For example:
+
+CFLAGS='-O2 -Wall' ./configure --prefix=/opt/local
+
+This command specifies that the C compiler should be run with the flags '-O2
+-Wall' instead of the default, and that "make install" should install PCRE
+under /opt/local instead of the default /usr/local.
+
+If you want to build in a different directory, just run "configure" with that
+directory as current. For example, suppose you have unpacked the PCRE source
+into /source/pcre/pcre-xxx, but you want to build it in /build/pcre/pcre-xxx:
+
+cd /build/pcre/pcre-xxx
+/source/pcre/pcre-xxx/configure
+
+PCRE is written in C and is normally compiled as a C library. However, it is
+possible to build it as a C++ library, though the provided building apparatus
+does not have any features to support this.
+
+There are some optional features that can be included or omitted from the PCRE
+library. They are also documented in the pcrebuild man page.
+
+. By default, both shared and static libraries are built. You can change this
+  by adding one of these options to the "configure" command:
+
+  --disable-shared
+  --disable-static
+
+  (See also "Shared libraries on Unix-like systems" below.)
+
+. By default, only the 8-bit library is built. If you add --enable-pcre16 to
+  the "configure" command, the 16-bit library is also built. If you add
+  --enable-pcre32 to the "configure" command, the 32-bit library is also built.
+  If you want only the 16-bit or 32-bit library, use --disable-pcre8 to disable
+  building the 8-bit library.
+
+. If you are building the 8-bit library and want to suppress the building of
+  the C++ wrapper library, you can add --disable-cpp to the "configure"
+  command. Otherwise, when "configure" is run without --disable-pcre8, it will
+  try to find a C++ compiler and C++ header files, and if it succeeds, it will
+  try to build the C++ wrapper.
+
+. If you want to include support for just-in-time compiling, which can give
+  large performance improvements on certain platforms, add --enable-jit to the
+  "configure" command. This support is available only for certain hardware
+  architectures. If you try to enable it on an unsupported architecture, there
+  will be a compile time error.
+
+. When JIT support is enabled, pcregrep automatically makes use of it, unless
+  you add --disable-pcregrep-jit to the "configure" command.
+
+. If you want to make use of the support for UTF-8 Unicode character strings in
+  the 8-bit library, or UTF-16 Unicode character strings in the 16-bit library,
+  or UTF-32 Unicode character strings in the 32-bit library, you must add
+  --enable-utf to the "configure" command. Without it, the code for handling
+  UTF-8, UTF-16 and UTF-8 is not included in the relevant library. Even
+  when --enable-utf is included, the use of a UTF encoding still has to be
+  enabled by an option at run time. When PCRE is compiled with this option, its
+  input can only either be ASCII or UTF-8/16/32, even when running on EBCDIC
+  platforms. It is not possible to use both --enable-utf and --enable-ebcdic at
+  the same time.
+
+. There are no separate options for enabling UTF-8, UTF-16 and UTF-32
+  independently because that would allow ridiculous settings such as requesting
+  UTF-16 support while building only the 8-bit library. However, the option
+  --enable-utf8 is retained for backwards compatibility with earlier releases
+  that did not support 16-bit or 32-bit character strings. It is synonymous with
+  --enable-utf. It is not possible to configure one library with UTF support
+  and the other without in the same configuration.
+
+. If, in addition to support for UTF-8/16/32 character strings, you want to
+  include support for the \P, \p, and \X sequences that recognize Unicode
+  character properties, you must add --enable-unicode-properties to the
+  "configure" command. This adds about 30K to the size of the library (in the
+  form of a property table); only the basic two-letter properties such as Lu
+  are supported.
+
+. You can build PCRE to recognize either CR or LF or the sequence CRLF or any
+  of the preceding, or any of the Unicode newline sequences as indicating the
+  end of a line. Whatever you specify at build time is the default; the caller
+  of PCRE can change the selection at run time. The default newline indicator
+  is a single LF character (the Unix standard). You can specify the default
+  newline indicator by adding --enable-newline-is-cr or --enable-newline-is-lf
+  or --enable-newline-is-crlf or --enable-newline-is-anycrlf or
+  --enable-newline-is-any to the "configure" command, respectively.
+
+  If you specify --enable-newline-is-cr or --enable-newline-is-crlf, some of
+  the standard tests will fail, because the lines in the test files end with
+  LF. Even if the files are edited to change the line endings, there are likely
+  to be some failures. With --enable-newline-is-anycrlf or
+  --enable-newline-is-any, many tests should succeed, but there may be some
+  failures.
+
+. By default, the sequence \R in a pattern matches any Unicode line ending
+  sequence. This is independent of the option specifying what PCRE considers to
+  be the end of a line (see above). However, the caller of PCRE can restrict \R
+  to match only CR, LF, or CRLF. You can make this the default by adding
+  --enable-bsr-anycrlf to the "configure" command (bsr = "backslash R").
+
+. When called via the POSIX interface, PCRE uses malloc() to get additional
+  storage for processing capturing parentheses if there are more than 10 of
+  them in a pattern. You can increase this threshold by setting, for example,
+
+  --with-posix-malloc-threshold=20
+
+  on the "configure" command.
+
+. PCRE has a counter that limits the depth of nesting of parentheses in a
+  pattern. This limits the amount of system stack that a pattern uses when it
+  is compiled. The default is 250, but you can change it by setting, for
+  example,
+
+  --with-parens-nest-limit=500
+
+. PCRE has a counter that can be set to limit the amount of resources it uses
+  when matching a pattern. If the limit is exceeded during a match, the match
+  fails. The default is ten million. You can change the default by setting, for
+  example,
+
+  --with-match-limit=500000
+
+  on the "configure" command. This is just the default; individual calls to
+  pcre_exec() can supply their own value. There is more discussion on the
+  pcreapi man page.
+
+. There is a separate counter that limits the depth of recursive function calls
+  during a matching process. This also has a default of ten million, which is
+  essentially "unlimited". You can change the default by setting, for example,
+
+  --with-match-limit-recursion=500000
+
+  Recursive function calls use up the runtime stack; running out of stack can
+  cause programs to crash in strange ways. There is a discussion about stack
+  sizes in the pcrestack man page.
+
+. The default maximum compiled pattern size is around 64K. You can increase
+  this by adding --with-link-size=3 to the "configure" command. In the 8-bit
+  library, PCRE then uses three bytes instead of two for offsets to different
+  parts of the compiled pattern. In the 16-bit library, --with-link-size=3 is
+  the same as --with-link-size=4, which (in both libraries) uses four-byte
+  offsets. Increasing the internal link size reduces performance. In the 32-bit
+  library, the only supported link size is 4.
+
+. You can build PCRE so that its internal match() function that is called from
+  pcre_exec() does not call itself recursively. Instead, it uses memory blocks
+  obtained from the heap via the special functions pcre_stack_malloc() and
+  pcre_stack_free() to save data that would otherwise be saved on the stack. To
+  build PCRE like this, use
+
+  --disable-stack-for-recursion
+
+  on the "configure" command. PCRE runs more slowly in this mode, but it may be
+  necessary in environments with limited stack sizes. This applies only to the
+  normal execution of the pcre_exec() function; if JIT support is being
+  successfully used, it is not relevant. Equally, it does not apply to
+  pcre_dfa_exec(), which does not use deeply nested recursion. There is a
+  discussion about stack sizes in the pcrestack man page.
+
+. For speed, PCRE uses four tables for manipulating and identifying characters
+  whose code point values are less than 256. By default, it uses a set of
+  tables for ASCII encoding that is part of the distribution. If you specify
+
+  --enable-rebuild-chartables
+
+  a program called dftables is compiled and run in the default C locale when
+  you obey "make". It builds a source file called pcre_chartables.c. If you do
+  not specify this option, pcre_chartables.c is created as a copy of
+  pcre_chartables.c.dist. See "Character tables" below for further information.
+
+. It is possible to compile PCRE for use on systems that use EBCDIC as their
+  character code (as opposed to ASCII/Unicode) by specifying
+
+  --enable-ebcdic
+
+  This automatically implies --enable-rebuild-chartables (see above). However,
+  when PCRE is built this way, it always operates in EBCDIC. It cannot support
+  both EBCDIC and UTF-8/16/32. There is a second option, --enable-ebcdic-nl25,
+  which specifies that the code value for the EBCDIC NL character is 0x25
+  instead of the default 0x15.
+
+. In environments where valgrind is installed, if you specify
+
+  --enable-valgrind
+
+  PCRE will use valgrind annotations to mark certain memory regions as
+  unaddressable. This allows it to detect invalid memory accesses, and is
+  mostly useful for debugging PCRE itself.
+
+. In environments where the gcc compiler is used and lcov version 1.6 or above
+  is installed, if you specify
+
+  --enable-coverage
+
+  the build process implements a code coverage report for the test suite. The
+  report is generated by running "make coverage". If ccache is installed on
+  your system, it must be disabled when building PCRE for coverage reporting.
+  You can do this by setting the environment variable CCACHE_DISABLE=1 before
+  running "make" to build PCRE. There is more information about coverage
+  reporting in the "pcrebuild" documentation.
+
+. The pcregrep program currently supports only 8-bit data files, and so
+  requires the 8-bit PCRE library. It is possible to compile pcregrep to use
+  libz and/or libbz2, in order to read .gz and .bz2 files (respectively), by
+  specifying one or both of
+
+  --enable-pcregrep-libz
+  --enable-pcregrep-libbz2
+
+  Of course, the relevant libraries must be installed on your system.
+
+. The default size (in bytes) of the internal buffer used by pcregrep can be
+  set by, for example:
+
+  --with-pcregrep-bufsize=51200
+
+  The value must be a plain integer. The default is 20480.
+
+. It is possible to compile pcretest so that it links with the libreadline
+  or libedit libraries, by specifying, respectively,
+
+  --enable-pcretest-libreadline or --enable-pcretest-libedit
+
+  If this is done, when pcretest's input is from a terminal, it reads it using
+  the readline() function. This provides line-editing and history facilities.
+  Note that libreadline is GPL-licenced, so if you distribute a binary of
+  pcretest linked in this way, there may be licensing issues. These can be
+  avoided by linking with libedit (which has a BSD licence) instead.
+
+  Enabling libreadline causes the -lreadline option to be added to the pcretest
+  build. In many operating environments with a sytem-installed readline
+  library this is sufficient. However, in some environments (e.g. if an
+  unmodified distribution version of readline is in use), it may be necessary
+  to specify something like LIBS="-lncurses" as well. This is because, to quote
+  the readline INSTALL, "Readline uses the termcap functions, but does not link
+  with the termcap or curses library itself, allowing applications which link
+  with readline the to choose an appropriate library." If you get error
+  messages about missing functions tgetstr, tgetent, tputs, tgetflag, or tgoto,
+  this is the problem, and linking with the ncurses library should fix it.
+
+The "configure" script builds the following files for the basic C library:
+
+. Makefile             the makefile that builds the library
+. config.h             build-time configuration options for the library
+. pcre.h               the public PCRE header file
+. pcre-config          script that shows the building settings such as CFLAGS
+                         that were set for "configure"
+. libpcre.pc         ) data for the pkg-config command
+. libpcre16.pc       )
+. libpcre32.pc       )
+. libpcreposix.pc    )
+. libtool              script that builds shared and/or static libraries
+
+Versions of config.h and pcre.h are distributed in the PCRE tarballs under the
+names config.h.generic and pcre.h.generic. These are provided for those who
+have to built PCRE without using "configure" or CMake. If you use "configure"
+or CMake, the .generic versions are not used.
+
+When building the 8-bit library, if a C++ compiler is found, the following
+files are also built:
+
+. libpcrecpp.pc        data for the pkg-config command
+. pcrecpparg.h         header file for calling PCRE via the C++ wrapper
+. pcre_stringpiece.h   header for the C++ "stringpiece" functions
+
+The "configure" script also creates config.status, which is an executable
+script that can be run to recreate the configuration, and config.log, which
+contains compiler output from tests that "configure" runs.
+
+Once "configure" has run, you can run "make". This builds the the libraries
+libpcre, libpcre16 and/or libpcre32, and a test program called pcretest. If you
+enabled JIT support with --enable-jit, a test program called pcre_jit_test is
+built as well.
+
+If the 8-bit library is built, libpcreposix and the pcregrep command are also
+built, and if a C++ compiler was found on your system, and you did not disable
+it with --disable-cpp, "make" builds the C++ wrapper library, which is called
+libpcrecpp, as well as some test programs called pcrecpp_unittest,
+pcre_scanner_unittest, and pcre_stringpiece_unittest.
+
+The command "make check" runs all the appropriate tests. Details of the PCRE
+tests are given below in a separate section of this document.
+
+You can use "make install" to install PCRE into live directories on your
+system. The following are installed (file names are all relative to the
+<prefix> that is set when "configure" is run):
+
+  Commands (bin):
+    pcretest
+    pcregrep (if 8-bit support is enabled)
+    pcre-config
+
+  Libraries (lib):
+    libpcre16     (if 16-bit support is enabled)
+    libpcre32     (if 32-bit support is enabled)
+    libpcre       (if 8-bit support is enabled)
+    libpcreposix  (if 8-bit support is enabled)
+    libpcrecpp    (if 8-bit and C++ support is enabled)
+
+  Configuration information (lib/pkgconfig):
+    libpcre16.pc
+    libpcre32.pc
+    libpcre.pc
+    libpcreposix.pc
+    libpcrecpp.pc (if C++ support is enabled)
+
+  Header files (include):
+    pcre.h
+    pcreposix.h
+    pcre_scanner.h      )
+    pcre_stringpiece.h  ) if C++ support is enabled
+    pcrecpp.h           )
+    pcrecpparg.h        )
+
+  Man pages (share/man/man{1,3}):
+    pcregrep.1
+    pcretest.1
+    pcre-config.1
+    pcre.3
+    pcre*.3 (lots more pages, all starting "pcre")
+
+  HTML documentation (share/doc/pcre/html):
+    index.html
+    *.html (lots more pages, hyperlinked from index.html)
+
+  Text file documentation (share/doc/pcre):
+    AUTHORS
+    COPYING
+    ChangeLog
+    LICENCE
+    NEWS
+    README
+    pcre.txt         (a concatenation of the man(3) pages)
+    pcretest.txt     the pcretest man page
+    pcregrep.txt     the pcregrep man page
+    pcre-config.txt  the pcre-config man page
+
+If you want to remove PCRE from your system, you can run "make uninstall".
+This removes all the files that "make install" installed. However, it does not
+remove any directories, because these are often shared with other programs.
+
+
+Retrieving configuration information
+------------------------------------
+
+Running "make install" installs the command pcre-config, which can be used to
+recall information about the PCRE configuration and installation. For example:
+
+  pcre-config --version
+
+prints the version number, and
+
+  pcre-config --libs
+
+outputs information about where the library is installed. This command can be
+included in makefiles for programs that use PCRE, saving the programmer from
+having to remember too many details.
+
+The pkg-config command is another system for saving and retrieving information
+about installed libraries. Instead of separate commands for each library, a
+single command is used. For example:
+
+  pkg-config --cflags pcre
+
+The data is held in *.pc files that are installed in a directory called
+<prefix>/lib/pkgconfig.
+
+
+Shared libraries
+----------------
+
+The default distribution builds PCRE as shared libraries and static libraries,
+as long as the operating system supports shared libraries. Shared library
+support relies on the "libtool" script which is built as part of the
+"configure" process.
+
+The libtool script is used to compile and link both shared and static
+libraries. They are placed in a subdirectory called .libs when they are newly
+built. The programs pcretest and pcregrep are built to use these uninstalled
+libraries (by means of wrapper scripts in the case of shared libraries). When
+you use "make install" to install shared libraries, pcregrep and pcretest are
+automatically re-built to use the newly installed shared libraries before being
+installed themselves. However, the versions left in the build directory still
+use the uninstalled libraries.
+
+To build PCRE using static libraries only you must use --disable-shared when
+configuring it. For example:
+
+./configure --prefix=/usr/gnu --disable-shared
+
+Then run "make" in the usual way. Similarly, you can use --disable-static to
+build only shared libraries.
+
+
+Cross-compiling using autotools
+-------------------------------
+
+You can specify CC and CFLAGS in the normal way to the "configure" command, in
+order to cross-compile PCRE for some other host. However, you should NOT
+specify --enable-rebuild-chartables, because if you do, the dftables.c source
+file is compiled and run on the local host, in order to generate the inbuilt
+character tables (the pcre_chartables.c file). This will probably not work,
+because dftables.c needs to be compiled with the local compiler, not the cross
+compiler.
+
+When --enable-rebuild-chartables is not specified, pcre_chartables.c is created
+by making a copy of pcre_chartables.c.dist, which is a default set of tables
+that assumes ASCII code. Cross-compiling with the default tables should not be
+a problem.
+
+If you need to modify the character tables when cross-compiling, you should
+move pcre_chartables.c.dist out of the way, then compile dftables.c by hand and
+run it on the local host to make a new version of pcre_chartables.c.dist.
+Then when you cross-compile PCRE this new version of the tables will be used.
+
+
+Using HP's ANSI C++ compiler (aCC)
+----------------------------------
+
+Unless C++ support is disabled by specifying the "--disable-cpp" option of the
+"configure" script, you must include the "-AA" option in the CXXFLAGS
+environment variable in order for the C++ components to compile correctly.
+
+Also, note that the aCC compiler on PA-RISC platforms may have a defect whereby
+needed libraries fail to get included when specifying the "-AA" compiler
+option. If you experience unresolved symbols when linking the C++ programs,
+use the workaround of specifying the following environment variable prior to
+running the "configure" script:
+
+  CXXLDFLAGS="-lstd_v2 -lCsup_v2"
+
+
+Compiling in Tru64 using native compilers
+-----------------------------------------
+
+The following error may occur when compiling with native compilers in the Tru64
+operating system:
+
+  CXX    libpcrecpp_la-pcrecpp.lo
+cxx: Error: /usr/lib/cmplrs/cxx/V7.1-006/include/cxx/iosfwd, line 58: #error
+          directive: "cannot include iosfwd -- define __USE_STD_IOSTREAM to
+          override default - see section 7.1.2 of the C++ Using Guide"
+#error "cannot include iosfwd -- define __USE_STD_IOSTREAM to override default
+- see section 7.1.2 of the C++ Using Guide"
+
+This may be followed by other errors, complaining that 'namespace "std" has no
+member'. The solution to this is to add the line
+
+#define __USE_STD_IOSTREAM 1
+
+to the config.h file.
+
+
+Using Sun's compilers for Solaris
+---------------------------------
+
+A user reports that the following configurations work on Solaris 9 sparcv9 and
+Solaris 9 x86 (32-bit):
+
+  Solaris 9 sparcv9: ./configure --disable-cpp CC=/bin/cc CFLAGS="-m64 -g"
+  Solaris 9 x86:     ./configure --disable-cpp CC=/bin/cc CFLAGS="-g"
+
+
+Using PCRE from MySQL
+---------------------
+
+On systems where both PCRE and MySQL are installed, it is possible to make use
+of PCRE from within MySQL, as an alternative to the built-in pattern matching.
+There is a web page that tells you how to do this:
+
+  http://www.mysqludf.org/lib_mysqludf_preg/index.php
+
+
+Making new tarballs
+-------------------
+
+The command "make dist" creates three PCRE tarballs, in tar.gz, tar.bz2, and
+zip formats. The command "make distcheck" does the same, but then does a trial
+build of the new distribution to ensure that it works.
+
+If you have modified any of the man page sources in the doc directory, you
+should first run the PrepareRelease script before making a distribution. This
+script creates the .txt and HTML forms of the documentation from the man pages.
+
+
+Testing PCRE
+------------
+
+To test the basic PCRE library on a Unix-like system, run the RunTest script.
+There is another script called RunGrepTest that tests the options of the
+pcregrep command. If the C++ wrapper library is built, three test programs
+called pcrecpp_unittest, pcre_scanner_unittest, and pcre_stringpiece_unittest
+are also built. When JIT support is enabled, another test program called
+pcre_jit_test is built.
+
+Both the scripts and all the program tests are run if you obey "make check" or
+"make test". For other environments, see the instructions in
+NON-AUTOTOOLS-BUILD.
+
+The RunTest script runs the pcretest test program (which is documented in its
+own man page) on each of the relevant testinput files in the testdata
+directory, and compares the output with the contents of the corresponding
+testoutput files. RunTest uses a file called testtry to hold the main output
+from pcretest. Other files whose names begin with "test" are used as working
+files in some tests.
+
+Some tests are relevant only when certain build-time options were selected. For
+example, the tests for UTF-8/16/32 support are run only if --enable-utf was
+used. RunTest outputs a comment when it skips a test.
+
+Many of the tests that are not skipped are run up to three times. The second
+run forces pcre_study() to be called for all patterns except for a few in some
+tests that are marked "never study" (see the pcretest program for how this is
+done). If JIT support is available, the non-DFA tests are run a third time,
+this time with a forced pcre_study() with the PCRE_STUDY_JIT_COMPILE option.
+This testing can be suppressed by putting "nojit" on the RunTest command line.
+
+The entire set of tests is run once for each of the 8-bit, 16-bit and 32-bit
+libraries that are enabled. If you want to run just one set of tests, call
+RunTest with either the -8, -16 or -32 option.
+
+If valgrind is installed, you can run the tests under it by putting "valgrind"
+on the RunTest command line. To run pcretest on just one or more specific test
+files, give their numbers as arguments to RunTest, for example:
+
+  RunTest 2 7 11
+
+You can also specify ranges of tests such as 3-6 or 3- (meaning 3 to the
+end), or a number preceded by ~ to exclude a test. For example:
+
+  Runtest 3-15 ~10
+
+This runs tests 3 to 15, excluding test 10, and just ~13 runs all the tests
+except test 13. Whatever order the arguments are in, the tests are always run
+in numerical order.
+
+You can also call RunTest with the single argument "list" to cause it to output
+a list of tests.
+
+The first test file can be fed directly into the perltest.pl script to check
+that Perl gives the same results. The only difference you should see is in the
+first few lines, where the Perl version is given instead of the PCRE version.
+
+The second set of tests check pcre_fullinfo(), pcre_study(),
+pcre_copy_substring(), pcre_get_substring(), pcre_get_substring_list(), error
+detection, and run-time flags that are specific to PCRE, as well as the POSIX
+wrapper API. It also uses the debugging flags to check some of the internals of
+pcre_compile().
+
+If you build PCRE with a locale setting that is not the standard C locale, the
+character tables may be different (see next paragraph). In some cases, this may
+cause failures in the second set of tests. For example, in a locale where the
+isprint() function yields TRUE for characters in the range 128-255, the use of
+[:isascii:] inside a character class defines a different set of characters, and
+this shows up in this test as a difference in the compiled code, which is being
+listed for checking. Where the comparison test output contains [\x00-\x7f] the
+test will contain [\x00-\xff], and similarly in some other cases. This is not a
+bug in PCRE.
+
+The third set of tests checks pcre_maketables(), the facility for building a
+set of character tables for a specific locale and using them instead of the
+default tables. The tests make use of the "fr_FR" (French) locale. Before
+running the test, the script checks for the presence of this locale by running
+the "locale" command. If that command fails, or if it doesn't include "fr_FR"
+in the list of available locales, the third test cannot be run, and a comment
+is output to say why. If running this test produces instances of the error
+
+  ** Failed to set locale "fr_FR"
+
+in the comparison output, it means that locale is not available on your system,
+despite being listed by "locale". This does not mean that PCRE is broken.
+
+[If you are trying to run this test on Windows, you may be able to get it to
+work by changing "fr_FR" to "french" everywhere it occurs. Alternatively, use
+RunTest.bat. The version of RunTest.bat included with PCRE 7.4 and above uses
+Windows versions of test 2. More info on using RunTest.bat is included in the
+document entitled NON-UNIX-USE.]
+
+The fourth and fifth tests check the UTF-8/16/32 support and error handling and
+internal UTF features of PCRE that are not relevant to Perl, respectively. The
+sixth and seventh tests do the same for Unicode character properties support.
+
+The eighth, ninth, and tenth tests check the pcre_dfa_exec() alternative
+matching function, in non-UTF-8/16/32 mode, UTF-8/16/32 mode, and UTF-8/16/32
+mode with Unicode property support, respectively.
+
+The eleventh test checks some internal offsets and code size features; it is
+run only when the default "link size" of 2 is set (in other cases the sizes
+change) and when Unicode property support is enabled.
+
+The twelfth test is run only when JIT support is available, and the thirteenth
+test is run only when JIT support is not available. They test some JIT-specific
+features such as information output from pcretest about JIT compilation.
+
+The fourteenth, fifteenth, and sixteenth tests are run only in 8-bit mode, and
+the seventeenth, eighteenth, and nineteenth tests are run only in 16/32-bit
+mode. These are tests that generate different output in the two modes. They are
+for general cases, UTF-8/16/32 support, and Unicode property support,
+respectively.
+
+The twentieth test is run only in 16/32-bit mode. It tests some specific
+16/32-bit features of the DFA matching engine.
+
+The twenty-first and twenty-second tests are run only in 16/32-bit mode, when
+the link size is set to 2 for the 16-bit library. They test reloading
+pre-compiled patterns.
+
+The twenty-third and twenty-fourth tests are run only in 16-bit mode. They are
+for general cases, and UTF-16 support, respectively.
+
+The twenty-fifth and twenty-sixth tests are run only in 32-bit mode. They are
+for general cases, and UTF-32 support, respectively.
+
+
+Character tables
+----------------
+
+For speed, PCRE uses four tables for manipulating and identifying characters
+whose code point values are less than 256. The final argument of the
+pcre_compile() function is a pointer to a block of memory containing the
+concatenated tables. A call to pcre_maketables() can be used to generate a set
+of tables in the current locale. If the final argument for pcre_compile() is
+passed as NULL, a set of default tables that is built into the binary is used.
+
+The source file called pcre_chartables.c contains the default set of tables. By
+default, this is created as a copy of pcre_chartables.c.dist, which contains
+tables for ASCII coding. However, if --enable-rebuild-chartables is specified
+for ./configure, a different version of pcre_chartables.c is built by the
+program dftables (compiled from dftables.c), which uses the ANSI C character
+handling functions such as isalnum(), isalpha(), isupper(), islower(), etc. to
+build the table sources. This means that the default C locale which is set for
+your system will control the contents of these default tables. You can change
+the default tables by editing pcre_chartables.c and then re-building PCRE. If
+you do this, you should take care to ensure that the file does not get
+automatically re-generated. The best way to do this is to move
+pcre_chartables.c.dist out of the way and replace it with your customized
+tables.
+
+When the dftables program is run as a result of --enable-rebuild-chartables,
+it uses the default C locale that is set on your system. It does not pay
+attention to the LC_xxx environment variables. In other words, it uses the
+system's default locale rather than whatever the compiling user happens to have
+set. If you really do want to build a source set of character tables in a
+locale that is specified by the LC_xxx variables, you can run the dftables
+program by hand with the -L option. For example:
+
+  ./dftables -L pcre_chartables.c.special
+
+The first two 256-byte tables provide lower casing and case flipping functions,
+respectively. The next table consists of three 32-byte bit maps which identify
+digits, "word" characters, and white space, respectively. These are used when
+building 32-byte bit maps that represent character classes for code points less
+than 256.
+
+The final 256-byte table has bits indicating various character types, as
+follows:
+
+    1   white space character
+    2   letter
+    4   decimal digit
+    8   hexadecimal digit
+   16   alphanumeric or '_'
+  128   regular expression metacharacter or binary zero
+
+You should not alter the set of characters that contain the 128 bit, as that
+will cause PCRE to malfunction.
+
+
+File manifest
+-------------
+
+The distribution should contain the files listed below. Where a file name is
+given as pcre[16|32]_xxx it means that there are three files, one with the name
+pcre_xxx, one with the name pcre16_xx, and a third with the name pcre32_xxx.
+
+(A) Source files of the PCRE library functions and their headers:
+
+  dftables.c              auxiliary program for building pcre_chartables.c
+                          when --enable-rebuild-chartables is specified
+
+  pcre_chartables.c.dist  a default set of character tables that assume ASCII
+                          coding; used, unless --enable-rebuild-chartables is
+                          specified, by copying to pcre[16]_chartables.c
+
+  pcreposix.c                )
+  pcre[16|32]_byte_order.c   )
+  pcre[16|32]_compile.c      )
+  pcre[16|32]_config.c       )
+  pcre[16|32]_dfa_exec.c     )
+  pcre[16|32]_exec.c         )
+  pcre[16|32]_fullinfo.c     )
+  pcre[16|32]_get.c          ) sources for the functions in the library,
+  pcre[16|32]_globals.c      )   and some internal functions that they use
+  pcre[16|32]_jit_compile.c  )
+  pcre[16|32]_maketables.c   )
+  pcre[16|32]_newline.c      )
+  pcre[16|32]_refcount.c     )
+  pcre[16|32]_string_utils.c )
+  pcre[16|32]_study.c        )
+  pcre[16|32]_tables.c       )
+  pcre[16|32]_ucd.c          )
+  pcre[16|32]_version.c      )
+  pcre[16|32]_xclass.c       )
+  pcre_ord2utf8.c            )
+  pcre_valid_utf8.c          )
+  pcre16_ord2utf16.c         )
+  pcre16_utf16_utils.c       )
+  pcre16_valid_utf16.c       )
+  pcre32_utf32_utils.c       )
+  pcre32_valid_utf32.c       )
+
+  pcre[16|32]_printint.c     ) debugging function that is used by pcretest,
+                             )   and can also be #included in pcre_compile()
+
+  pcre.h.in               template for pcre.h when built by "configure"
+  pcreposix.h             header for the external POSIX wrapper API
+  pcre_internal.h         header for internal use
+  sljit/*                 16 files that make up the JIT compiler
+  ucp.h                   header for Unicode property handling
+
+  config.h.in             template for config.h, which is built by "configure"
+
+  pcrecpp.h               public header file for the C++ wrapper
+  pcrecpparg.h.in         template for another C++ header file
+  pcre_scanner.h          public header file for C++ scanner functions
+  pcrecpp.cc              )
+  pcre_scanner.cc         ) source for the C++ wrapper library
+
+  pcre_stringpiece.h.in   template for pcre_stringpiece.h, the header for the
+                            C++ stringpiece functions
+  pcre_stringpiece.cc     source for the C++ stringpiece functions
+
+(B) Source files for programs that use PCRE:
+
+  pcredemo.c              simple demonstration of coding calls to PCRE
+  pcregrep.c              source of a grep utility that uses PCRE
+  pcretest.c              comprehensive test program
+
+(C) Auxiliary files:
+
+  132html                 script to turn "man" pages into HTML
+  AUTHORS                 information about the author of PCRE
+  ChangeLog               log of changes to the code
+  CleanTxt                script to clean nroff output for txt man pages
+  Detrail                 script to remove trailing spaces
+  HACKING                 some notes about the internals of PCRE
+  INSTALL                 generic installation instructions
+  LICENCE                 conditions for the use of PCRE
+  COPYING                 the same, using GNU's standard name
+  Makefile.in             ) template for Unix Makefile, which is built by
+                          )   "configure"
+  Makefile.am             ) the automake input that was used to create
+                          )   Makefile.in
+  NEWS                    important changes in this release
+  NON-UNIX-USE            the previous name for NON-AUTOTOOLS-BUILD
+  NON-AUTOTOOLS-BUILD     notes on building PCRE without using autotools
+  PrepareRelease          script to make preparations for "make dist"
+  README                  this file
+  RunTest                 a Unix shell script for running tests
+  RunGrepTest             a Unix shell script for pcregrep tests
+  aclocal.m4              m4 macros (generated by "aclocal")
+  config.guess            ) files used by libtool,
+  config.sub              )   used only when building a shared library
+  configure               a configuring shell script (built by autoconf)
+  configure.ac            ) the autoconf input that was used to build
+                          )   "configure" and config.h
+  depcomp                 ) script to find program dependencies, generated by
+                          )   automake
+  doc/*.3                 man page sources for PCRE
+  doc/*.1                 man page sources for pcregrep and pcretest
+  doc/index.html.src      the base HTML page
+  doc/html/*              HTML documentation
+  doc/pcre.txt            plain text version of the man pages
+  doc/pcretest.txt        plain text documentation of test program
+  doc/perltest.txt        plain text documentation of Perl test program
+  install-sh              a shell script for installing files
+  libpcre16.pc.in         template for libpcre16.pc for pkg-config
+  libpcre32.pc.in         template for libpcre32.pc for pkg-config
+  libpcre.pc.in           template for libpcre.pc for pkg-config
+  libpcreposix.pc.in      template for libpcreposix.pc for pkg-config
+  libpcrecpp.pc.in        template for libpcrecpp.pc for pkg-config
+  ltmain.sh               file used to build a libtool script
+  missing                 ) common stub for a few missing GNU programs while
+                          )   installing, generated by automake
+  mkinstalldirs           script for making install directories
+  perltest.pl             Perl test program
+  pcre-config.in          source of script which retains PCRE information
+  pcre_jit_test.c         test program for the JIT compiler
+  pcrecpp_unittest.cc          )
+  pcre_scanner_unittest.cc     ) test programs for the C++ wrapper
+  pcre_stringpiece_unittest.cc )
+  testdata/testinput*     test data for main library tests
+  testdata/testoutput*    expected test results
+  testdata/grep*          input and output for pcregrep tests
+  testdata/*              other supporting test files
+
+(D) Auxiliary files for cmake support
+
+  cmake/COPYING-CMAKE-SCRIPTS
+  cmake/FindPackageHandleStandardArgs.cmake
+  cmake/FindEditline.cmake
+  cmake/FindReadline.cmake
+  CMakeLists.txt
+  config-cmake.h.in
+
+(E) Auxiliary files for VPASCAL
+
+  makevp.bat
+  makevp_c.txt
+  makevp_l.txt
+  pcregexp.pas
+
+(F) Auxiliary files for building PCRE "by hand"
+
+  pcre.h.generic          ) a version of the public PCRE header file
+                          )   for use in non-"configure" environments
+  config.h.generic        ) a version of config.h for use in non-"configure"
+                          )   environments
+
+(F) Miscellaneous
+
+  RunTest.bat            a script for running tests under Windows
+
+Philip Hazel
+Email local part: ph10
+Email domain: cam.ac.uk
+Last updated: 10 February 2015
diff --git a/README.md b/README.md
new file mode 120000
index 00000000..c3ca0746
--- /dev/null
+++ b/README.md
@@ -0,0 +1 @@
+README.txt
\ No newline at end of file
diff --git a/README.txt b/README.txt
new file mode 100644
index 00000000..93461f73
--- /dev/null
+++ b/README.txt
@@ -0,0 +1,489 @@
+PCRE POSIX Compat
+=================
+
+What Is It?
+-----------
+
+POSIX compatibility updates for the "pcreposix" functionality provided with
+the PCRE library so that "pcreposix.h" and the corresponding library may be
+used as a standard POSIX "regex.h" substitute.
+
+See the "How to Use" section at the bottom if you're having a tl;dr moment.
+
+
+Wherefore Art Thou?
+-------------------
+
+Some poorly implemented regex engines go bananas over this:
+
+    w++++++++++++++++++++++
+
+Technically that's not a POSIX ERE (using `+` requires an ERE not a BRE).
+
+But this is:
+
+    (((((((((((((((((((((w+)+)+)+)+)+)+)+)+)+)+)+)+)+)+)+)+)+)+)+)+)+
+
+You need only compile it with one of those engines like so:
+
+    grep -E '(((((((((((((((((((((w+)+)+)+)+)+)+)+)+)+)+)+)+)+)+)+)+)+)+)+)+)+'
+
+to watch the bananas hit the fan.
+
+PCRE does not suffer bananas easily and with a few, relatively simple,
+enhancements can be used as a substitute for the POSIX "regex.h" `regcomp`
+and `regexec` functions to avoid going bananas over nothing.
+
+
+Good Timing Results for pcregrep
+--------------------------------
+
+The PCRE distribution contains a `pcregrep` utility that works very much
+like `grep` except that all patterns are PCRE patterns (as long as `-F` is
+not used).
+
+Here are some timing results for the problem regex shown above when passed
+to `pcregrep`.  The "count" value along the "x" axis represents how many
+"+" quantifiers are being used in the pattern.
+
+Some of these are running in VMs which is why these "good" timings are in
+the tens of milliseconds rather than much closer to 0.
+
+These timing results confirm that using PCRE does not go bananas on these
+kinds of patterns.  These are all "good" results.
+
+    Testing "pcregrep" on Linux 3.16.0-4-amd64 x86_64
+    |0.030| *     *
+    |     | =     =
+    |0.027| =     =
+    |     | =     =
+    |0.024| =     =
+    |     | =     =
+    |0.021| =     =
+    |     | =     =               *     *       *
+    |0.018| =     =               =     =       =
+    |     | =     =               =     =       =
+    |0.015| =     =               =     =       =
+    |     | =     =               =     =       =
+    |0.012| =     =               =     =       =
+    |     | =   * = * * * *   * * = * * = * * * = *   * * * *   * * * *
+    |0.009| =   = = = = = =   = = = = = = = = = = =   = = = =   = = = =
+    |     | =   = = = = = =   = = = = = = = = = = =   = = = =   = = = =
+    |0.006| =   = = = = = =   = = = = = = = = = = =   = = = =   = = = =
+    |     | =   = = = = = =   = = = = = = = = = = =   = = = =   = = = =
+    |0.003| =   = = = = = =   = = = = = = = = = = =   = = = =   = = = =
+    |     | =   = = = = = =   = = = = = = = = = = =   = = = =   = = = =
+    |0.000| = * = = = = = = * = = = = = = = = = = = * = = = = * = = = =
+    | sec +------------------------------------------------------------
+    |:::::| 1 2 3 4 5 6 7 8 9 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3
+    |:::::|                   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0
+
+    Testing "pcregrep" on FreeBSD 10.3-RELEASE-p4 amd64
+    |0.031|       *
+    |     |       =
+    |0.029|       =
+    |     |       =
+    |0.027|       =
+    |     |       =
+    |0.024|       =
+    |     |       =   *   *         *             *     *           *
+    |0.022|       =   =   =         =             =     =           =
+    |     |       =   =   =         =             =     =           =
+    |0.020|       =   =   =         =             =     =           =
+    |     |       =   =   =         =             =     =           =
+    |0.017|       =   =   =         =             =     =           =
+    |     | * * * = * = * = * * *   =   * * * * * = *   = * * * * * = *
+    |0.015| = = = = = = = = = = =   =   = = = = = = =   = = = = = = = =
+    |     | = = = = = = = = = = =   =   = = = = = = =   = = = = = = = =
+    |0.013| = = = = = = = = = = =   =   = = = = = = =   = = = = = = = =
+    |     | = = = = = = = = = = =   =   = = = = = = =   = = = = = = = =
+    |0.010| = = = = = = = = = = =   =   = = = = = = =   = = = = = = = =
+    |     | = = = = = = = = = = =   =   = = = = = = =   = = = = = = = =
+    |0.008| = = = = = = = = = = = * = * = = = = = = = * = = = = = = = =
+    | sec +------------------------------------------------------------
+    |:::::| 1 2 3 4 5 6 7 8 9 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3
+    |:::::|                   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0
+
+    Testing "pcregrep" on Darwin 9.8.0 i386
+    |0.010|         *           *           *         *   *           *
+    |     |         =           =           =         =   =           =
+    |0.009|         =           =           =         =   =           =
+    |     |         =           =           =         =   =           =
+    |0.008|         =           =           =         =   =           =
+    |     |         =           =           =         =   =           =
+    |0.007|         =           =           =         =   =           =
+    |     |         =           =           =         =   =           =
+    |0.006|         =           =           =         =   =           =
+    |     |         =           =           =         =   =           =
+    |0.005|         =           =           =         =   =           =
+    |     |         =           =           =         =   =           =
+    |0.004|         =           =           =         =   =           =
+    |     |         =           =           =         =   =           =
+    |0.003|         =           =           =         =   =           =
+    |     |         =           =           =         =   =           =
+    |0.002|         =           =           =         =   =           =
+    |     |         =           =           =         =   =           =
+    |0.001|         =           =           =         =   =           =
+    |     |         =           =           =         =   =           =
+    |0.000| * * * * = * * * * * = * * * * * = * * * * = * = * * * * * =
+    | sec +------------------------------------------------------------
+    |:::::| 1 2 3 4 5 6 7 8 9 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3
+    |:::::|                   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0
+
+
+Good and Bad grep Timing Results
+--------------------------------
+
+There's only one "good" result here, but it should be obvious which one
+it is.  That there's only one "good" result here instead of two will
+probably come as somewhat of a surprise to some folks, especially once
+the next section's results are viewed as well.
+
+    Testing "grep -E" on Linux 3.16.0-4-amd64 x86_64
+    |2.370|                               *
+    |     |                               =
+    |2.133|                               =
+    |     |                               =
+    |1.896|                               =
+    |     |                               =
+    |1.659|                               =
+    |     |                               =
+    |1.422|                               =
+    |     |                               =
+    |1.185|                             * =
+    |     |                             = =
+    |0.948|                             = =
+    |     |                             = =
+    |0.711|                             = =
+    |     |                             = =
+    |0.474|                           * = =
+    |     |                           = = =
+    |0.237|                         * = = =
+    |     |                     * * = = = =
+    |0.000| * * * * * * * * * * = = = = = =
+    | sec +--------------------------------
+    |:::::| 1 2 3 4 5 6 7 8 9 1 1 1 1 1 1 1
+    |:::::|                   0 1 2 3 4 5 6
+
+    Testing "grep -E" on FreeBSD 10.3-RELEASE-p4 amd64
+    |8.820|                               *
+    |     |                               =
+    |7.939|                               =
+    |     |                               =
+    |7.058|                               =
+    |     |                               =
+    |6.177|                               =
+    |     |                               =
+    |5.295|                               =
+    |     |                               =
+    |4.414|                               =
+    |     |                               =
+    |3.533|                               =
+    |     |                               =
+    |2.652|                               =
+    |     |                               =
+    |1.770|                               =
+    |     |                             * =
+    |0.889|                           * = =
+    |     |                         * = = =
+    |0.008| * * * * * * * * * * * * = = = =
+    | sec +--------------------------------
+    |:::::| 1 2 3 4 5 6 7 8 9 1 1 1 1 1 1 1
+    |:::::|                   0 1 2 3 4 5 6
+
+    Testing "grep -E" on Darwin 9.8.0 i386
+    |0.020|                                       *
+    |     |                                       =
+    |0.018|                                       =
+    |     |                                       =
+    |0.016|                                       =
+    |     |                                       =
+    |0.014|                                       =
+    |     |                                       =
+    |0.012|                                       =
+    |     |                                       =
+    |0.010|           *             *             =             *
+    |     |           =             =             =             =
+    |0.008|           =             =             =             =
+    |     |           =             =             =             =
+    |0.006|           =             =             =             =
+    |     |           =             =             =             =
+    |0.004|           =             =             =             =
+    |     |           =             =             =             =
+    |0.002|           =             =             =             =
+    |     |           =             =             =             =
+    |0.000| * * * * * = * * * * * * = * * * * * * = * * * * * * = * * *
+    | sec +------------------------------------------------------------
+    |:::::| 1 2 3 4 5 6 7 8 9 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3
+    |:::::|                   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0
+
+
+Good and Bad git Timing Results
+-------------------------------
+
+There's only one "good" result here, but it should be obvious which one
+it is (and, no, it's not the same one as in the previous set).  Again,
+it's a bit surprising there's only one "good" result here.
+
+    Testing "git log --grep" on Linux 3.16.0-4-amd64 x86_64
+    |2.330|                               *
+    |     |                               =
+    |2.097|                               =
+    |     |                               =
+    |1.864|                               =
+    |     |                               =
+    |1.631|                               =
+    |     |                               =
+    |1.398|                               =
+    |     |                               =
+    |1.165|                             * =
+    |     |                             = =
+    |0.932|                             = =
+    |     |                             = =
+    |0.699|                             = =
+    |     |                           * = =
+    |0.466|                           = = =
+    |     |                           = = =
+    |0.233|                         * = = =
+    |     |                       * = = = =
+    |0.000| * * * * * * * * * * * = = = = =
+    | sec +--------------------------------
+    |:::::| 1 2 3 4 5 6 7 8 9 1 1 1 1 1 1 1
+    |:::::|                   0 1 2 3 4 5 6
+
+    Testing "git log --grep" on FreeBSD 10.3-RELEASE-p4 amd64
+    |0.047|                                           *
+    |     |                                           =
+    |0.044|                                           =
+    |     |                                           =
+    |0.041|                                           =
+    |     |                                           =               *
+    |0.038|                                           =               =
+    |     |                                           =               =
+    |0.034|                                           =               =
+    |     |                                           =               =
+    |0.031|     *   * *   * * *   *   *     *         = * *     * *   =
+    |     |     =   = =   = = =   =   =     =         = = =     = =   =
+    |0.028|     =   = =   = = =   =   =     =         = = =     = =   =
+    |     |     =   = =   = = =   =   =     =         = = =     = =   =
+    |0.025|     =   = =   = = =   =   =     =         = = =     = =   =
+    |     | * * = * = =   = = = * = * =   * = * * * * = = = * * = = * =
+    |0.022| = = = = = =   = = = = = = =   = = = = = = = = = = = = = = =
+    |     | = = = = = =   = = = = = = =   = = = = = = = = = = = = = = =
+    |0.019| = = = = = =   = = = = = = =   = = = = = = = = = = = = = = =
+    |     | = = = = = =   = = = = = = =   = = = = = = = = = = = = = = =
+    |0.016| = = = = = = * = = = = = = = * = = = = = = = = = = = = = = =
+    | sec +------------------------------------------------------------
+    |:::::| 1 2 3 4 5 6 7 8 9 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3
+    |:::::|                   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0
+
+    Testing "git log --grep" on Darwin 9.8.0 i386
+    |3.150|                                 *
+    |     |                                 =
+    |2.835|                                 =
+    |     |                                 =
+    |2.520|                                 =
+    |     |                                 =
+    |2.205|                                 =
+    |     |                                 =
+    |1.890|                                 =
+    |     |                                 =
+    |1.575|                                 =
+    |     |                               * =
+    |1.260|                               = =
+    |     |                               = =
+    |0.945|                               = =
+    |     |                               = =
+    |0.630|                             * = =
+    |     |                             = = =
+    |0.315|                           * = = =
+    |     |                         * = = = =
+    |0.000| * * * * * * * * * * * * = = = = =
+    | sec +----------------------------------
+    |:::::| 1 2 3 4 5 6 7 8 9 1 1 1 1 1 1 1 1
+    |:::::|                   0 1 2 3 4 5 6 7
+
+
+PCRE POSIX Means What?
+----------------------
+
+With a name like "pcreposix" it could be taken to mean either of these:
+
+ 1. PCRE used as an implementation backend to provide POSIX semantics
+ 2. PCRE semantics provided via a POSIX-similar API
+
+If you guessed (1), you're wrong.  At least historically speaking, "pcreposix"
+has always meant (2) which can be a bit confusing since it provided neither
+Basic Regular Expression (BRE) support nor Extended Regular Expression (ERE)
+support via the `regcomp` and `regexec` functions in the "pcreposix.h" header,
+but has "posix" in its name and POSIX `regcomp` and `regexec` provide those.
+
+What it did provide was Perl Compatible Regular Expression (PCRE) support via
+that header.
+
+
+PCRE POSIX Compat
+-----------------
+
+These compatibility updates for "pcreposix" update it to provide _both_ (1)
+and (2) by introducing full support for POSIX BREs and EREs and providing a
+new `REG_PCRE` option for the `regcomp` function to activate PCRE support.
+
+As a bonus a `REG_JAVASCPT` option is also provided to activate PCRE's
+Javascript Regular Expression (JRE) support.
+
+All in one place with one API you get your BREs, EREs, PCREs and JREs.
+
+
+Backwards Compatibility
+-----------------------
+
+Not with older "pcreposix" libraries.  The original version of "pcreposix.h"
+defines the `REG_EXTENDED` constant to be 0.  This makes backwards
+compatibility for the "pcreposix" library impossible.
+
+The version for the "pcreposix" library has been changed from a previous
+`-version-info 0:4:0` to the current `-version-info 1:0:0`.  What this means
+is that both the old and new "pcreposix" libraries can coexist on the same
+system.  The old, original one will have a name like "libpcreposix.0.<ext>"
+while the new one will be named like "libpcreposix.1.<ext>".
+
+The "pcreposix.h" header has also seen substantial changes and while an attempt
+has been made to make sure same-named constants keep the same value between the
+original version of "pcreposix.h" and the new one, in some cases that's just
+not possible.  For example, `REG_EXTENDED` must not be 0.
+
+To address this issue and also facilitate use as a "regex.h" substitute, the
+new "pcreposix.h" header and a new "regex.h" header (it's the same header) are
+now installed to "$includedir/pcreposix/pcreposix.h" and
+"$includedir/pcreposix/regex.h" whereas the original header was installed
+simply to "$includedir/pcreposix.h".
+
+So again, the old and new versions of the "pcreposix.h" header can coexist on
+the same system.  But now, to use the new "pcreposix" as a drop-in "regex.h"
+substitute all that's required is adding a "-I $includedir/pcreposix" option
+to the compile line and "-lpcreposix -lpcre" options to the link line.
+
+Although if "libpcreposix.<ext>" is pointing at the old "libpcreposix.0.<ext>"
+library then that will have to be "-lpcreposix.1" instead.
+
+The version of PCRE remains unchanged because:
+
+ 1. The only client of the new options is the new pcreposix
+ 2. Versions of PCRE not supporting the new options will complain about them
+    causing the new pcreposix `regcomp` implementation to return an error
+ 3. Even if non-pcreposix clients make use of the newly provided PCRE options
+    regex's compiled using them can be executed by any version of PCRE
+
+
+Slight of Hand
+--------------
+
+So how does PCRE now, all of a sudden, support POSIX-semantics BREs and EREs?
+
+Magic.  A slight of hand. "Syntactic Sugar".
+
+When the pattern is compiled in "BRE" mode, automagical virtual backslash
+escaping and unescaping takes place to transform the incoming BRE into an
+equivalent PCRE.
+
+To a lesser extent the same thing happens in "ERE" mode but really only in
+the one case (`[^foo]` does not match `\n` when one of the new options is
+enabled).  But again, more slight of hand (an extra `\n` is virtually inserted
+into the negated character class to get the desired semantics).
+
+There are five new PCRE options in all.  (The other three also perform more
+slight-of-hand to provide POSIX `REG_EXTENDED`, BSD `REG_PEND` and BSD
+`REG_NOSPEC` compatibility.)
+
+The bottom line is that saving off a compiled PCRE regular expression that used
+one (or more) of the new options, loading it on a system without support for
+the new options and "exec"ing it works and matches what it's supposed to.
+
+The rest of the POSIX semantics compatibility is provided by having the new
+"pcreposix" library manipulate other PCRE options (`PCRE_DOTALL`,
+`PCRE_DOLLARENDOLY` and `PCRE_MULTILINE`) based on the options supplied to
+the `regcomp` function.
+
+Full details are in the "pcreposix.h" header, but basically, sticking to only
+POSIX-defined options results in POSIX semantics.  Using either the new
+`REG_PCRE` or `REG_JAVASCPT` non-POSIX options gets you either PCREs or JREs
+respectively.
+
+The "*BSD" compatibility options (`REG_PEND`, `REG_NOSPEC` and `REG_STARTEND`)
+are supported in all regex modes (but `REG_NOSPEC` acts like its own mode).
+
+
+New pcreposix Old pcre
+----------------------
+
+So what happens if a new "pcreposix" library is linked against an old "pcre"
+library?
+
+It depends.
+
+If the "pcreposix" client has set `REG_PCRE` and/or `REG_JAVASCPT` and avoids
+using `REG_NOSPEC` and `REG_PEND` then everything else will work.
+
+Alternatively, if the "pcreposix" client sets `REG_EXTENDED` and does NOT set
+any of `REG_NEWLINE`, `REG_NOSPEC` or `REG_PEND` it will also still work.
+
+If none of `REG_EXTENDED`, `REG_PCRE` or `REG_JAVASCPT` are set or either of
+`REG_PEND` or `REG_NOSPEC` is set it will fail at `regcomp` time with a
+`REG_INVARG` error.
+
+The fact that "pcreposix" non-BRE and non-REG_NEWLINE functionality works fully
+and correctly with an "old" "-lpcre" library and returns an error rather than
+giving incorrect results for the rest is the reason that the PCRE library
+version remains unchanged by these compatibility updates.
+
+An application that links against a shared "pcre" library and needs to use one
+or more of the options that require the enhanced "pcre" library should simply
+attempt to compile a simple pattern using the needed options at startup and
+bail out immediately if it gets a `REG_INVARG` result.
+
+
+How to Use
+----------
+
+Build and install like normal for PCRE (e.g. run "./configure" then "make"
+and then "make install").
+
+This repository already contains the necessary pre-generated "configure" and
+patches pre-applied to the PCRE 8.40 tarball release.  Clone it, download a
+tarball of it or see the "pcreposix-compat-patches" branch for individual
+patches to apply to a PCRE 8.40 tarball yourself.
+
+Clients that explicitly need to use non-POSIX options should include the header
+as `#include <pcreposix/pcreposix.h>` and make sure they set the `REG_PCRE`
+and/or `REG_JAVASCPT` option bit(s) for `regcomp` to get PCRE or JRE support.
+
+For use as a drop-in substitute for the POSIX "regex.h", clients should just
+continue to `#include <regex.h>` and then compile with the proper include
+"-I $includedir/pcreposix" option.
+
+In any case, clients of "pcreposix" must link against BOTH "-lpcreposix" and
+"-lpcre" (wherever they happen to be).
+
+If you wish to use this as a substitute "regex.h" when building Git, see the
+accompanying "README-GIT-REGEX" and "config.mak" files for assistance with
+doing that.
+
+See the previous section for a discussion of what happens when you link against
+the new "pcreposix" library and an older "pcre" library.  In some cases that
+may be a desirable scenario where a static version of the new "pcreposix"
+library is linked into an application which is then linked against an older
+shared "pcre" library.  Read the previous section for details.
+
+
+License
+-------
+
+These updates and enhancements are licensed under the same terms as PCRE
+itself.
+
+
+Project Home Page
+-----------------
+
+https://github.com/mackyle/pcreposix-compat
diff --git a/config.mak b/config.mak
new file mode 100644
index 00000000..b38e74a4
--- /dev/null
+++ b/config.mak
@@ -0,0 +1,73 @@
+##
+## This file is for use in building Git with the "pcreposix-compat"
+## regex libraries instead of its bundled ones.
+##
+## If you are not building Git this file will not be of use to you.
+##
+## See the "README-GIT-REGEX" file for additional details.
+##
+
+## NOTE: The "pcreposix-compat" libraries must already be built, this
+##       file does not build them.
+
+## IMPORTANT:  Prior to Git v2.11.1, using pcreposix-compat as a regex.h
+##             substitute would result in several spurious t7810 test failures.
+##             This was mostly corrected in Git v2.11.1 and these failures can
+##             safely be ignored.  If building Git v2.11.1 there is a patch in
+##             the `gitpatches` subdirectory that will eliminate the last of
+##             the spurious t7810-grep test failures when using the
+##             pcreposix-compat library as a regex.h sustitute.
+
+# If you already have your own config.mak, add these contents to the END
+# of yours, not the beginning.  The "config.mak" file needs to be placed
+# in the top-level directory of the Git distribution (alongside "Makefile")
+# that is being built.
+
+# The Git Makefile hard-codes NO_REGEX when uname_S is Darwin.
+# Compensate for that by altering the uname_S setting in that case
+# and duplicating the needed non-regex logic.
+# If you never build on a "Darwin" platform you can remove this section.
+ifeq ($(uname_S),Darwin)
+  uname_S = Darwin-pcreposix
+  ifndef NO_FINK
+    ifeq ($(shell test -d /sw/lib && echo y),y)
+      BASIC_CFLAGS += -I/sw/include
+      BASIC_LDFLAGS += -L/sw/lib
+    endif
+  endif
+  ifndef NO_DARWIN_PORTS
+    ifeq ($(shell test -d /opt/local/lib && echo y),y)
+      BASIC_CFLAGS += -I/opt/local/include
+      BASIC_LDFLAGS += -L/opt/local/lib
+    endif
+  endif
+  ifndef NO_APPLE_COMMON_CRYPTO
+    NO_OPENSSL = YesPlease
+    APPLE_COMMON_CRYPTO = YesPlease
+    COMPAT_CFLAGS += -DAPPLE_COMMON_CRYPTO
+  endif
+  PTHREAD_LIBS =
+endif
+
+# Unfortunately Git's bundled compatibility regex library suffers from some
+# serious performance problems.  Despite that it's often used automatically.
+
+# Have Git build with pcreposix-compat instead which does not suffer from
+# the same problematic performance problems.
+
+# Set PCREPOSIXDIR to the directory containing an "include" and "lib"
+# subdirectory with -lpcreposix -lpcre in "lib" and "pcreposix/regex.h" in
+# "include".
+
+PCREPOSIXDIR = /usr/local/or/whatever/correct/location/is/needed
+
+# Alternatively change both of these two instead
+PCREPOSIXINC = $(PCREPOSIXDIR)/include/pcreposix # should be a regex.h in here
+PCREPOSIXLIB = $(PCREPOSIXDIR)/lib # should be a libpcreposix.<ext> in here
+
+# Turn off the bundled regex (ineffective if uname_S is still "Darwin")
+NO_REGEX =
+
+# Add pcreposix-compat compiler and linker options
+BASIC_CFLAGS += -I$(PCREPOSIXINC)
+BASIC_LDFLAGS += -L$(PCREPOSIXLIB) -lpcreposix -lpcre
diff --git a/doc/html/pcreposix.html b/doc/html/pcreposix.html
index 2cfce6d9..8fa415cd 100644
--- a/doc/html/pcreposix.html
+++ b/doc/html/pcreposix.html
@@ -42,6 +42,12 @@ man page, in case the conversion went wrong.
 </P>
 <br><a name="SEC2" href="#TOC1">DESCRIPTION</a><br>
 <P>
+This man page reflects the old version of the pcreposix API and library.
+To get the behavior described here with the new pcreposix API and library
+the "REG_PCRE" option must be passed to the "regcomp" function.  See the
+<b>pcreposix/pcreposix.h</b> header file for full details.
+</P>
+<P>
 This set of functions provides a POSIX-style API for the PCRE regular
 expression 8-bit library. See the
 <a href="pcreapi.html"><b>pcreapi</b></a>
diff --git a/doc/pcreposix.3 b/doc/pcreposix.3
index a19235e9..1e8fc4bf 100644
--- a/doc/pcreposix.3
+++ b/doc/pcreposix.3
@@ -21,6 +21,11 @@ PCRE - Perl-compatible regular expressions.
 .SH DESCRIPTION
 .rs
 .sp
+This man page reflects the old version of the pcreposix API and library.
+To get the behavior described here with the new pcreposix API and library
+the "REG_PCRE" option must be passed to the "regcomp" function.  See the
+\fBpcreposix/pcreposix.h\fP header file for full details.
+.P
 This set of functions provides a POSIX-style API for the PCRE regular
 expression 8-bit library. See the
 .\" HREF
diff --git a/gitpatches/7810-spurious-undefined-behavior-fail-fix.txt b/gitpatches/7810-spurious-undefined-behavior-fail-fix.txt
new file mode 100644
index 00000000..bdb9297f
--- /dev/null
+++ b/gitpatches/7810-spurious-undefined-behavior-fail-fix.txt
@@ -0,0 +1,36 @@
+From: "Kyle J. McKay" <mackyle@gmail.com>
+Subject: [PATCH] t7810-grep: use test_expect_failure for undefined behavior
+
+POSIX says \x has undefined behavior where x is any non-special
+character such as a letter like 'x' or 'p'.
+
+In 7675c7bd01b8 (t7810: avoid assumption about invalid regex syntax,
+2017-01-11, v2.11.1), the problem of relying on "undefined behavior"
+was corrected for "\x" but not for "\p".
+
+Mark the remaining test that's likely to cause problems as
+"test_expect_failure" since it relies on "undefined behavior" to
+succeed.
+
+A better solution would be along the same lines as 7675c7bd01b8
+but this will do in a pinch.
+
+Signed-off-by: Kyle J. McKay <mackyle@gmail.com>
+---
+ t/t7810-grep.sh | 2 +-
+ 1 file changed, 1 insertion(+), 1 deletion(-)
+
+diff --git a/t/t7810-grep.sh b/t/t7810-grep.sh
+index 19f0108f..fa6c9d94 100755
+--- a/t/t7810-grep.sh
++++ b/t/t7810-grep.sh
+@@ -997,7 +997,7 @@ test_expect_success LIBPCRE 'grep -P pattern' '
+ 	test_cmp expected actual
+ '
+ 
+-test_expect_success 'grep pattern with grep.extendedRegexp=true' '
++test_expect_failure 'grep pattern with grep.extendedRegexp=true' '
+ 	>empty &&
+ 	test_must_fail git -c grep.extendedregexp=true \
+ 		grep "\p{Ps}.*?\p{Pe}" hello.c >actual &&
+---

-- 
tg: (c00112bc..) t/compat-readme (depends on: t/compat-version)
