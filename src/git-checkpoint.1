'\" t
.\"     Title: git-checkpoint
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.75.2 <http://docbook.sf.net/>
.\"      Date: 02/22/2015
.\"    Manual: Git Manual
.\"    Source: Git
.\"  Language: English
.\"
.TH "GIT\-CHECKPOINT" "1" "02/22/2015" "Git" "Git Manual"
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
git-checkpoint \- Stash the changes in a dirty working directory away
.SH "SYNOPSIS"
.sp
.nf
\fIgit checkpoint\fR [<message>]
.fi
.sp
.SH "DESCRIPTION"
.sp
Use git checkpoint when you want to record the current state of the working directory and the index, but do NOT want to go back to a clean working directory\&. The command saves your local modifications away without touching the index or working directory\&.
.sp
The modifications stashed away by this command can be listed with git stash list, inspected with git stash show, and restored (potentially on top of a different commit) with git stash apply\&. A stash is by default listed as "WIP on \fIbranchname\fR \&...", but you can give a more descriptive message on the command line when you create one\&.
.sp
The latest stash you created is stored in refs/stash; older stashes are found in the reflog of this reference and can be named using the usual reflog syntax (e\&.g\&. stash@{0} is the most recently created stash, stash@{1} is the one before it, stash@{2\&.hours\&.ago} is also possible)\&.
.SH "SEE ALSO"
.sp
\fBgit-reflog\fR(1), \fBgit-stash\fR(1)
